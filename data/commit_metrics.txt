
      MINOR: Add upgrade documentation for 3.6.0 (#14534)
    
This change adds the upgrade documentation for 3.6.0 and fixes the position of the notable changes in 3.5.0.
In previous releases, notable changes always come after the upgrade instructions.

Reviewers:  Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
1 changed file
91 additions
30 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15465: Don't throw if MirrorMaker not authorized to create inte…
    
…rnal topics. (#14388)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Ahmed Hibot
2 changed files
69 additions
4 deletions
DATE:Oct 13, 2023
-----------

      MINOR Updated documentation.html to have 3.5 and 3.6 previous release…
    
… doc links (#14510)

Reviewers: Luke Chen <showuon@gmail.com>, kpatelatwork <kpatel@confluent.io>
1 changed file
3 additions
1 deletion
DATE:Oct 12, 2023
-----------

KAFKA-15570: Add unit tests for MemoryConfigBackingStore (#14518)
    
Reviewers: Chris Egerton <chrise@aiven.io>, Kalpesh Patel <kpatel@confluent.io>
1 changed file
185 additions
0 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Fix Consumed to return new object instead of this (#14550)
    
We embrace immutability and thus should return a new object instead of
`this`, similar to other config classed we use in the DSL.

Side JavaDocs cleanup for a bunch of classes.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
10 changed files
275 additions
164 deletions
DATE:Oct 16, 2023
-----------

KAFKA-15596: Upgrade ZooKeeper to 3.8.3 (#14535)
    

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
3 additions
3 deletions
DATE:Oct 12, 2023
-----------

      MINOR: add quick start for tiered storage feature (#14528)
    
Some users complained they don't have a way to determine if there is something wrong in the RSM plug-in they implemented, or there's something wrong in Kafka itself. Also, if there are users who just want to try the tiered storage feature out before implementing anything, it would be good we have an RSM implementation by default.

Per the discussion in the KIP, there will be no default RSM implementation in Kafka, but we can use the LocalTieredStorage implemented for integration test, to resolve the issues above.

Reviewers: Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
76 additions
8 deletions
DATE:Oct 17, 2023
-----------

KAFKA-15387: Deprecate Connect's redundant task configurations endpoi…
    
…nt (#14361)

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>
5 changed files
55 additions
12 deletions
DATE:Oct 14, 2023
-----------

      MINOR: cleanup warnings in Kafka Streams code base (#14549)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>, A. Sophie Blee-Goldman <sophie@responsive.dev>
13 changed files
81 additions
59 deletions
DATE:Oct 16, 2023
-----------

KAFKA-15571: StateRestoreListener#onRestoreSuspended is never calle…
    
…d because `DelegatingStateRestoreListener` doesn't implement `onRestoreSuspended` (#14519)

With https://issues.apache.org/jira/browse/KAFKA-10575 StateRestoreListener#onRestoreSuspended was added. But local tests show that it is never called because DelegatingStateRestoreListener was not updated to call a new method

Reviewers: Anna Sophie Blee-Goldman <sophie@responsive.dev>, Bruno Cadonna <cadonna@confluent.io>
2 changed files
214 additions
4 deletions
DATE:Oct 11, 2023
-----------

      MINOR: fix typo (#14542)
    
Reviewers: Bruno Cadonna <bruno@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15390: Do not return fenced broker in FetchResponse.preferredRe…
    
…plica (#14272)

Do not return fenced brokers from metadataCache.getPartitionReplicaEndpoints, since that could lead to
them getting used as preferred read replicas.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
25 additions
16 deletions
DATE:Oct 16, 2023
-----------

      MINOR - KAFKA-15550: Validation for negative target times in offsetsF…
    
…orTimes (#14503)

The current KafkaConsumer offsetsForTimes fails with IllegalArgumentException if negative target timestamps are provided as arguments. This change includes the same validation and tests for the new consumer implementation (and some improved comments for the updateFetchPositions)

Reviewer: Lucas Brutschy <lbrutschy@confluent.io>
3 changed files
41 additions
9 deletions
DATE:Oct 13, 2023
-----------

      MINOR: cleanup some warning in Kafka Streams examples (#14547)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
8 changed files
32 additions
37 deletions
DATE:Oct 14, 2023
-----------

KAFKA-15536: Dynamically resize remoteIndexCache (#14511)
    
Dynamically resize remoteIndexCache

Reviewers: Christo Lolov <lolovc@amazon.com>, Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
2 changed files
120 additions
30 deletions
DATE:Oct 16, 2023
-----------

KAFKA-14481: Move LogSegment/LogSegments to storage module (#14529)
    
A few notes:
* Delete a few methods from `UnifiedLog` that were simply invoking the related method in `LogFileUtils`
* Fix `CoreUtils.swallow` to use the passed in `logging`
* Fix `LogCleanerParameterizedIntegrationTest` to close `log` before reopening
* Minor tweaks in `LogSegment` for readability
 
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
45 changed files
1,857 additions
1,494 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Rewrite/Move KafkaNetworkChannel to the raft module (#14559)
    
This is now possible since `InterBrokerSend` was moved from `core` to `server-common`.
Also rewrite/move `KafkaNetworkChannelTest`.

The scala version of `KafkaNetworkChannelTest` passed with the changes here (before I
deleted it).

Reviewers: Justine Olshan <jolshan@confluent.io>, José Armando García Sancio <jsancio@users.noreply.github.com>
7 changed files
510 additions
512 deletions
DATE:Oct 17, 2023
-----------

KAFKA-14596: Move TopicCommand to tools (#13201)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
12 changed files
2,517 additions
1,732 deletions
DATE:Oct 17, 2023
-----------

      MINOR: Disable flaky kraft-test in FetchRequestTest (#14525)
    
We introduced a bunch of flaky tests in #14295 , which are normal when running locally but will always fail in CI, lets rollback them unless we find the cause before the end of today.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>
1 changed file
15 additions
15 deletions
DATE:Oct 11, 2023
-----------

KAFKA-14684: Replace EasyMock/PowerMock with Mockito in WorkerSinkTas…
    
…kThreadedTest (#14505)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Christo Lolov <christololov@gmail.com>
2 changed files
346 additions
353 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Fix docs for ReplicationBytes(Out|In)PerSec metrics (#14228)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Taras Ledkov
1 changed file
4 additions
4 deletions
DATE:Oct 16, 2023
-----------

KAFKA-14987; Implement Group/Offset expiration in the new coordinator (…

…#14467)

This patch implements the groups and offsets expiration in the new group coordinator.

Reviewers: Ritika Reddy <rreddy@confluent.io>, David Jacot <djacot@confluent.io>
19 changed files
1,063 additions
64 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Various Scala cleanups in core (#14558)
    

Reviewers: Ismael Juma <ismael@juma.me.uk>
25 changed files
70 additions
95 deletions
DATE:Oct 17, 2023
-----------

KAFKA-15569: test and add test cases in IQv2StoreIntegrationTest (#14523

)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
576 additions
75 deletions
DATE:Oct 17, 2023
-----------

      MINOR: Only commit running active and standby tasks when tasks corrup…
    
…ted (#14508)

When tasks are found corrupted, Kafka Streams tries to commit
the non-corrupted tasks before closing and reviving the corrupted
active tasks. Besides active running tasks, Kafka Streams tries
to commit restoring active tasks and standby tasks. However,
restoring active tasks do not need to be committed since they
do not have offsets to commit and the current code does not
write a checkpoint. Furthermore, trying to commit restoring
active tasks with the state updater enabled results in the
following error:

java.lang.UnsupportedOperationException: This task is read-only
at org.apache.kafka.streams.processor.internals.ReadOnlyTask.commitNeeded(ReadOnlyTask.java:209)
...

since commitNeeded() is not a read-only method for active tasks.

In future, we can consider writing a checkpoint for active
restoring tasks in this situation. Additionally, we should
fix commitNeeded() in active tasks to be read-only.

Reviewers: Matthias J. Sax <matthias@confluent.io>, Lucas Brutschy <lbrutschy@confluent.io>
4 changed files
57 additions
5 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Add javadoc to all ConfigDef.Types values (#14515)
    

Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
55 additions
3 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15221; Fix the race between fetch requests from a rebooted foll…
    
…ower. (#14053)

A race can happen in the following sequence.
1. Stale Fetch triggers the ISR expansion.
2. The first time we check whether the replica is eligible. Catch up? Yes. broker epoch match? Yes (the metadata cache update has not happened)
3. Metadata cache update happens.
4. During the second time check the eligibility
    a. Catch up? Yes
    b. A new fetch request comes in. It cancels the replica caught-up and updates the broker epoch
    c. broker epoch match? Yes. New fetch epoch = new metadata cache epoch
5. Send an AlterPartition request with the new broker epoch.
----------------
The solution is to make sure that the 4.a) ,4.c) and 5) use the same replica state.

Reviewers: David Mao <47232755+splett2@users.noreply.github.com>, David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
175 additions
31 deletions
DATE:Oct 11, 2023
-----------

      MINOR: Fix KafkaStreams#streamThreadLeaveConsumerGroup logging (#14526)
    
Fixes logging for KafkaStreams#streamThreadLeaveConsumerGroup.

In order not to lose the trace of the whole exception, passing Exception e as a second argument, while message is pre-formatted and passed as string as a first argument. With this, we won't loose the stack trace of the exception.

Reviewers: Anna Sophie Blee-Goldman <sophie@responsive.dev>
1 changed file
3 additions
3 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15593: Add 3.6 to core upgrade and compatibility tests (#14527)
    
Reviewers:  Christo Lolov <lolovc@amazon.com>, Josep Prat <josep.prat@aiven.io>
5 changed files
18 additions
6 deletions
DATE:Oct 13, 2023
-----------

      MINOR: fix dependencycheck warnings (#14476)
    
Add suppressions and skip benchmarking/testing projects

Reviewers: Josep Prat <josep.prat@aiven.io>
3 changed files
34 additions
0 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15492: Upgrade and enable spotbugs when building with Java 21 (#…

…14533)

Spotbugs was temporarily disabled as part of KAFKA-15485 to support Kafka build with JDK 21. This PR upgrades the spotbugs version to 4.8.0 which adds support for JDK 21 and enables it's usage on build again.

Reviewers: Divij Vaidya <diviv@amazon.com>
12 changed files
67 additions
26 deletions
DATE:Oct 12, 2023
-----------

KAFKA-15532: non active controllers return 0 for ZkWriteBeforelag (#1…

…4478)

Since only the active controller is performing the dual-write to ZK during a migration, it should be the only controller
to report the ZkWriteBehindLag metric.

Currently, if the controller fails over during a migration, the previous active controller will incorrectly report its last
value for ZkWriteBehindLag forever. Instead, it should report zero.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, David Arthur <mumrah@gmail.com>
2 changed files
18 additions
2 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Fix directory name inconsistency in the Kafka Streams tutorial (…

…#14541)

Reviewers: Bruno Cadonna <bruno@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15537: Fix metadata downgrade documentation (#14484)
    
In KIP-778 we introduced the "unsafe" (lossy) downgrade in case metadata has changes in one of the versions between target and current, as defined in MetadataVersion.

The documentation says it is possible:

"Note that the cluster metadata version cannot be downgraded to a pre-production 3.0.x, 3.1.x, or 3.2.x version once it has been upgraded. However, it is possible to downgrade to production versions such as 3.3-IV0, 3.3-IV1, etc."

The command line tool shows that this doesn't work:

bin/kafka-features.sh --bootstrap-server :9092 downgrade --metadata 3.4 --unsafe
Could not downgrade metadata.version to 8. Invalid metadata.version 8. Unsafe metadata downgrade is not supported in this version.
1 out of 1 operation(s) failed.

In addition to unsafe, also safe metadata downgrades are not supported in practice. For example, when you upgrade to 3.5, you land on 3.5-IV2 as metadata version, which has metadata changes and won't let you to downgrade. This is true for every other release at the moment.

This change fixes the documentation to reflect that, and improves the error messages.

Signed-off-by: Federico Valeri <fedevaleri@gmail.com>

Reviewers: Luke Chen <showuon@gmail.com>, Jakub Scholz <github@scholzj.com>
4 changed files
17 additions
11 deletions
DATE:Oct 12, 2023
-----------

KAFKA-14133: Move MeteredTimestampedKeyValueStoreTest, ReadOnlyWindow…
    
…StoreFacadeTest and TimestampedWindowStoreBuilderTest to Mockito (#14412)

Reviewers: Divij Vaidya <diviv@amazon.com>, Yash Mayya <yash.mayya@gmail.com>
3 changed files
103 additions
200 deletions
DATE:Oct 11, 2023
-----------

      MINOR: Add upgrade documentation for 3.6.0 (#14534)
    
This change adds the upgrade documentation for 3.6.0 and fixes the position of the notable changes in 3.5.0.
In previous releases, notable changes always come after the upgrade instructions.

Reviewers:  Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
1 changed file
91 additions
30 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15465: Don't throw if MirrorMaker not authorized to create inte…
    
…rnal topics. (#14388)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Ahmed Hibot
2 changed files
69 additions
4 deletions
DATE:Oct 13, 2023
-----------

      MINOR Updated documentation.html to have 3.5 and 3.6 previous release…
    
… doc links (#14510)

Reviewers: Luke Chen <showuon@gmail.com>, kpatelatwork <kpatel@confluent.io>
1 changed file
3 additions
1 deletion
DATE:Oct 12, 2023
-----------

KAFKA-15570: Add unit tests for MemoryConfigBackingStore (#14518)
    
Reviewers: Chris Egerton <chrise@aiven.io>, Kalpesh Patel <kpatel@confluent.io>
1 changed file
185 additions
0 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Fix Consumed to return new object instead of this (#14550)
    
We embrace immutability and thus should return a new object instead of
`this`, similar to other config classed we use in the DSL.

Side JavaDocs cleanup for a bunch of classes.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
10 changed files
275 additions
164 deletions
DATE:Oct 16, 2023
-----------

KAFKA-15596: Upgrade ZooKeeper to 3.8.3 (#14535)
    

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
3 additions
3 deletions
DATE:Oct 12, 2023
-----------

      MINOR: add quick start for tiered storage feature (#14528)
    
Some users complained they don't have a way to determine if there is something wrong in the RSM plug-in they implemented, or there's something wrong in Kafka itself. Also, if there are users who just want to try the tiered storage feature out before implementing anything, it would be good we have an RSM implementation by default.

Per the discussion in the KIP, there will be no default RSM implementation in Kafka, but we can use the LocalTieredStorage implemented for integration test, to resolve the issues above.

Reviewers: Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
76 additions
8 deletions
DATE:Oct 17, 2023
-----------

KAFKA-15387: Deprecate Connect's redundant task configurations endpoi…
    
…nt (#14361)

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>
5 changed files
55 additions
12 deletions
DATE:Oct 14, 2023
-----------

      MINOR: cleanup warnings in Kafka Streams code base (#14549)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>, A. Sophie Blee-Goldman <sophie@responsive.dev>
13 changed files
81 additions
59 deletions
DATE:Oct 16, 2023
-----------

KAFKA-15571: StateRestoreListener#onRestoreSuspended is never calle…
    
…d because `DelegatingStateRestoreListener` doesn't implement `onRestoreSuspended` (#14519)

With https://issues.apache.org/jira/browse/KAFKA-10575 StateRestoreListener#onRestoreSuspended was added. But local tests show that it is never called because DelegatingStateRestoreListener was not updated to call a new method

Reviewers: Anna Sophie Blee-Goldman <sophie@responsive.dev>, Bruno Cadonna <cadonna@confluent.io>
2 changed files
214 additions
4 deletions
DATE:Oct 11, 2023
-----------

      MINOR: fix typo (#14542)
    
Reviewers: Bruno Cadonna <bruno@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15390: Do not return fenced broker in FetchResponse.preferredRe…
    
…plica (#14272)

Do not return fenced brokers from metadataCache.getPartitionReplicaEndpoints, since that could lead to
them getting used as preferred read replicas.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
25 additions
16 deletions
DATE:Oct 16, 2023
-----------

      MINOR - KAFKA-15550: Validation for negative target times in offsetsF…
    
…orTimes (#14503)

The current KafkaConsumer offsetsForTimes fails with IllegalArgumentException if negative target timestamps are provided as arguments. This change includes the same validation and tests for the new consumer implementation (and some improved comments for the updateFetchPositions)

Reviewer: Lucas Brutschy <lbrutschy@confluent.io>
3 changed files
41 additions
9 deletions
DATE:Oct 13, 2023
-----------

      MINOR: cleanup some warning in Kafka Streams examples (#14547)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
8 changed files
32 additions
37 deletions
DATE:Oct 14, 2023
-----------

KAFKA-15536: Dynamically resize remoteIndexCache (#14511)
    
Dynamically resize remoteIndexCache

Reviewers: Christo Lolov <lolovc@amazon.com>, Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
2 changed files
120 additions
30 deletions
DATE:Oct 16, 2023
-----------

KAFKA-14481: Move LogSegment/LogSegments to storage module (#14529)
    
A few notes:
* Delete a few methods from `UnifiedLog` that were simply invoking the related method in `LogFileUtils`
* Fix `CoreUtils.swallow` to use the passed in `logging`
* Fix `LogCleanerParameterizedIntegrationTest` to close `log` before reopening
* Minor tweaks in `LogSegment` for readability
 
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
45 changed files
1,857 additions
1,494 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Rewrite/Move KafkaNetworkChannel to the raft module (#14559)
    
This is now possible since `InterBrokerSend` was moved from `core` to `server-common`.
Also rewrite/move `KafkaNetworkChannelTest`.

The scala version of `KafkaNetworkChannelTest` passed with the changes here (before I
deleted it).

Reviewers: Justine Olshan <jolshan@confluent.io>, José Armando García Sancio <jsancio@users.noreply.github.com>
7 changed files
510 additions
512 deletions
DATE:Oct 17, 2023
-----------

KAFKA-14596: Move TopicCommand to tools (#13201)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
12 changed files
2,517 additions
1,732 deletions
DATE:Oct 17, 2023
-----------

      MINOR: Disable flaky kraft-test in FetchRequestTest (#14525)
    
We introduced a bunch of flaky tests in #14295 , which are normal when running locally but will always fail in CI, lets rollback them unless we find the cause before the end of today.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>
1 changed file
15 additions
15 deletions
DATE:Oct 11, 2023
-----------

KAFKA-14684: Replace EasyMock/PowerMock with Mockito in WorkerSinkTas…
    
…kThreadedTest (#14505)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Christo Lolov <christololov@gmail.com>
2 changed files
346 additions
353 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Fix docs for ReplicationBytes(Out|In)PerSec metrics (#14228)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Taras Ledkov
1 changed file
4 additions
4 deletions
DATE:Oct 16, 2023
-----------

KAFKA-14987; Implement Group/Offset expiration in the new coordinator (…

…#14467)

This patch implements the groups and offsets expiration in the new group coordinator.

Reviewers: Ritika Reddy <rreddy@confluent.io>, David Jacot <djacot@confluent.io>
19 changed files
1,063 additions
64 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Various Scala cleanups in core (#14558)
    

Reviewers: Ismael Juma <ismael@juma.me.uk>
25 changed files
70 additions
95 deletions
DATE:Oct 17, 2023
-----------

KAFKA-15569: test and add test cases in IQv2StoreIntegrationTest (#14523

)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
576 additions
75 deletions
DATE:Oct 17, 2023
-----------

      MINOR: Only commit running active and standby tasks when tasks corrup…
    
…ted (#14508)

When tasks are found corrupted, Kafka Streams tries to commit
the non-corrupted tasks before closing and reviving the corrupted
active tasks. Besides active running tasks, Kafka Streams tries
to commit restoring active tasks and standby tasks. However,
restoring active tasks do not need to be committed since they
do not have offsets to commit and the current code does not
write a checkpoint. Furthermore, trying to commit restoring
active tasks with the state updater enabled results in the
following error:

java.lang.UnsupportedOperationException: This task is read-only
at org.apache.kafka.streams.processor.internals.ReadOnlyTask.commitNeeded(ReadOnlyTask.java:209)
...

since commitNeeded() is not a read-only method for active tasks.

In future, we can consider writing a checkpoint for active
restoring tasks in this situation. Additionally, we should
fix commitNeeded() in active tasks to be read-only.

Reviewers: Matthias J. Sax <matthias@confluent.io>, Lucas Brutschy <lbrutschy@confluent.io>
4 changed files
57 additions
5 deletions
DATE:Oct 12, 2023
-----------

      MINOR: Add javadoc to all ConfigDef.Types values (#14515)
    

Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
55 additions
3 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15221; Fix the race between fetch requests from a rebooted foll…
    
…ower. (#14053)

A race can happen in the following sequence.
1. Stale Fetch triggers the ISR expansion.
2. The first time we check whether the replica is eligible. Catch up? Yes. broker epoch match? Yes (the metadata cache update has not happened)
3. Metadata cache update happens.
4. During the second time check the eligibility
    a. Catch up? Yes
    b. A new fetch request comes in. It cancels the replica caught-up and updates the broker epoch
    c. broker epoch match? Yes. New fetch epoch = new metadata cache epoch
5. Send an AlterPartition request with the new broker epoch.
----------------
The solution is to make sure that the 4.a) ,4.c) and 5) use the same replica state.

Reviewers: David Mao <47232755+splett2@users.noreply.github.com>, David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
175 additions
31 deletions
DATE:Oct 11, 2023
-----------

      MINOR: Fix KafkaStreams#streamThreadLeaveConsumerGroup logging (#14526)
    
Fixes logging for KafkaStreams#streamThreadLeaveConsumerGroup.

In order not to lose the trace of the whole exception, passing Exception e as a second argument, while message is pre-formatted and passed as string as a first argument. With this, we won't loose the stack trace of the exception.

Reviewers: Anna Sophie Blee-Goldman <sophie@responsive.dev>
1 changed file
3 additions
3 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15593: Add 3.6 to core upgrade and compatibility tests (#14527)
    
Reviewers:  Christo Lolov <lolovc@amazon.com>, Josep Prat <josep.prat@aiven.io>
5 changed files
18 additions
6 deletions
DATE:Oct 13, 2023
-----------

      MINOR: fix dependencycheck warnings (#14476)
    
Add suppressions and skip benchmarking/testing projects

Reviewers: Josep Prat <josep.prat@aiven.io>
3 changed files
34 additions
0 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15492: Upgrade and enable spotbugs when building with Java 21 (#…

…14533)

Spotbugs was temporarily disabled as part of KAFKA-15485 to support Kafka build with JDK 21. This PR upgrades the spotbugs version to 4.8.0 which adds support for JDK 21 and enables it's usage on build again.

Reviewers: Divij Vaidya <diviv@amazon.com>
12 changed files
67 additions
26 deletions
DATE:Oct 12, 2023
-----------

KAFKA-15532: non active controllers return 0 for ZkWriteBeforelag (#1…

…4478)

Since only the active controller is performing the dual-write to ZK during a migration, it should be the only controller
to report the ZkWriteBehindLag metric.

Currently, if the controller fails over during a migration, the previous active controller will incorrectly report its last
value for ZkWriteBehindLag forever. Instead, it should report zero.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, David Arthur <mumrah@gmail.com>
2 changed files
18 additions
2 deletions
DATE:Oct 16, 2023
-----------

      MINOR: Fix directory name inconsistency in the Kafka Streams tutorial (…

…#14541)

Reviewers: Bruno Cadonna <bruno@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Oct 13, 2023
-----------

KAFKA-15537: Fix metadata downgrade documentation (#14484)
    
In KIP-778 we introduced the "unsafe" (lossy) downgrade in case metadata has changes in one of the versions between target and current, as defined in MetadataVersion.

The documentation says it is possible:

"Note that the cluster metadata version cannot be downgraded to a pre-production 3.0.x, 3.1.x, or 3.2.x version once it has been upgraded. However, it is possible to downgrade to production versions such as 3.3-IV0, 3.3-IV1, etc."

The command line tool shows that this doesn't work:

bin/kafka-features.sh --bootstrap-server :9092 downgrade --metadata 3.4 --unsafe
Could not downgrade metadata.version to 8. Invalid metadata.version 8. Unsafe metadata downgrade is not supported in this version.
1 out of 1 operation(s) failed.

In addition to unsafe, also safe metadata downgrades are not supported in practice. For example, when you upgrade to 3.5, you land on 3.5-IV2 as metadata version, which has metadata changes and won't let you to downgrade. This is true for every other release at the moment.

This change fixes the documentation to reflect that, and improves the error messages.

Signed-off-by: Federico Valeri <fedevaleri@gmail.com>

Reviewers: Luke Chen <showuon@gmail.com>, Jakub Scholz <github@scholzj.com>
4 changed files
17 additions
11 deletions
DATE:Oct 12, 2023
-----------

KAFKA-14133: Move MeteredTimestampedKeyValueStoreTest, ReadOnlyWindow…
    
…StoreFacadeTest and TimestampedWindowStoreBuilderTest to Mockito (#14412)

Reviewers: Divij Vaidya <diviv@amazon.com>, Yash Mayya <yash.mayya@gmail.com>
3 changed files
103 additions
200 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15498: upgrade to snappy 1.1.10.5 (#14458)
    
Release notes - https://github.com/xerial/snappy-java/releases/tag/v1.1.10.5

This release contains adds support for Windows ARM and fixes some dependencies associated with Linux ppc64. 

Reviewers: Josep Prat <josep.prat@aiven.io>
2 changed files
2 additions
2 deletions
DATE:Oct 2, 2023
-----------

KAFKA-15521: Refactor build.gradle to align gradle swagger plugin wit…
    
…h swagger dependencies (#14473)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
3 changed files
6 additions
6 deletions
DATE:Oct 9, 2023
-----------

KAFKA-15526: Simplify the LogAppendInfo class (#14470)
    
The LogAppendInfo class is a bit bloated in terms of class fields. That's because it is used as an umbrella class for both leader log appends and follower log appends and needs to carry fields for both. This makes the constructor for the class a bit cludgy to use. It also ends up being a bit confusing when fields are important and when they aren't. I noticed there were a few fields that didn't seem necessary.

Below is a description of changes:

firstOffset is a LogOffsetMetadata but there are no readers of the field that use anything but the messageOffset field - simplified to a long.
LogAppendInfo.errorMessage is only set in one context - when calling LogAppendInfo.unknownLogAppendInfoWithAdditionalInfo. When we use this constructor, we pass up the original exception in LogAppendResult anyway, so the field is redundant with the LogAppendResult.exception field. This allows us to simplify the handling in KAFKA-15459: Convert coordinator retriable errors to a known producer response error #14378 since there are no custom error messages we just return whatever is in the exception message.
We only use targetCompressionType when constructing the LogValidator - just inline the call instead of including it in the LogAppendInfo.
offsetsMonotonic is only used when not assigning offsets to throw an exception - just throw the exception instead of setting a field to throw later.
shallowCount is only there to determine whether there are any messages in the append. Instead, we can just check validBytes which is incremented with a non-zero value every time we increment shallowCount.

Reviewers: Justine Olshan <jolshan@confluent.io>
12 changed files
127 additions
190 deletions
DATE:Oct 4, 2023
-----------

KAFKA-15356: Generate and persist directory IDs (#14291)
    
Reviewers: Proven Provenzano <pprovenzano@confluent.io>, Ron Dagostino <rdagostino@confluent.io>
11 changed files
178 additions
36 deletions
DATE:Oct 6, 2023
-----------

      MINOR: Remove the client side assignor from the ConsumerGroupHeartbea…
    
…t API (#14469)

As a first step, we plan to release a preview of the new consumer group rebalance protocol without the client side assignor. This patch removes all the related fields from the ConsumerGroupHeartbeat API for now. Removing fields is fine here because this API is not released yet and not exposed by default. We will add them back while bumping the version of the request when we release this part in the future.

Reviewers: Justine Olshan <jolshan@confluent.io>
8 changed files
35 additions
119 deletions
DATE:Oct 2, 2023
-----------

      MINOR: Fix build failure in genConnectOpenAPIDocs (#14464)
    

Reviewers: Yash Mayya <yash.mayya@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Sep 29, 2023
-----------

KAFKA-15326: [9/N] Start and stop executors and cornercases (#14281)
    
* Implements start and stop of task executors
* Introduce flush operation to keep consumer operations out of the processing threads
* Fixes corner case: handle requested unassignment during shutdown
* Fixes corner case: handle race between voluntary unassignment and requested unassigment
* Fixes corner case: task locking future completes for the empty set
* Fixes corner case: we should not reassign a task with an uncaught exception to a task executor
* Improved logging
* Number of threads controlled from outside, of the TaskManager

Reviewers: Bruno Cadonna <bruno@confluent.io>
9 changed files
313 additions
66 deletions
DATE:Oct 2, 2023
-----------

KAFKA-15483: Add KIP-938 and KIP-866 metrics to bundled docs (#14421)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Ron Dagostino <rdagostino@confluent.io>
1 changed file
60 additions
0 deletions
DATE:Oct 3, 2023
-----------

      MINOR: Upgrade zstd-jni to 1.5.5-6 (#14449)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
2 additions
2 deletions
DATE:Oct 3, 2023
-----------

KAFKA-14506: Implement DeleteGroups API and OffsetDelete API (#14408)
    
This patch implements DeleteGroups and OffsetDelete API in the new group coordinator.

Reviewers: yangy0000, Ritika Reddy <rreddy@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, David Jacot <djacot@confluent.io>
16 changed files
1,201 additions
61 deletions
DATE:Oct 4, 2023
-----------

      MINOR: Update the list of collaborators (#14486)
    
Reviewers: Mickael Maison <mickael.maison@gmail.com>, Josep Prat <josep.prat@aiven.io>
1 changed file
14 additions
14 deletions
DATE:Oct 4, 2023
-----------

KAFKA-15552 Fix Producer ID ZK migration (#14506)
    
This patch fixes a problem where we migrate the current producer ID batch to KRaft instead of the next producer ID batch. Since KRaft stores the next batch in the log, we end up serving up a duplicate batch to the first caller of AllocateProducerIds once the KRaft controller has taken over.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
56 additions
49 deletions
DATE:Oct 6, 2023
-----------

KAFKA-14595 ReassignPartitionsIntegrationTest rewritten in java (#14456)
    
This PR is part of #13247
It contains ReassignPartitionsIntegrationTest rewritten in java.
Goal of PR is reduce changes size in main PR.

Reviewers: Taras Ledkov  <tledkov@apache.org>, Justine Olshan <jolshan@confluent.io>
7 changed files
939 additions
741 deletions
DATE:Oct 2, 2023
-----------

      MINOR: Add LEAVE_GROUP_EPOCH to GroupMetadataManager (#14463)
    
Replacing the use a hardcoded -1 with a constant (`LEAVE_GROUP_EPOCH`) that provides more clarity. Since static members also have a magic number (-2), this will motivate future commits to use constants instead of hardcoded values.

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, David Jacot <djacot@confluent.io>
3 changed files
18 additions
12 deletions
DATE:Oct 4, 2023
-----------

KAFKA-15330: Add missing documentation of metrics introduced as part of 
    
KAFKA-15028 (#14480)

I've added details for VerificationFailureRate and VerificationTimeMs.

I considered adding the documentation for the AddPartitionsToTxnVerification metrics, but I noticed that all the request metrics simply listed Produce|FetchConsumer|FetchFollower. If we don't already report the AddPartitionsToTxn request metrics in this file, it doesn't make sense to add the verification variant. (As well as all the other APIs we report)

Filed a followup jira if we want to redo that whole section.

Reviewers: Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
10 additions
0 deletions
DATE:Oct 4, 2023
-----------

KAFKA-14593: Move LeaderElectionCommand to tools (#13204)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
10 changed files
770 additions
662 deletions
DATE:Oct 3, 2023
-----------

KAFKA-10199: Enable state updater by default (#13927)
    
Now that the implementation for the state updater is done, we can enable it by default.

This PR enables the state updater by default and fixes code that made assumptions that are not true when the state updater is enabled (mainly tests).

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>, Walker Carlson <wcarlson@confluent.io>
18 changed files
356 additions
157 deletions
DATE:Oct 4, 2023
-----------

KAFKA-15507: Make AdminClient throw non-retriable exception for a new…
    
… call while closing (#14455)

AdminClient will throw IllegalStateException instead of TimeoutException if it receives new calls while closing down. This is more consistent with how Consumer and Producer clients handle new calls after closed down.

Reviewers: Luke Chen <showuon@gmail.com>, Kirk True <kirk@kirktrue.pro>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, vamossagar12 <sagarmeansocean@gmail.com>
3 changed files
16 additions
5 deletions
DATE:Oct 11, 2023
-----------

KAFKA-15415: On producer-batch retry, skip-backoff on a new leader (#…

…14384)

When producer-batch is being retried, new-leader is known for the partition Vs the leader used in last attempt, then it is worthwhile to retry immediately to this new leader. A partition-leader is considered to be newer, if the epoch has advanced.

Reviewers: Walker Carlson <wcarlson@apache.org>, Kirk True <kirk@kirktrue.pro>, Andrew Schofield <andrew_schofield@uk.ibm.com
8 changed files
603 additions
107 deletions
DATE:Oct 5, 2023
-----------

      HOTIFX: fix Kafka versions for system tests (#14490)
    
Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
14 additions
13 deletions
DATE:Oct 5, 2023
-----------

KAFKA-14504: Implement DescribeGroups API (#14462)
    
This patch implements DescribeGroups API in the new group coordinator.

Reviewers: David Jacot <djacot@confluent.io>
9 changed files
524 additions
4 deletions
DATE:Oct 6, 2023
-----------

KAFKA-15547: Fix thread leak in MirrorMakerConfigTest (#14487)
    
Reviewers: Akhilesh Chaganti <akhileshchg@users.noreply.github.com>, Rajini Sivaram <rajinisivaram@googlemail.com>, Yash Mayya <yash.mayya@gmail.com>
1 changed file
8 additions
4 deletions
DATE:Oct 5, 2023
-----------

      MINOR Added 3.6.0 to system tests (#14488)
    
Reviewers: Luke Chen <showuon@gmail.com>
3 changed files
6 additions
1 deletion
DATE:Oct 7, 2023
-----------

      MINOR: Correcting Javadocs for throwIfMemberEpochIsInvalid (#14468)
    
The Javadoc for `GroupMetadataManager#throwIfMemberEpochIsInvalid` suggests that it throws a `NotCoordinatorException` exception when the member epoch in the consumer heartbeat request is greater than the one known by this coordinator for the given member. This could happen if the heartbeat-ing member got a higher epoch from another coordinator. However the method throws `FencedMemberEpochException` even in this case. This PR corrects the Javadocs to reflect the same.

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
1 addition
5 deletions
DATE:Oct 2, 2023
-----------

KAFKA-15278: Implement HeartbeatRequestManager to handle heartbeat re…
    
…quests (#14364)

HeartbeatRequestManager is responsible for handling the ConsumerGroupHeartbeat request and response.  The manager has the following responsibilities:
1. Sending the request to the GroupCoordinator when it is possible and necessary
2. Handling the response and update the `MembershipManagerImpl` based on the error/response it receives.
3. Handles request retries and fatal failures

For Successful heartbeat response:
- Updates the MembershipManager

For Failures handling:
- Retriables Errors: backoff and retries
- Fenced: Transition to a fenced state and reset the epoch, and retry in the next poll
- Fatal: Propagate the error to the user and fail the state machine

Reviewers: Kirk True <ktrue@confluent.io>, Lianet Magrans <lianetmr@gmail.com>, David Jacot <djacot@confluent.io>
12 changed files
985 additions
129 deletions
DATE:Oct 9, 2023
-----------

      MINOR: Logging fix in StreamsPartitionAssignor (#14435)
    
Fix broken log message

Reviewer: A. Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
1 addition
1 deletion
DATE:Oct 2, 2023
-----------

      MINOR: KRaft support for Integration Tests (#14295)
    
Enable kraft mode for some producer/fetcher tests.
8 changed files
166 additions
115 deletions
DATE:Oct 9, 2023
-----------

KAFKA-15500: Fix condition in SslPrincipalMapper.java (#14441)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Sep 29, 2023
-----------

KAFKA-14927: Add validation to be config keys in ConfigCommand tool (#…

…14514)

Added validation in ConfigCommand tool, only allow characters
'([a-z][A-Z][0-9][._-])*' for config keys.

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
29 additions
4 deletions
DATE:Oct 10, 2023
-----------

KAFKA-15169: Added TestCase in RemoteIndexCache (#14482)
    
est Cases Covered

    1. Index Files already exist on disk but not in Cache i.e. RemoteIndexCache should not call remoteStorageManager to fetch it instead cache it from the local index file present.
    2. RSM returns CorruptedIndex File i.e. RemoteIndexCache should throw CorruptedIndexException instead of successfull execution.
    3. Deleted Suffix Indexes file already present on disk i.e. If cleaner thread is slow , then there is a chance of deleted index files present on the disk while in parallel same index Entry is invalidated. To understand more refer https://issues.apache.org/jira/browse/KAFKA-15169

Reviewers: Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>
2 changed files
260 additions
19 deletions
DATE:Oct 11, 2023
-----------

      MINOR: only log error when rack aware assignment is enabled (#14415)
    
Reviewers:  Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
1 changed file
8 additions
3 deletions
DATE:Sep 29, 2023
-----------

      MINOR: suppress dependencycheck warning for CVE-2023-35116 (#14460)
    
Like in most projects, this attack cannot be achieved by an external
attacker in Kafka.

Reviewers: Josep Prat <josep.prat@aiven.io>
2 changed files
29 additions
0 deletions
DATE:Oct 2, 2023
-----------

KAFKA-14912:Add a dynamic config for remote index cache size (#14381)
    
Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Divij Vaidya <diviv@amazon.com>, Subhrodip Mohanta <hello@subho.xyz>
6 changed files
228 additions
43 deletions
DATE:Oct 8, 2023
-----------

KAFKA-15449: Verify transactional offset commits (KIP-890 part 1) (#1…

…4370)

Previous commits left out TxnOffsetCommits which go through the group coordinator (not directly from the producer).

I've wired up the methods to include the transactional id and state partition to do the verification.

I've also updated UnifiedLog to verify on client and coordinator requests that are transactional.
I've not updated any sequence check logic since the sequence is always 0 on group coordinator initiated writes.

Added returned errors to Response files. Both InvalidPidMapping and InvalidTxnState will be returned and be fatal for the transactional OffsetCommit requests.

Reviewers:  David Jacot <david.jacot@gmail.com>,  Artem Livshits <alivshits@confluent.io>
13 changed files
120 additions
30 deletions
DATE:Oct 2, 2023
-----------

      MINOR: Fix dependency issue in tools module (#14475)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Oct 3, 2023
-----------

KAFKA-15479: Remote log segments should be considered once for retent…
    
…ion breach (#14407)

When a remote log segment contains multiple epoch, then it gets considered for multiple times during breach by retention size/time/start-offset. This will affect the deletion by remote log retention size as it deletes the number of segments less than expected. This is a follow-up of KAFKA-15352

Reviewers: Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>, Satish Duggana <satishd@apache.org>
2 changed files
250 additions
207 deletions
DATE:Sep 25, 2023
-----------

KAFKA-15511: Handle CorruptIndexException in RemoteIndexCache (#14459)
    
A bug in the RemoteIndexCache leads to a situation where the cache does not replace the corrupted index with a new index instance fetched from remote storage. This commit fixes the bug by adding correct handling for `CorruptIndexException`.

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, Alexandre Dupriez <duprie@amazon.com>
2 changed files
28 additions
3 deletions
DATE:Sep 29, 2023
-----------

      MINOR: Upgrade gradle, plugins and test libraries (#14431)
    
To prepare Java 21 support, upgrade gradle, its plugins and test libraries.
Release notes for major and minor updates included below.

The highlight is faster Java compilation by not shutting down the daemon at the end of the build.
Gradle's internal performance tests show up to a 30% build time improvement for builds that are
dominated by compiling Java sources.

Mockito turns out to be a complex case where we use one of 3 different versions depending on
the Scala and Java versions used. In addition, the default mocking strategy changed from `subclass`
to `inline` in Mockito 5.0. We now use `inline` across the board (we previously used both `subclass`
and `inline`). See comments in the relevant parts of the code for more details.

* Gradle 8.3 release notes: https://docs.gradle.org/8.3/release-notes.html
* jmh 1.37: virtual thread support and various bug fixes
* JUnit 5.10.0 release notes: https://junit.org/junit5/docs/5.10.0/release-notes/index.html
* Mockito 5.x release notes:
  * https://github.com/mockito/mockito/releases/tag/v5.0.0
  * https://github.com/mockito/mockito/releases/tag/v5.1.0
  * https://github.com/mockito/mockito/releases/tag/v5.2.0
  * https://github.com/mockito/mockito/releases/tag/v5.3.0
  * https://github.com/mockito/mockito/releases/tag/v5.4.0
  * https://github.com/mockito/mockito/releases/tag/v5.5.0
* EasyMock 5.2.0 release notes: https://github.com/easymock/easymock/releases/tag/easymock-5.2.0

Reviewers: Divij Vaidya <diviv@amazon.com>
4 changed files
41 additions
27 deletions
DATE:Sep 24, 2023
-----------

KAFKA-15248 (KIP-959): Add BooleanConverter to Kafka Connect (#14093)
    
Reviewers: Yash Mayya <yash.mayya@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>, Qichao Chu <5326144+ex172000@users.noreply.github.com>
5 changed files
265 additions
0 deletions
DATE:Sep 26, 2023
-----------

      MINOR: fix kraft upgrade system test (#14424)
    
We should use DEV_BRANCH instead of DEV_VERSION in this case, otherwise, error will be thrown:

RunnerClient: kafkatest.tests.core.kraft_upgrade_test.TestKRaftUpgrade.test_isolated_mode_upgrade.from_kafka_version=3.6.0-SNAPSHOT.metadata_quorum=ISOLATED_KRAFT: FAIL: RemoteCommandError({'ssh_config': {'host': 'ducker10', 'hostname': 'ducker10', 'user': 'ducker', 'port': 22, 'password': '', 'identityfile': '/home/ducker/.ssh/id_rsa', 'connecttimeout': None}, 'hostname': 'ducker10', 'ssh_hostname': 'ducker10', 'user': 'ducker', 'externally_routable_ip': 'ducker10', '_logger': <Logger kafkatest.tests.core.kraft_upgrade_test.TestKRaftUpgrade.test_isolated_mode_upgrade.from_kafka_version=3.6.0-SNAPSHOT.metadata_quorum=ISOLATED_KRAFT-2 (DEBUG)>, 'os': 'linux', '_ssh_client': <paramiko.client.SSHClient object at 0xffffb35d5820>, '_sftp_client': <paramiko.sftp_client.SFTPClient object at 0xffffb35f8ca0>, '_custom_ssh_exception_checks': None}, '/opt/kafka-3.6.0-SNAPSHOT/bin/kafka-storage.sh format --ignore-formatted --config /mnt/kafka/kafka.properties --cluster-id I2eXt9rvSnyhct8BYmW6-w', 127, b'bash: line 1: /opt/kafka-3.6.0-SNAPSHOT/bin/kafka-storage.sh: No such file or directory\n')

Reviewers: Satish Duggana <satishd@apache.org>
1 changed file
3 additions
3 deletions
DATE:Sep 23, 2023
-----------

KAFKA-14133: Move MeteredSessionStoreTest, MeteredWindowStoreTest and…
    
… ReadOnlyKeyValueStoreFacadeTest to Mockito (#14404)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
146 additions
240 deletions
DATE:Sep 22, 2023
-----------

      Upgrade Jetty to 9.4.52.v20230823 (#14438)
    
Reviewers: Viktor Somogyi-Vass <viktorsomogyi@gmail.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
11 additions
11 deletions
DATE:Sep 25, 2023
-----------

KAFKA-15510: Fix follower's lastFetchedEpoch when fetch response has … (
    
#14457)

When a fetch response has no record for a partition, validBytes is 0. We shouldn't set the last fetched epoch to logAppendInfo.lastLeaderEpoch.asScala since there is no record and it is Optional.empty. We should use currentFetchState.lastFetchedEpoch instead.

Reviewers: Divij Vaidya <diviv@amazon.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Rajini Sivaram <rajinisivaram@googlemail.com>
2 changed files
6 additions
3 deletions
DATE:Sep 28, 2023
-----------

KAFKA-15502: Update SslEngineValidator to handle large stores (#14445)
    
We have observed an issue where inter broker SSL listener is not coming up when running with TLSv3/JDK 17 .
SSL debug logs shows that TLSv3 post handshake messages >16K are not getting read and causing SslEngineValidator process to stuck while validating the provided trust/key store.

- Right now, WRAP returns if there is already data in the buffer. But if we need more data to be wrapped for UNWRAP to succeed, we end up looping forever. To fix this, now we always attempt WRAP and only return early on BUFFER_OVERFLOW.
- Update SslEngineValidator to unwrap post-handshake messages from peer when local handshake status is FINISHED.

Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>
3 changed files
141 additions
29 deletions
DATE:Sep 26, 2023
-----------

      MINOR: Revert log level changes in LogCaptureAppender (#14436)
    
LogCaptureAppender sets the log level in various tests to check if a certain log message is produced. The log level is however never reverted, changing the log level across the board and introducing flakiness due to non-determinism since the log level depends on execution order. Some log messages change the timing inside tests significantly.

Reviewer: Bruno Cadonna <cadonna@apache.org>
9 changed files
39 additions
19 deletions
DATE:Sep 26, 2023
-----------

KAFKA-10199: Add missing catch for lock exception (#14403)
    
The state directory throws a lock exception during initialization if a task state directory is still locked by the stream thread that previously owned the task. When this happens, Streams catches the lock exception, ignores the exception, and tries to initialize the task in the next exception.

In the state updater code path, we missed catching the lock exception when Streams recycles a task. That leads to the lock exception thrown to the exception handler, which is unexpected and leads to test failures.

Reviewer: Lucas Brutschy <lbrutschy@confluent.io>
2 changed files
56 additions
12 deletions
DATE:Sep 26, 2023
-----------

      MINOR: improve info log for memberIDRequired exception (#14192)
    
Currently, when consumer startup, there will be a log message said:

[2023-08-11 15:47:17,713] INFO [Consumer clientId=console-consumer, groupId=console-consumer-28605] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException) (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)

It confused users and make them think there's something wrong in the consumer application. Since we already log need to re-join with the given member-id logs in the joinGroupResponseHandler and already requestRejoined. So, we can skip this confusion logs.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Paolo Patierno <ppatiern@redhat.com>, vamossagar12 <sagarmeansocean@gmail.com>, David Jacot <djacot@confluent.io>
1 changed file
4 additions
1 deletion
DATE:Sep 29, 2023
-----------

      [KAFKA-15117] In TestSslUtils set SubjectAlternativeNames to null if …
    
…there are no hostnames (#14440)

We are currently encoding an empty hostNames array to subjectAltName in the keystore. While parsing the certificates in the test this causes the issue - Unparseable SubjectAlternativeName extension due to java.io.IOException: No data available in passed DER encoded value. Up to Java 17, this parsing error was ignored. This PR assigns subjectAltName to null if hostnames are empty.

Co-authored-by: Ismael Juma <ismael@juma.me.uk>
Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>
2 changed files
8 additions
7 deletions
DATE:Sep 25, 2023
-----------

      MINOR: Move TopicIdPartition class to server-common (#14418)
    
This patch moves the TopicIdPartition from the metadata module to the server-common module so it can be used by the group-coordinator module as well.

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, David Jacot <djacot@confluent.io>
6 changed files
18 additions
4 deletions
DATE:Sep 28, 2023
-----------

KAFKA-15466: Add KIP-919 support for some admin APIs (#14399)
    
Add support for --bootstrap-controller in the following command-line tools:
    - kafka-cluster.sh
    - kafka-configs.sh
    - kafka-features.sh
    - kafka-metadata-quorum.sh

To implement this, the following AdminClient APIs now support the new bootstrap.controllers
configuration:
    - Admin.alterConfigs
    - Admin.describeCluster
    - Admin.describeConfigs
    - Admin.describeFeatures
    - Admin.describeMetadataQuorum
    - Admin.incrementalAlterConfigs
    - Admin.updateFeatures

Command-line tool changes:
    - Add CommandLineUtils.initializeBootstrapProperties to handle parsing --bootstrap-controller
      in addition to --bootstrap-server.
    - Add --bootstrap-controller to ConfigCommand.scala, ClusterTool.java, FeatureCommand.java, and
      MetadataQuorumCommand.java.

KafkaAdminClient changes:
    - Add the AdminBootstrapAddresses class to handle extracting bootstrap.servers or
      bootstrap.controllers from the config map for KafkaAdminClient.
    - In AdminMetadataManager, store the new usingBootstrapControllers boolean. Generalize
      authException to encompass the concept of fatal exceptions in general. (For example, the
      fatal exception where we talked to the wrong node type.) Treat
      MismatchedEndpointTypeException and UnsupportedEndpointTypeException as fatal exceptions.
    - Extend NodeProvider to include information about whether bootstrap.controllers is supported.
    - Modify the APIs described above to support bootstrap.controllers.

Server-side changes:
    - Support DescribeConfigsRequest on kcontrollers.
    - Add KRaftMetadataCache to the kcontroller to simplify implemeting describeConfigs (and
      probably more APIs in the future). It's mainly a wrapper around MetadataImage, so there is
      essentially no extra resource consumption.
    - Split RuntimeLoggerManager out of ConfigAdminManager to handle the incrementalAlterConfigs
      support for BROKER_LOGGER. This is now supported on kcontrollers as well as brokers.
    - Fix bug in AuthHelper.computeDescribeClusterResponse that resulted in us always sending back
      BROKER as the endpoint type, even on the kcontroller.

Miscellaneous:
    - Fix a few places in exceptions and log messages where we wrote "broker" instead of "node".
      For example, an exception in NodeApiVersions.java, and a log message in NetworkClient.java.
    - Fix the slf4j log prefix used by KafkaRequestHandler logging so that request handlers on a
      controller don't look like they're on a broker.
    - Make the FinalizedVersionRange constructor public for the sake of a junit test.
    - Add unit and integration tests for the above.

Reviewers: David Arthur <mumrah@gmail.com>, Doguscan Namal <namal.doguscan@gmail.com>
44 changed files
1,604 additions
365 deletions
DATE:Sep 26, 2023
-----------

KAFKA-10199: Fix restoration behavior for paused tasks (#14437)
    
State updater can get into a busy loop when all tasks are paused, because changelogReader will never return that all changelogs have been read completely. Fix this, by awaiting if updatingTasks is empty.

Related and included: if we are restoring and all tasks are paused, we should return immediately from StoreChangelogReader.

Reviewer: Bruno Cadonna <cadonna@apache.org>
3 changed files
42 additions
6 deletions
DATE:Sep 26, 2023
-----------

KAFKA-15326: [8/N] Move consumer interaction out of processing methods (
    
#14226)

The process method inside the tasks needs to be called from within
the processing threads. However, it currently interacts with the
consumer in two ways:

* It resumes processing when the PartitionGroup buffers are empty
* It fetches the lag from the consumer

We introduce updateLags() and 
resumePollingForPartitionsWithAvailableSpace() methods that call into
the task from the polling thread, in order to set up the consumer
correctly for the next poll, and extract metadata from the consumer
after the poll.

Reviewer: Bruno Cadonna <bruno@confluent.io>
14 changed files
306 additions
14 deletions
DATE:Sep 26, 2023
-----------

      MINOR: Update to Scala 2.13.12 (#14430)
    
It offers a quickfix action for certain errors, includes a number of bug fixes and it
introduces a new warning by default (scala/scala#10462).

In addition to the scala version bump, we also fix the new compiler warnings and
bump the scalafmt version (the previous version failed with the new scala version).

Release notes: https://github.com/scala/scala/releases/tag/v2.13.12

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
12 changed files
25 additions
26 deletions
DATE:Sep 24, 2023
-----------

KAFKA-14595 ReassignPartitionsUnitTest rewritten in java (#14355)
    
This PR is part of #13247
It contains changes to rewrite single test in java.
Intention is reduce changes in parent PR.

Reviewers: Luke Chen <showuon@gmail.com>, Taras Ledkov <tledkov@apache.org>
4 changed files
799 additions
678 deletions
DATE:Sep 23, 2023
-----------

      MINOR: Add additional tests for RemoteLogManager (#14311)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
156 additions
2 deletions
DATE:Sep 21, 2023
-----------

KAFKA-10199: Do not process when in PARTITIONS_REVOKED (#14265)
    
When a Streams application is subscribed with a pattern to
input topics and an input topic is deleted, the stream thread
transists to PARTITIONS_REVOKED and a rebalance is triggered.
This happens inside the poll call. Sometimes, the poll call
returns before a new assignment is received. That means, Streams
executes the poll loop in state PARTITIONS_REVOKED.

With the state updater enabled processing is also executed in states
other than RUNNING and so processing is also executed when the
stream thread is in state PARTITION_REVOKED. However, that triggers
an IllegalStateException with error message:
No current assignment for partition TEST-TOPIC-A-0
which is a fatal error.

This commit prevents processing when the stream thread is in state
PARTITIONS_REVOKED.

Reviewer: Lucas Brutschy <lbrutschy@confluent.io>
2 changed files
96 additions
1 deletion
DATE:Sep 26, 2023
-----------

      MINOR: Used Admin instead of AdminClient to create Admin (#14411)
    
 Used Admin instead of AdminClient to create Admin

Reviewers: Ziming Deng <dengziming1993@gmail.com>
3 changed files
10 additions
11 deletions
DATE:Sep 21, 2023
-----------

      MINOR: Fixing typo with CoordinatorRuntime Javadoc (#14461)
    
Reviewers: David Jacot <djacot@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Sep 28, 2023
-----------

KAFKA-15485: Support Java 21 (3/3) (#14433)
    
* Update CI to build with Java 21 instead of Java 20
* Disable spotbugs when building with Java 21 as it doesn't support it yet (filed KAFKA-15492 for
   addressing this)
* Disable SslTransportLayerTest.testValidEndpointIdentificationCN with Java 21 (same as Java 20)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
16 additions
10 deletions
DATE:Sep 25, 2023
-----------

KAFKA-10199: Do not unlock state directories of tasks in state updater (
    
#14442)

When Streams completes a rebalance, it unlocks state directories
all unassigned tasks. Unfortunately, when the state updater is enabled,
Streams does not look into the state updater to determine the
unassigned tasks.
This commit corrects this by adding the check.

Reviewer: Lucas Brutschy <lbrutschy@confluent.io>
2 changed files
44 additions
1 deletion
DATE:Sep 27, 2023
-----------

      MINOR: Close UnifiedLog created in tests to avoid resource leak (#14453)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>
4 changed files
17 additions
7 deletions
DATE:Sep 29, 2023
-----------

KAFKA-14960: TopicMetadata request manager (#14386)
    
TopicMetadataRequestManager is responsible for sending topic metadata requests. The manager manages API requests and build the request accordingly. All topic metadata requests are chained, if requesting the same topic, to avoid sending requests repeatedly.

Co-authored-by: Lianet Magrans <lmagrans@confluent.io>
Co-authored-by: Kirk True <kirk@kirktrue.pro>

Reviewers: Kirk True <kirk@kirktrue.pro>, Lianet Magrans <lianetmr@gmail.com>, Jun Rao <junrao@gmail.com>
15 changed files
636 additions
93 deletions
DATE:Sep 21, 2023
-----------

      MINOR: Fix kafka-site formatting (#14419)
    
Reviewers: Satish Duggana <satishd@apache.org>, Josep Prat <jlprat@apache.org>
1 changed file
1 addition
1 deletion
DATE:Sep 21, 2023
-----------

KAFKA-15498: bump snappy-java version to 1.1.10.4 (#14434)
    
bump snappy-java version to 1.1.10.4, and add more tests to verify the compressed data can be correctly decompressed and read.

For LogCleanerParameterizedIntegrationTest, we increased the message size for snappy decompression since in the new version of snappy, the decompressed size is increasing compared with the previous version. But since the compression algorithm is not kafka's scope, all we need to do is to make sure the compressed data can be successfully decompressed and parsed/read.

Reviewers: Divij Vaidya <diviv@amazon.com>, Ismael Juma <ismael@juma.me.uk>, Josep Prat <josep.prat@aiven.io>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
4 changed files
58 additions
13 deletions
DATE:Sep 27, 2023
-----------

      MINOR: Replace Java 20 with Java 21 in README.md (#14451)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Yash Mayya <yash.mayya@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Sep 26, 2023
-----------

      MINOR: Push logic to resolve the transaction coordinator into the Add…
    
…PartitionsToTxnManager (#14402)

This patch refactors the ReplicaManager.appendRecords method and the AddPartitionsToTxnManager class in order to move the logic to identify the transaction coordinator based on the transaction id from the former to the latter. While working on KAFKA-14505, I found pretty annoying that we require to pass the transaction state partition to appendRecords because we have to do the same from the group coordinator. It seems preferable to delegate that job to the AddPartitionsToTxnManager.

Reviewers: Justine Olshan <jolshan@confluent.io>
15 changed files
465 additions
394 deletions
DATE:Sep 25, 2023
-----------

KAFKA-15485: Fix "this-escape" compiler warnings introduced by JDK 21…
    
… (1/N) (#14427)

This is one of the steps required for kafka to compile with Java 21.

For each case, one of the following fixes were applied:
1. Suppress warning if fixing would potentially result in an incompatible change (for public classes)
2. Add final to one or more methods so that the escape is not possible
3. Replace method calls with direct field access.

In addition, we also fix a couple of compiler warnings related to deprecated references in the `core` module.

See the following for more details regarding the new lint warning:
https://www.oracle.com/java/technologies/javase/21-relnote-issues.html#JDK-8015831

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>, Chris Egerton <chrise@aiven.io>
83 changed files
110 additions
49 deletions
DATE:Sep 24, 2023
-----------

      MINOR: Fix incorrect versions in ConsumerGroupDescribeResponse schema (…

…#14447)

This patch fixes the version of the `AuthorizedOperations` field. The schema is not used yet so the bug had no impact.

Reviewers: Kirk True <ktrue@confluent.io>, David Jacot <djacot@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Sep 28, 2023
-----------

KAFKA-15499: Fix the flaky DeleteSegmentsDueToLogStartOffsetBreach te…
    
…st (#14439)

DeleteSegmentsDueToLogStartOffsetBreach configures the segment such that it can hold at-most 2 record-batches. And, it asserts that the local-log-start-offset based on the assumption that each segment will contain exactly two messages.

During leader switch, the segment can get rotated and may not always contain two records. Previously, we were checking whether the expected local-log-start-offset is equal to the base-offset-of-the-first-local-log-segment. With this patch, we will scan the first local-log-segment for the expected offset.

Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
45 additions
17 deletions
DATE:Sep 28, 2023
-----------

      MINOR: Fix errors in javadoc and docs in tiered storage (#14379)
    
Reviewers: Satish Duggana <satishd@apache.org>
4 changed files
13 additions
10 deletions
DATE:Sep 13, 2023
-----------

KAFKA-14133: Move KeyValueIteratorFacadeTest, KeyValueSegmentTest and…
    
… MeteredKeyValueStoreTest to Mockito (#14396)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
63 additions
112 deletions
DATE:Sep 19, 2023
-----------

      MINOR: Add verification for (local) log start offset in txn tests (#1…

…4401)

In this PR, we noticed failed tests caused by the verification of log start offset and local log start offset. After investigation: #14347 (comment)

https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-14347/13/#showFailuresLink

After investigation, I found it's because the scala 2.12 cannot recognize the override method of maybeWaitForAtLeastOneSegmentUpload since it's using varargs in scala. I think there must be some bugs/gaps between java/scala that causes these issue. We can fix it by not using varargs, instead, using the Seq.

This PR adds back the log start offset and local log start offset verification, and make sure all tests passed.

Reviewers: Satish Duggana <satishd@apache.org>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
2 changed files
76 additions
6 deletions
DATE:Sep 19, 2023
-----------

KAFKA-15473: Hide duplicate plugins in /connector-plugins (#14398)
    
Reviewers: Yash Mayya <yash.mayya@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>, Hector Geraldino <hgeraldino@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
23 additions
6 deletions
DATE:Sep 19, 2023
-----------

      MINOR: Fix metadata.version reference in "ZooKeeper to KRaft Migratio…
    
…n" documentation (#14366)

In "ZooKeeper to KRaft Migration" documentation, we are still reporting 3.4 as metadata version. Reworking that phrase to make it more clear and avoid the need to update it in the future.

Signed-off-by: Federico Valeri <fedevaleri@gmail.com>

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
2 additions
1 deletion
DATE:Sep 12, 2023
-----------

KAFKA-15315: Use getOrDefault rather than get in TransactionState (#1…

…4167)

Reviewers: Ziming Deng dengziming1993@gmail.com.
1 changed file
1 addition
2 deletions
DATE:Sep 11, 2023
-----------

      MINOR: Removed the RSM and RLMM classpath config validator (#14358)
    
- RSM and RLMM classpath can be empty since it's optional so removed the non-empty string validator
- Fix getting the `localTieredStorage` by brokerId after stopping a broker.

Reviewers: Christo Lolov <lolovc@amazon.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
3 changed files
15 additions
4 deletions
DATE:Sep 9, 2023
-----------

KAFKA-14503: Implement ListGroups (#14271)
    
This patch implements the ListGroups API in the new group coordinator.

Reviewers: David Jacot <djacot@confluent.io>
10 changed files
365 additions
8 deletions
DATE:Sep 15, 2023
-----------

      MINOR: Fix format of allowed operations in kafka-acls error message (#…

…14395)

kafka-acls cli prints the following error message on invalid operation:

$ kafka-acls --bootstrap-server xxx:9095 --remove --allow-principal "User:abc" --allow-host * --operation DESCRIBE_CONFIGS --topic xyz
ResourceType TOPIC only supports operations WRITE,DESCRIBE,ALL,READ,CREATE,ALTER,DELETE,DESCRIBE_CONFIGS,ALTER_CONFIGS

The following command actually works:

$ kafka-acls --bootstrap-server xxx:9095 --remove --allow-principal "User:abc" --allow-host * --operation DescribeConfigs --topic xyz

This PR fixes the invalid formating of operations in the error message and adds a space after the comma.
1 changed file
1 addition
1 deletion
DATE:Sep 19, 2023
-----------

KAFKA-15442: add a section in doc for tiered storage (#14382)
    
Added 6.11: Tiered Storage section and notable changes ini v3.6.0

Reviewers: Satish Duggana <satishd@apache.org>, Gantigmaa Selenge <gselenge@redhat.com>
3 changed files
105 additions
0 deletions
DATE:Sep 14, 2023
-----------

KAFKA-15441 Allow broker heartbeats to complete in metadata transacti…
    
…on (#14351)

This patch allows broker heartbeat events to be completed while a metadata transaction is in-flight.

More generally, this patch allows any RUNS_IN_PREMIGRATION event to complete while the controller
is in pre-migration mode even if the migration transaction is in-flight.

We had a problem with broker heartbeats timing out because they could not be completed while a large
ZK migration transaction was in-flight. This resulted in the controller fencing all the ZK brokers which 
has many undesirable downstream effects. 

Reviewers: Akhilesh Chaganti <akhileshchg@users.noreply.github.com>, Colin Patrick McCabe <cmccabe@apache.org>
4 changed files
105 additions
31 deletions
DATE:Sep 8, 2023
-----------

KAFKA-14855: Harden integration testing logic for asserting that a co…
    
…nnector is deleted (#14371)

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Chris Egerton <chrise@aiven.io>
5 changed files
24 additions
30 deletions
DATE:Sep 19, 2023
-----------

KAFKA-15115 - KAFKA-15163; Reset/Validate positions implementation & …
    
…API integration (#14346)

Implementation of the required functionality for resetting and validating positions in the new async consumer.

This PR includes:
1. New async application events ResetPositionsApplicationEvent and ValidatePositionsApplicationEvent, both handled by the same OfffsetsRequestManager.
2. Integration of the reset/validate functionality in the new async consumer, to update fetch positions using the partitions offsets.
3. Minor refactoring to extract functionality that is reused from both consumer implementations (moving logic without changes from OffsetFetcher into OffsetFetchUtils, and from OffsetsForLeaderEpochClient into OffsetsForLeaderEpochUtils)

Reviewers: Philip Nee <pnee@confluent.io>, Kirk True <kirk@mustardgrain.com>, Jun Rao<junrao@gmail.com>
18 changed files
960 additions
209 deletions
DATE:Sep 13, 2023
-----------

KAFKA-14274 [2-5/7]: Introduction of more infrastructure for forthcom…
    
…ing fetch request manager (#14359)

This continues the work of providing the groundwork for the fetch
refactoring work by introducing some new classes and refactoring the
existing code to use the new classes where applicable.

Changes:

* Minor clean up of the events classes to make data immutable,
  private, and implement toString().
* Added IdempotentCloser which prevents a resource from being closed
  more than once. It's general enough that it could be used elsewhere
  in the project, but it's limited to the consumer internals for now.
* Split core Fetcher code into classes to buffer raw results
  (FetchBuffer) and to collect raw results into ConsumerRecords
  (FetchCollector). These can be tested and changed in isolation from
  the core fetcher logic.
* Added NodeStatusDetector which abstracts methods from
  ConsumerNetworkClient so that it and NetworkClientDelegate can be
  used in AbstractFetch via the interface instead of using
  ConsumerNetworkClient directly.

Reviewers: Jun Rao <junrao@gmail.com>
36 changed files
2,387 additions
692 deletions
DATE:Sep 16, 2023
-----------

KAFKA-15476: Resolves cache misses in checkstyle (#14344)
    
Resolves cache misses in checkstyle tasks due to absolute paths in configProperties.

Sets configDirectory extension property, which is made available by the checkstyle plugin as ${config_loc} in the checkstyle xml files, as shown in the Checkstyle Gradle docs. The absolute paths set in configProperties are then replaced by relative paths from configDirectory. Because the header and suppression config file names are static and only referenced once, these were removed from configProperties and the file names are given directly in checkstyle.xml

Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
5 additions
7 deletions
DATE:Sep 19, 2023
-----------

KAFKA-15450 Don't allow ZK migration with JBOD (#14367)
    
Reviewers: Ron Dagostino <rndgstn@gmail.com>
2 changed files
13 additions
0 deletions
DATE:Sep 12, 2023
-----------

      MINOR: Fix help message for kafka-metadata-shell (#13867)
    
Reviewers: Ziming Deng dengziming1993@gmail.com
1 changed file
2 additions
2 deletions
DATE:Sep 11, 2023
-----------

KAFKA-15273: Log common name of expired client certificates (#14130)
    
This contribution extends the TrustManager created by the DefaultSSLEngineFactory class with code that checks for any invalid certificate whether it is just expired but valid otherwise. If this is the case, it extracts the common name and logs it. Apart from that, the trust manager will behave exactly as the default one.

Extensive unit tests are included in this pull request for ensuring that the modified trust manager will behave exactly as the default one, except for logging expired certificates common name. The test code generates several certificate chains with valid, invalid and expired end certificates, root CAs and even intermediate CAs.

This contribution is my original work and I license the work to the project under the project's open source license.


Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Rajini Sivaram <rajinisivaram@googlemail.com>
9 changed files
1,229 additions
11 deletions
DATE:Sep 15, 2023
-----------

KAFKA-15458: Fully resolve endpoint information before registering co…
    
…ntrollers (#14376)

Endpoint information provided by KafkaConfig can be incomplete in two ways. One is that endpoints
using ephemeral ports will show up as using port 0. Another is that endpoints binding to 0.0.0.0
will show up with a null or blank hostname. Because we were not accounting for this in controller
registration, it was leading to a null pointer dereference when we tried to register a controller
using an endpoint defined as PLAINTEXT://:9092.

This PR adds a ListenerInfo class which can fix both of the causes of incomplete endpoint
information. It also handles serialization to and from various RPC and record formats.
This allows us to remove a lot of boilerplate code and standardize the handling of listeners
between BrokerServer and ControllerServer.

Reviewers: David Arthur <mumrah@gmail.com>
7 changed files
654 additions
121 deletions
DATE:Sep 20, 2023
-----------

KAFKA-14499: [7/7] Add integration tests for OffsetCommit API and Off…
    
…setFetch API (#14353)

This patch adds integration tests for the OffsetCommit API and the OffsetFetch API. The tests runs against the old and the new group coordinator and with the new and the old consumer rebalance protocol.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
968 additions
256 deletions
DATE:Sep 11, 2023
-----------

      MINOR: Check the existence of AppInfo for the given ID before creatin…
    
…g a new mbean of the same name (#14287)

When using kafka consumer in apache pinot , we did see couple of WARN as we are trying to create kafka consumer class with the same name . We currently have to use a added suffix to create a new mBean as each new kafka consumer in same process creates a mBean . Adding support here to skip creation of mBean if its already existing

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
2 changed files
20 additions
1 deletion
DATE:Sep 14, 2023
-----------

KAFKA-15306 - Integrating committed offsets for updating fetch positi…
    
…ons (#14385)

Support for using committed offsets to update fetch positions.

This PR includes:
* movingrefreshCommittedOffsets function out of the existing ConsumerCoordinator so it can be reused (no code changes)
* using the above refreshCommittedOffsets for updating fetch positions if the consumer has enabled the Kafka-based offsets management by defining a groupId

Reviewers: Jun Rao <junrao@gmail.com>
4 changed files
195 additions
39 deletions
DATE:Sep 18, 2023
-----------

KAFKA-13973: Fix inflated block cache metrics (#14317)
    
All block cache metrics are being multiplied by the total number of
column families. In a `RocksDBTimestampedStore`, we have 2 column
families (the default, and the timestamped values), which causes all
block cache metrics in these stores to become doubled.

The cause is that our metrics recorder uses `getAggregatedLongProperty`
to fetch block cache metrics. `getAggregatedLongProperty` queries the
property on each column family in the database, and sums the results.

Since we always configure all column families to share the same block
cache, that causes the same block cache to be queried multiple times for
its metrics, with the results added togehter, effectively multiplying
the real value by the total number of column families.

To fix this, we should simply use `getLongProperty`, which queries a
single column family (the default one). Since all column families share
the same block cache, querying just one of them will give us the correct
metrics for that shared block cache.

Note: the same block cache is shared among all column families of a store
irrespective of whether the user has configured a shared block cache
across multiple stores.

Reviewers: Matthias J. Sax <matthias@confluent.io>, Bruno Cadonna <cadonna@apache.org>
4 changed files
155 additions
6 deletions
DATE:Sep 18, 2023
-----------

KAFKA-15326: [7/N] Processing thread non-busy waiting (#14180)
    
Avoid busy waiting for processable tasks. We need to be a bit careful here to not have the task executors to sleep when work is available. We have to make sure to signal on the condition variable any time a task becomes "processable". Here are some situations where a task becomes processable:

- Task is unassigned from another TaskExecutor.
- Task state is changed (should only happen inside when a task is locked inside the polling phase).
- When tasks are unlocked.
- When tasks are added.
- New records available.
- A task is resumed.

So in summary, we

- We should probably lock tasks when they are paused and unlock them when they are resumed. We should also wake the task executors after every polling phase. This belongs to the StreamThread integration work (separate PR). We add DefaultTaskManager.signalProcessableTasks for this.
- We need to awake the task executors in DefaultTaskManager.unassignTask, DefaultTaskManager.unlockTasks and DefaultTaskManager.add.


Reviewers: Walker Carlson <wcarlson@confluent.io>, Bruno Cadonna <cadonna@apache.org>
6 changed files
201 additions
11 deletions
DATE:Sep 11, 2023
-----------

      MINOR: Log when remote fetch execution is rejected (#14350)
    
Log at warning level when remote fetch execution is rejected. This can be potentially useful to troubleshoot UNKNOWN_SERVER_ERROR responses for remote fetch requests.

Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>
1 changed file
1 addition
0 deletions
DATE:Sep 8, 2023
-----------

KAFKA-15439: Transactions test with tiered storage (#14347)
    
This test extends the existing TransactionsTest. It configures the broker and topic with tiered storage and expects at-least one log segment to be uploaded to the remote storage.

Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>,  Divij Vaidya <diviv@amazon.com>
14 changed files
377 additions
204 deletions
DATE:Sep 14, 2023
-----------

      MINOR: rename BrokerToControllerChannelManager to NodeToControllerCha…
    
…nnelManager (#14356)

Reviewers: David Jacot <david.jacot@gmail.com>
22 changed files
85 additions
85 deletions
DATE:Sep 11, 2023
-----------

KAFKA-14993: Improve TransactionIndex instance handling while copying…
    
… to and fetching from RSM (#14363)

- Updated the contract for RSM's fetchIndex to throw a ResourceNotFoundException instead of returning an empty InputStream when it does not have a TransactionIndex.
- Updated the LocalTieredStorage implementation to adhere to the new contract.
- Added Unit Tests for the change.

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>
5 changed files
42 additions
12 deletions
DATE:Sep 12, 2023
-----------

      MINOR: reduce default RLMM retry interval (#14374)
    
Reduce default remote.log.metadata.initialization.retry.interval.ms value to 100ms.

Reviewers: Satish Duggana <satishd@apache.org>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Sep 12, 2023
-----------

KAFKA-15275 - Client state machine basic components, states and initi…
    
…al transitions (#14323)

Initial definition of the core components for maintaining group membership on the client following the new consumer group protocol.

This PR includes:
- Membership management for keeping member state and assignment, based on the heartbeat responses received.
- Assignor selection logic to support server side assignors.
This only includes the basic initial states and transitions, to be extended as we implement the protocol.

This is intended to be used from the heartbeat and assignment requests manager that actually build and process the heartbeat and assignment related requests.

Reviewers: Philip Nee <pnee@confluent.io>, Kirk True <ktrue@confluent.io>, David Jacot <djacot@confluent.io>
6 changed files
726 additions
0 deletions
DATE:Sep 13, 2023
-----------

KAFKA-14502; Implement LeaveGroup protocol in new GroupCoordinator (#…

…14147)

This patch implements the LeaveGroup API in the new group coordinator.

Reviewers: David Jacot <djacot@confluent.io>
9 changed files
893 additions
18 deletions
DATE:Sep 13, 2023
-----------

KAFKA-15459: Convert coordinator retriable errors to a known producer…
    
… response error (#14378)

KIP-890 Part 1 tries to address hanging transactions on old clients. Thus, the produce version can not be bumped and no new errors can be added. Before we used the java client's notion of retriable and abortable errors -- retriable errors are defined as such by extending the retriable error class, fatal errors are defined explicitly, and abortable errors are the remaining. However, many other clients treat non specified errors as fatal and that means many retriable errors kill the application.

Stuck between having specific errors for Java clients that are handled correctly (ie we retry) or specific fatal errors for cases that should not be fatal, we opted for a middle ground of non-specific error, but a message in the response to specify.

Converting some of the coordinator error codes to NOT_ENOUGH_REPLICAS which is a known produce response.
Also correctly add the old errors to the produce response. (We were not doing this correctly before)

Added tests for the new errors and messages.

Reviewers: Jason Gustafson <jason@confluent.io>, David Jacot <djacot@confluent.io>
2 changed files
130 additions
50 deletions
DATE:Sep 13, 2023
-----------

KAFKA-14581: Moving GetOffsetShell to tools (#13562)
    
This PR moves GetOffsetShell from core module to tools module with rewriting from Scala to Java.

Reviewers: Federico Valeri fedevaleri@gmail.com, Ziming Deng dengziming1993@gmail.com, Mickael Maison mimaison@apache.org.
11 changed files
1,053 additions
851 deletions
DATE:Sep 11, 2023
-----------

KAFKA-15352: Update log-start-offset before initiating deletion of re…
    
…mote segments (#14349)

This change is about the current leader updating the log-start-offset before the segments are deleted from remote storage. This will do a best-effort mechanism for followers to receive log-start-offset from the leader and they can update their log-start-offset before it becomes a leader. 

Reviewers: Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
251 additions
40 deletions
DATE:Sep 12, 2023
-----------

      MINOR: StoreChangelogReaderTest fails with log-level DEBUG (#14300)
    
A mocked method is executed unexpectedly when we enable DEBUG
log level, leading to confusing test failures during debugging.
Since the log message itself seems useful, we adapt the test
to take the additional mocked method call into account).

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
5 additions
1 deletion
DATE:Sep 6, 2023
-----------

KAFKA-15435 Fix counts in MigrationManifest (#14342)
    
Reviewers: Liu Zeyu <zeyu.luke@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
3 changed files
110 additions
5 deletions
DATE:Sep 6, 2023
-----------

KAFKA-14273; Close file before atomic move (#14354)
    
In the Windows OS atomic move are not allowed if the file has another open handle. E.g

__cluster_metadata-0\quorum-state: The process cannot access the file because it is being used by another process
        at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
        at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
        at java.base/sun.nio.fs.WindowsFileCopy.move(WindowsFileCopy.java:403)
        at java.base/sun.nio.fs.WindowsFileSystemProvider.move(WindowsFileSystemProvider.java:293)
        at java.base/java.nio.file.Files.move(Files.java:1430)
        at org.apache.kafka.common.utils.Utils.atomicMoveWithFallback(Utils.java:949)
        at org.apache.kafka.common.utils.Utils.atomicMoveWithFallback(Utils.java:932)
        at org.apache.kafka.raft.FileBasedStateStore.writeElectionStateToFile(FileBasedStateStore.java:152)

This is fixed by first closing the temporary quorum-state file before attempting to move it.

Reviewers: Colin Patrick McCabe <cmccabe@apache.org>
Co-Authored-By: Renaldo Baur Filho <renaldobf@gmail.com>
2 changed files
35 additions
12 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15369: Implement KIP-919: Allow AC to Talk Directly with Contro…
    
…llers (#14306)

Implement KIP-919: Allow AdminClient to Talk Directly with the KRaft Controller Quorum and add
Controller Registration. This KIP adds a new version of DescribeClusterRequest which is supported
by KRaft controllers. It also teaches AdminClient how to use this new DESCRIBE_CLUSTER request to
talk directly with the controller quorum. This is all gated behind a new MetadataVersion,
IBP_3_7_IV0.

In order to share the DESCRIBE_CLUSTER logic between broker and controller, this PR factors it out
into AuthHelper.computeDescribeClusterResponse.

The KIP adds three new errors codes: MISMATCHED_ENDPOINT_TYPE, UNSUPPORTED_ENDPOINT_TYPE, and
UNKNOWN_CONTROLLER_ID. The endpoint type errors can be returned from DescribeClusterRequest

On the controller side, the controllers now try to register themselves with the current active
controller, by sending a CONTROLLER_REGISTRATION request. This, in turn, is converted into a
RegisterControllerRecord by the active controller. ClusterImage, ClusterDelta, and all other
associated classes have been upgraded to propagate the new metadata. In the metadata shell, the
cluster directory now contains both broker and controller subdirectories.

QuorumFeatures previously had a reference to the ApiVersions structure used by the controller's
NetworkClient. Because this PR removes that reference, QuorumFeatures now contains only immutable
data. Specifically, it contains the current node ID, the locally supported features, and the list
of quorum node IDs in the cluster.

Reviewers: David Arthur <mumrah@gmail.com>, Ziming Deng <dengziming1993@gmail.com>, Luke Chen <showuon@gmail.com>
68 changed files
3,183 additions
463 deletions
DATE:Sep 7, 2023
-----------

KAFKA-14876: Add stopped state to Kafka Connect Administration docs s…
    
…ection (#14336)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
5 additions
0 deletions
DATE:Sep 5, 2023
-----------

      MINOR: fix currentLag javadoc (#14224)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
2 additions
1 deletion
DATE:Sep 8, 2023
-----------

KAFKA-7438: Migrate WindowStoreBuilderTest from EasyMock to Mockito (#…

…14152)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
11 additions
37 deletions
DATE:Sep 4, 2023
-----------

KAFKA-14509; [1/2] Define ConsumerGroupDescribe API request and respo…
    
…nse schemas and classes. (#14124)

This patch adds the schemas of the new ConsumerGroupDescribe API (KIP-848) and adds an handler to the KafkaApis.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Jacot <djacot@confluent.io>
14 changed files
456 additions
1 deletion
DATE:Sep 7, 2023
-----------

      MINOR: Update comment in consumeAction (#14335)
    
Reviewers: Satish Duggana <satishd@apache.org>, Divij Vaidya <diviv@amazon.com>
1 changed file
2 additions
3 deletions
DATE:Sep 5, 2023
-----------

KAFKA-15338: The metric group documentation for metrics added in KAFK…

…A-13945 is incorrect (#14221)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
4 additions
4 deletions
DATE:Sep 8, 2023
-----------

KAFKA-15425: Fail fast in Admin::listOffsets when topic (but not part…
    
…ition) metadata is not found (#14314)

This restores previous behavior for Admin::listOffsets, which was to fail immediately if topic metadata could not be found, and only retry if metadata for one or more specific partitions could not be found.

There is a subtle difference here: prior to #13432, the operation would be retried if any metadata error was reported for any individual topic partition, even if an error was also reported for the entire topic. With this change, the operation always fails if an error is reported for the entire topic, even if an error is also reported for one or more individual topic partitions.

I am not aware of any cases where brokers might return both topic- and topic partition-level errors for a metadata request, and if there are none, then this change should be safe. However, if there are such cases, we may need to refine this PR to remove the discrepancy in behavior.

Reviewers: Justine Olshan <jolshan@confluent.io>
3 changed files
66 additions
11 deletions
DATE:Sep 7, 2023
-----------

      MINOR: Update the documentation's table of contents to add missing he…
    
…adings for Kafka Connect (#14337)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
10 additions
2 deletions
DATE:Sep 5, 2023
-----------

KAFKA-15307: Removes non-existent configs (#14341)
    
`partition.grouper` was removed in 3.0 release.

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
0 additions
17 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15410: Reassign replica expand, move and shrink integration tes…
    
…ts (2/4) (#14328)

- Updated the log-start-offset to the correct value while building the replica state in ReplicaFetcherTierStateMachine#buildRemoteLogAuxState

Integration tests added:
1. ReassignReplicaExpandTest
2. ReassignReplicaMoveTest and
3. ReassignReplicaShrinkTest

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
10 changed files
333 additions
13 deletions
DATE:Sep 5, 2023
-----------

KAFKA-15429: reset transactionInFlight on StreamsProducer close (#14326)
    
Resets the value of transactionInFlight to false when closing the
StreamsProducer. This ensures we don't try to commit against a
closed producer

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
2 changed files
31 additions
2 deletions
DATE:Sep 3, 2023
-----------

KAFKA-15052 Fix the flaky testBalancePartitionLeaders - part II (#13908)
    
A follow-up to #13804.
This follow-up adds the alternative fix approach mentioned in
the PR above - bumping the session timeout used in the test
with 1 second.

Reproducing the flake-out locally has been much harder than
on the CI runs, as neither Gradle with Java 11 or Java 14 nor
IntelliJ with Java 14 could show it, but IntelliJ with Java 11
could occasionally reproduce the failure the first time
immediately after a rebuild. While I was unable to see the
failure with the bumped session timeout, the testing procedure
definitely didn't provide sufficient reassurance for the
fix as even without it often I'd see hundreds of consecutive
successful test runs when the first run didn't fail.

Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Sep 4, 2023
-----------

KAFKA-15421: fix network thread leak in testThreadPoolResize (#14320)
    
In SocketServerTest, we create SocketServer and enableRequestProcessing on each test class initialization. That's fine since we shutdown it in @AfterEach. The issue we have is we disabled 2 tests in this test suite. And when running these disabled tests, we will go through class initialization, but without @AfterEach. That causes 2 network thread leaked.

Compared the error message in DynamicBrokerReconfigurationTest#testThreadPoolResize test here:

org.opentest4j.AssertionFailedError: Invalid threads: expected 6, got 8: List(data-plane-kafka-socket-acceptor-ListenerName(INTERNAL)-SSL-0, data-plane-kafka-socket-acceptor-ListenerName(PLAINTEXT)-PLAINTEXT-0, data-plane-kafka-socket-acceptor-ListenerName(INTERNAL)-SSL-0, data-plane-kafka-socket-acceptor-ListenerName(EXTERNAL)-SASL_SSL-0, data-plane-kafka-socket-acceptor-ListenerName(INTERNAL)-SSL-0, data-plane-kafka-socket-acceptor-ListenerName(EXTERNAL)-SASL_SSL-0, data-plane-kafka-socket-acceptor-ListenerName(PLAINTEXT)-PLAINTEXT-0, data-plane-kafka-socket-acceptor-ListenerName(EXTERNAL)-SASL_SSL-0) ==> expected: <true> but was: <false>

The 2 unexpected network threads are leaked from SocketServerTest.

Reviewers: Satish Duggana <satishd@apache.org>, Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kchandraprakash@uber.com>, Chris Egerton <chrise@aiven.io>
3 changed files
1 addition
4 deletions
DATE:Sep 3, 2023
-----------

      MINOR: Update the javadoc in RSM (#14352)
    
Reviewers: Satish Duggana <satishd@apache.org>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>
1 changed file
3 additions
3 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15422: Update documenttion for delegation tokens when working w…
    
…ith Kafka with KRaft (#14318)

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
10 additions
5 deletions
DATE:Sep 4, 2023
-----------

KAFKA-15424: Make the transaction verification a dynamic configuration (
    
#14324)

This will allow enabling and disabling transaction verification (KIP-890 part 1) without having to roll the cluster.

Tested that restarting the cluster persists the configuration.

If a verification is disabled/enabled while we have an inflight request, depending on the step of the process, the change may or may not be seen in the inflight request (enabling will typically fail unverified requests, but we may still verify and reject when we first disable) Subsequent requests/retries will behave as expected for verification.

Sequence checks will continue to take place after disabling until the first message is written to the partition (thus clearing the verification entry with the tentative sequence) or the broker restarts/partition is reassigned which will clear the memory. On enabling, we will only track sequences that for requests received after the verification is enabled.

Reviewers: Jason Gustafson <jason@confluent.io>, Satish Duggana <satishd@apache.org>
7 changed files
191 additions
8 deletions
DATE:Sep 5, 2023
-----------

KAFKA-15410: Delete topic integration test with LocalTieredStorage an…
    
…d TBRLMM (3/4) (#14329)

Added delete topic integration tests for tiered storage enabled topics with LocalTieredStorage and TBRLMM

Reviewers: Satish Duggana <satishd@apache.org>, Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>
9 changed files
197 additions
95 deletions
DATE:Sep 6, 2023
-----------

KAFKA-15410: Expand partitions, segment deletion by retention and ena…
    
…ble remote log on topic integration tests (1/4) (#14307)

Added the below integration tests with tiered storage
 - PartitionsExpandTest
 - DeleteSegmentsByRetentionSizeTest
 - DeleteSegmentsByRetentionTimeTest and
 - EnableRemoteLogOnTopicTest
 - Enabled the test for both ZK and Kraft modes.

These are enabled for both ZK and Kraft modes.

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>
12 changed files
372 additions
21 deletions
DATE:Sep 4, 2023
-----------

KAFKA-14499: [6/N] Add MemberId and MemberEpoch to OffsetFetchRequest (…

…#14321)

This patch adds the MemberId and the MemberEpoch fields to the OffsetFetchRequest. Those fields will be populated when the new consumer group protocol is used to ensure that the member fetching the offset has the correct member id and epoch. If it does not, UNKNOWN_MEMBER_ID or STALE_MEMBER_EPOCH are returned to the client.

Our initial idea was to implement the same for the old protocol. The field is called GenerationIdOrMemberEpoch in KIP-848 to materialize this. As a second though, I think that we should only do it for the new protocol. The effort to implement it in the old protocol is not worth it in my opinion.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Calvin Liu <caliu@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
299 additions
45 deletions
DATE:Sep 6, 2023
-----------

KAFKA-15260: RLM Task should handle uninitialized RLMM for the associ…
    
…ated topic-parititon (#14113)

This change is about RLM task handling retriable exception when it tries to copy segments to remote but the RLMM is not yet initialized. On encountering the exception, we log the error and throw the exception back to the caller. We also make sure that the failure metrics are updated since this is a temporary error because RLMM is not yet initialized.

Added unit tests to verify RLM task does not attempt to copy segments to remote on encountering the retriable exception and that failure metrics remain unchanged.

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>
2 changed files
58 additions
1 deletion
DATE:Sep 4, 2023
-----------

KAFKA-14133: Move AbstractStreamTest and RocksDBMetricsRecordingTrigg…
    
…erTest to Mockito (#14223)

Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
28 additions
34 deletions
DATE:Sep 4, 2023
-----------

KAFKA-15418: update Kafka design docs with decompression information (#…

…14322)

Reviewers: Divij Vaidya <diviv@amazon.com>, Matthias J. Sax <mjsax@apache.org>

---------

Co-authored-by: Cerchie <lcerchie@confluent.io>
1 changed file
3 additions
2 deletions
DATE:Sep 8, 2023
-----------

KAFKA-15351: Update log-start-offset after leader election for topics…
    
… enabled with remote storage (#14340)

On leadership failover, the new leader's start offset may be older than the start offset of old leader. This works fine for local storage scenario because the new leader still contains data associated with stale start offset. But in case of remote storage, although new leader has a stale offset, the data associated with it has been deleted from remote by the old leader. Hence, we end up in a situation where leader has a start offset but no data associated with it.

This commit fixes the situation by ensuring that on every leadership failover, for topics with remote storage, the leader will update it's start offset from the base of first segment in current leader chain present in the remote storage (if any).

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
158 additions
13 deletions
DATE:Sep 7, 2023
-----------

      MINOR: Fix trailing white spaces on reviewers.py (#14343)
    
Fixing trailing white spaces on reviewers.py.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Jacot <djacot@confluent.io>
1 changed file
5 additions
6 deletions
DATE:Sep 6, 2023
-----------

KAFKA-15410: Delete records with tiered storage integration test (4/4) (
    
#14330)

* Added the integration test for DELETE_RECORDS API for tiered storage enabled topic
* Added validation checks before removing remote log segments for log-start-offset breach

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>
4 changed files
202 additions
45 deletions
DATE:Sep 7, 2023
-----------

KAFKA-9800: Exponential backoff for Kafka clients - KIP-580 (#14111)
    
Implementation of KIP-580 to add exponential back-off to situations in which retry.backoff.ms
is used to delay backoff attempts. This KIP adds exponential backoff behavior with a maximum
controlled by a new config retry.backoff.max.ms, together with a +/- 20% of jitter to spread the
retry attempts of the client fleet.

Reviewers: Mayank Shekhar Narula <mayanks.narula@gmail.com>, Milind Luthra <i.milind.luthra@gmail.com>, Kirk True <kirk@mustardgrain.com>, Jun Rao<junrao@gmail.com>
60 changed files
740 additions
241 deletions
DATE:Sep 5, 2023
-----------

KAFKA-15179: Add integration tests for the file sink and source conne…
    
…ctors (#14279)

Reviewers: Ashwin Pankaj <apankaj@confluent.io>, Chris Egerton <chrise@aiven.io>
7 changed files
492 additions
7 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15293 Added documentation for tiered storage metrics (#14331)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
2 changed files
58 additions
0 deletions
DATE:Sep 5, 2023
-----------

KAFKA-14274 #1: basic refactoring (#14305)
    
This change introduces some basic clean up and refactoring for forthcoming commits related to the revised fetch code for the consumer threading refactor project.

Reviewers: Christo Lolov <lolovc@amazon.com>, Jun Rao <junrao@gmail.com>
10 changed files
153 additions
51 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15416: Fix flaky TopicAdminTest::retryEndOffsetsShouldRetryWhen…
    
…TopicNotFound test case (#14313)

Reviewers: Philip Nee <pnee@confluent.io>, Greg Harris <greg.harris@aiven.io>
3 changed files
79 additions
63 deletions
DATE:Sep 7, 2023
-----------

KAFKA-14595: ReassignPartitionsCommandArgsTest rewritten in java (#14217

)

Reviewers: Taras Ledkov <tledkov@apache.org>, Greg Harris <greg.harris@aiven.io>
3 changed files
296 additions
284 deletions
DATE:Sep 7, 2023
-----------

KAFKA-15412: Reading an unknown version of quorum-state-file should t…
    
…rigger an error (#14302)

Reading an unknown version of quorum-state-file should trigger an error. Currently the only known version is 0. Reading any other version should cause an error.

Reviewers: Justine Olshan <jolshan@confluent.io>, Luke Chen <showuon@gmail.com>
2 changed files
62 additions
0 deletions
DATE:Aug 30, 2023
-----------

KAFKA-15351: Ensure log-start-offset not updated to local-log-start-o…
    
…ffset when remote storage enabled (#14301)

When tiered storage is enabled on the topic, and the last-standing-replica is restarted, then the log-start-offset should not reset its offset to first-local-log-segment-base-offset.

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>
5 changed files
124 additions
37 deletions
DATE:Sep 1, 2023
-----------

KAFKA-15403: Refactor @test(expected) annotation with assertThrows (#…

…14264)

assertThrows makes the verification of exceptions clearer and more intuitive, thus improving code readability compared to the annotation approach. It is considered a test smell in the research literature. One possible research is due to developers not keeping up to date with recent versions of testing frameworks.

All such patterns in streams have been refactored.

Reviewers: vamossagar12 <sagarmeansocean@gmail.com>, Justine Olshan <jolshan@confluent.io>
2 changed files
27 additions
26 deletions
DATE:Aug 29, 2023
-----------

      MINOR: Missing space in ProducerStateManager LogContext (#14275)
    

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Aug 25, 2023
-----------

KAFKA-15429: catch+log errors from unsubscribe in streamthread shutdo…
    
…wn (#14325)

Preliminary fix for KAFKA-15429 which updates StreamThread.completeShutdown to
catch-and-log errors from consumer.unsubscribe. Though this does not prevent
the exception, it does preserve the original exception that caused the stream
thread to exit.

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
6 additions
2 deletions
DATE:Sep 3, 2023
-----------

KAFKA-15375: fix broken clean shutdown detection logic in LogManager
    
When running in kraft mode, LogManager.startup is called in a different thread than the main broker (#14239)
startup thread (by BrokerMetadataPublisher when the first metadata update is received.) If a fatal
error happens during broker startup, before LogManager.startup is completed, LogManager.shutdown may
 mark log dirs as clean shutdown improperly.

This PR includes following change:
1. During LogManager startup time:
  - track hadCleanShutdwon info for each log dir
  - track loadLogsCompleted status for each log dir
2. During LogManager shutdown time:
  - do not write clean shutdown marker file for log dirs which have hadCleanShutdown==false and loadLogsCompleted==false

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
77 additions
5 deletions
DATE:Aug 30, 2023
-----------

      MINOR: Fix incorrect comment in TopicDeletionManager.scala. (#14292)
    
Fix incorrect comment in TopicDeletionManager.scala

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Aug 28, 2023
-----------

      MINOR: Close topic based RLMM correctly in integration tests (#14315)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Aug 31, 2023
-----------

      MINOR: Fix the TBRLMMRestart test. (#14297)
    
Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
1 changed file
10 additions
7 deletions
DATE:Aug 28, 2023
-----------

KAFKA-15389: Don't publish until we have replayed at least one record (…

…#14282)

When starting up a controller for the first time (i.e., with an empty log), it is possible for
MetadataLoader to publish an empty MetadataImage before the activation records of the controller
have been written. While this is not a bug, it could be confusing. This patch closes that gap by
waiting for at least one controller record to be committed before the MetadataLoader starts publishing
images.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
72 additions
4 deletions
DATE:Aug 25, 2023
-----------

KAFKA-15267: Do not allow Tiered Storage to be disabled while topics …
    
…have remote.storage.enable property (#14161)

The purpose of this change is to not allow a broker to start up with Tiered Storage disabled (remote.log.storage.system.enable=false) while there are still topics that have 'remote.storage.enable' set.

Reviewers: Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
5 changed files
62 additions
14 deletions
DATE:Aug 30, 2023
-----------

KAFKA-15377: Don't expose externalized secret values in tasks-config …
    
…API endpoint (#14244)

Reviewers: Greg Harris <greg.harris@aiven.io>
4 changed files
18 additions
2 deletions
DATE:Aug 24, 2023
-----------

KAFKA-15256: Adding reviewer as part of release announcement email te…
    
…mplate (#14288)

Reviewers: Divij Vaidya <diviv@amazon.com>, Philip Nee <pnee@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Aug 28, 2023
-----------

KAFKA-14965 - OffsetsRequestsManager implementation & API integration (…

…#14308)

Implementation of the OffsetRequestsManager, responsible for building requests and processing responses for requests related to partition offsets.

In this PR, the manager includes support for ListOffset requests, generated when the user makes any of the following consumer API calls:

beginningOffsets
endOffsets
offsetsForTimes
All previous consumer API calls interact with the OffsetsRequestsManager by generating a ListOffsetsApplicationEvent.

Includes tests to cover the new functionality and to ensure no API level changes are introduced.

This covers KAFKA-14965 and KAFKA-15081.

Reviewers: Philip Nee <pnee@confluent.io>, Kirk True <kirk@mustardgrain.com>, Jun Rao<junrao@gmail.com>
15 changed files
1,573 additions
59 deletions
DATE:Sep 1, 2023
-----------

KAFKA-14133: Move RecordCollectorTest, StateRestoreCallbackAdapterTes…
    
…t and StoreToProcessorContextAdapterTest to Mockito (#14210)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
23 additions
37 deletions
DATE:Aug 28, 2023
-----------

KAFKA-15181: Wait for RemoteLogMetadataCache to initialize after assi…
    
…gning partitions (#14127)

This PR adds the following changes to the `TopicBasedRemoteLogMetadataManager`

1. Added a guard in RemoteLogMetadataCache so that the incoming request can be served from the cache iff the corresponding user-topic-partition is initalized
2. Improve error handling in ConsumerTask thread so that is not killed when there are errors in reading the internal topic
3. ConsumerTask initialization should handle the case when there are no records to read
and some other minor changes

Added Unit Tests for the changes

Co-authored-by: Kamal Chandraprakash <kamal.chandraprakash@gmail.com>

Reviewers: Luke Chen <showuon@gmail.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Christo Lolov <lolovc@amazon.com>, Satish Duggana <satishd@apache.org>
11 changed files
990 additions
292 deletions
DATE:Aug 26, 2023
-----------

      MINOR: Use "add-exports" only when jdk >= 16 in minikdc (#14232)
    
 Use "add-exports" only when jdk >= 16 in minikdc

Reviewers: Greg Harris <greg.harris@aiven.io>
1 changed file
7 additions
2 deletions
DATE:Aug 25, 2023
-----------

      MINOR Bump trunk to 3.7.0-SNAPSHOT (#14286)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
8 changed files
13 additions
9 deletions
DATE:Aug 24, 2023
-----------

KAFKA-14875: Implement wakeup (#14118)
    
Summary
Implemented wakeup() mechanism using a WakeupTrigger class to store the pending wakeup item, and when wakeup() is invoked, it checks whether there's an active task or a wakeup task.

If there's an active task: the task will be completed exceptionally and the atomic reference will be freed up.
If there an wakedup task, which means wakeup() was invoked before a blocking call was issued. Therefore, the current task will be completed exceptionally immediately.

This PR also addressed minor issues such as:

Throwing WakeupException at the right place: As wakeups are thrown by completing an active future exceptionally. The WakeupException is wrapped inside of the ExecutionException.

mockConstruction is a thread-lock mock; therefore, we need to free up the reference before completing the test. Otherwise, other tests will continue using the thread-lock mock.

Reviewers: Lianet Magrans <lianetmr@gmail.com>, Jun Rao <junrao@gmail.com>
4 changed files
250 additions
14 deletions
DATE:Aug 29, 2023
-----------

      KRaft support for DescribeClusterRequestTest and DeleteConsumerGroups…
    
…Test (#14294)

Reviewers: dengziming <dengziming1993@gmail.com>, mannoopj <mannoopj@users.noreply.github.com>
2 changed files
70 additions
45 deletions
DATE:Aug 29, 2023
-----------

KAFKA-14499: [5/N] Refactor GroupCoordinator.fetchOffsets and GroupCo…
    
…ordinator.fetchAllOffsets (#14310)

This patch refactors the GroupCoordinator.fetchOffsets and GroupCoordinator.fetchAllOffsets methods to take an OffsetFetchRequestGroup and to return an OffsetFetchResponseGroup. It prepares the ground for adding the member id and the member epoch to the OffsetFetchRequest. This change also makes those two methods more aligned with the others in the interface.

Reviewers: Calvin Liu <caliu@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
189 additions
167 deletions
DATE:Sep 1, 2023
-----------

      MINOR: Add a few test cases to clients (#14211)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
2 changed files
34 additions
0 deletions
DATE:Aug 25, 2023
-----------

KAFKA-13327: Gracefully report connector validation errors instead of…
    
… returning 500 responses (#14303)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Greg Harris <greg.harris@aiven.io>
8 changed files
488 additions
37 deletions
DATE:Aug 29, 2023
-----------

KAFKA-14133: Move RocksDBRangeIteratorTest, TimestampedKeyValueStoreB…
    
…uilderTest and TimestampedSegmentTest to Mockito (#14222)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
153 additions
194 deletions
DATE:Aug 30, 2023
-----------

KAFKA-15404: Disable the flaky integration tests. (#14296)
    
 Disabled the below tests to fix the thread leak:

1. kafka.server.DynamicBrokerReconfigurationTest.testThreadPoolResize() and
2. org.apache.kafka.tiered.storage.integration.OffloadAndConsumeFromLeaderTest

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Justine Olshan <jolshan@confluent.io>
2 changed files
3 additions
0 deletions
DATE:Aug 31, 2023
-----------

KAFKA-15427: Fix resource leak in integration tests for tiered storage (
    
#14319)

Co-authored-by: Nikhil Ramakrishnan <nikrmk@amazon.com>

Reviewers: Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Sep 1, 2023
-----------

KAFKA-15353: make sure AlterPartitionRequest.build() is idempotent (#…

…14236)

As described in https://issues.apache.org/jira/browse/KAFKA-15353
When the AlterPartitionRequest version is < 3 and its builder.build is called multiple times, both newIsrWithEpochs and newIsr will all be empty. This can happen if the sender retires on errors.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
23 additions
6 deletions
DATE:Aug 28, 2023
-----------

KAFKA-14888: Added remote log segments retention mechanism based on t…
    
…ime and size. (#13561)

This change introduces a remote log segment segment retention cleanup mechanism.

RemoteLogManager runs retention cleanup activity tasks on each leader replica. It assesses factors such as overall size and retention duration, subsequently removing qualified segments from remote storage. This process also involves adjusting the log-start-offset within the UnifiedLog accordingly. It also cleans up the segments which have epochs earlier than the earliest leader epoch in the current leader. 

Co-authored-by: Satish Duggana <satishd@apache.org>
Co-authored-by: Kamal Chandraprakash <kamal.chandraprakash@gmail.com>

Reviewers: Jun Rao <junrao@gmail.com>, Divij Vaidya <diviv@amazon.com, Luke Chen <showuon@gmail.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, Christo Lolov <lolovc@amazon.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>, Nikhil Ramakrishnan <ramakrishnan.nikhil@gmail.com>
11 changed files
935 additions
141 deletions
DATE:Aug 24, 2023
-----------

      HOTFIX: avoid placement of unnecessary transient standby tasks & impr…
    
…ove assignor logging (#14149)

Minor fix to avoid creating unnecessary standby tasks, especially when these may be surprising or unexpected as in the case of an application with num.standby.replicas = 0 and warmup replicas disabled.

The "bug" here was introduced during the fix for an issue with cooperative rebalancing and in-memory stores. The fundamental problem is that in-memory stores cannot be unassigned from a consumer for any period, however temporary, without being closed and losing all the accumulated state. This caused some grief when the new HA task assignor would assign an active task to a node based on the readiness of the standby version of that task, but would have to remove the active task from the initial assignment so it could first be revoked from its previous owner, as per the cooperative rebalancing protocol. This temporary gap in any version of that task among the consumer's assignment for that one intermediate rebalance would end up causing the consumer to lose all state for it, in the case of in-memory stores.

To fix this, we simply began to place standby tasks on the intended recipient of an active task awaiting revocation by another consumer. However, the fix was a bit of an overreach, as we assigned these temporary standby tasks in all cases, regardless of whether there had previously been a standby version of that task. We can narrow this down without sacrificing any of the intended functionality by only assigning this kind of standby task where the consumer had previously owned some version of it that would otherwise potentially be lost.

Also breaks up some of the long log lines in the StreamsPartitionAssignor and expands the summary info while moving it all to the front of the line (following reports of missing info due to truncation of long log lines in larger applications)
3 changed files
97 additions
21 deletions
DATE:Aug 30, 2023
-----------

KAFKA-15392: Prevent shadowing RestServer shutdown exceptions (#14277)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
13 additions
1 deletion
DATE:Aug 29, 2023
-----------

KAFKA-14500; [7/7] Refactor GroupMetadataManagerTest (#14122)
    
This patch makes the styling consistent inside GroupMetadataManagerTest. Also, it adds JoinResult to simplify the JoinGroup API responses in the tests.

Reviewers: David Arthur <mumrah@gmail.com>, David Jacot <djacot@confluent.io>
1 changed file
1,474 additions
1,594 deletions
DATE:Sep 1, 2023
-----------

KAFKA-15294: Publish remote storage configs (#14266)
    
This change does the following:

1. Make RemoteLogManagerConfigs that are implemented public

2. Add tasks to generate html docs for the configs

3. Include config docs in the main site

Reviewers: Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>, Christo Lolov <lolovc@amazon.com>, Satish Duggana <satishd@apache.org>
5 changed files
66 additions
37 deletions
DATE:Aug 28, 2023
-----------

KAFKA-14499: [4/N] Implement OffsetFetch API (#14120)
    
This patch implements the OffsetFetch API in the new group coordinator.

I found out that implementing the `RequireStable` flag is hard (to not say impossible) in the current model. For the context, the flag is here to ensure that an OffsetRequest request does not return stale offsets if there are pending offsets to be committed. In the scala code, we basically check the pending offsets data structure and if they are any pending offsets, we return the `UNSTABLE_OFFSET_COMMIT` error. This tells the consumer to retry.

In our new model, we don't have the pending offsets data structure. Instead, we use a timeline data structure to handle all the pending/uncommitted changes. Because of this we don't know whether offsets are pending for a particular group. Instead of doing this, I propose to not return the `UNSTABLE_OFFSET_COMMIT` error anymore. Instead, when `RequireStable` is set, we use a write operation to ensure that we read the latest offsets. If they are uncommitted offsets, the write operation ensures that the response is only return when they are committed. This gives a similar behaviour in the end.

Reviewers: Justine Olshan <jolshan@confluent.io>
9 changed files
817 additions
34 deletions
DATE:Aug 28, 2023
-----------

KAFKA-15399: Enable OffloadAndConsumeFromLeader test (#14285)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>, Satish Duggana <satishd@apache.org>
11 changed files
50 additions
44 deletions
DATE:Aug 28, 2023
-----------

      Kafka Streams Threading: Timeout behavior (#14171)
    
Implement setting and clearing task timeouts, as well as changing the output on exceptions to make
it similar to the existing code path. 

Reviewer: Walker Carlson <wcarlson@apache.org>
3 changed files
74 additions
5 deletions
DATE:Aug 31, 2023
-----------

KAFKA-14682: Report Mockito unused stubbings during Jenkins build (#1…

…4186)

* KAFKA-14682: Report Mockito unused stubbings during Jenkins build

* DO NOT MERGE: Add test case that should fail during Jenkins build

* Revert "DO NOT MERGE: Add test case that should fail during Jenkins build"

This reverts commit 8418b83.
1 changed file
1 addition
1 deletion
DATE:Aug 12, 2023
-----------

KAFKA-15102: Add replication.policy.internal.topic.separator.enabled …
    
…property to MirrorMaker 2 (KIP-949) (#14082)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
95 additions
3 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15030: Add connect-plugin-path command-line tool (#14064)
    
Reviewers: Chris Egerton <chrise@aiven.io>
21 changed files
1,576 additions
32 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15022: [10/N] docs for rack aware assignor (#14181)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
84 additions
4 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15295: Add config validation when remote storage is enabled on …
    
…a topic (#14176)

Add config validation which verifies that system level remote storage is enabled when enabling remote storage for a topic. In case verification fails, it throws InvalidConfigurationException.

Reviewers: Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>,  Luke Chen <showuon@gmail.com>
9 changed files
606 additions
65 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14937: Refactoring for client code to reduce boilerplate (#13990)
    
Move common code from the client implementations to the ClientUtils
class or (consumer) Utils class, where passible.

There are a number of places in the client code where the same basic
calls are made by more than one client implementation. Minor
refactoring will reduce the amount of boilerplate code necessary for
the client to construct its internal state.


Reviewers: Lianet Magrans <lianetmr@gmail.com>, Jun Rao <junrao@gmail.com>
11 changed files
422 additions
306 deletions
DATE:Aug 14, 2023
-----------

      MINOR: Fix SynchronizationTest classloaders sometimes not being paral…
    
…lel capable (#14177)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
16 additions
8 deletions
DATE:Aug 15, 2023
-----------

      MINOR: Fix the ZkMigrationState metric in KafkaController
    
This patch fixes an issue for ZK controllers where we were emitting the ZkMigrationState enum
rather than a value. This can lead to downstream failures with JMX metrics since the RMI protocol
will marshal the ZkMigrationState object returned by the gauge. Any downstream consumer of this
metric (like jconsole or a metrics exporter) will not be able to unmarshal the value since the
ZkMigrationState class will not be present.

The fix is simply to emit the byte value of this enum.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Alok Thatikunta <athatikunta@confluent.io>
2 changed files
13 additions
2 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15326: [5/N] Processing thread punctuation (#14001)
    
Implements punctuation inside processing threads. The scheduler
algorithm checks if a task that is not assigned currently can
be punctuated, and returns it when a worker thread asks for the
next task to be processed. Then, the processing thread runs all
punctuations in the punctionation queue.

Piggy-backed: take TaskExecutionMetadata into account when
processing records.

Reviewer: Bruno Cadonna <cadonna@apache.org>
9 changed files
293 additions
38 deletions
DATE:Aug 14, 2023
-----------

      MINOR: CommitRequestManager should only poll when the coordinator nod…
    
…e is known (#14179)

As title, we discovered a flaky bug during testing that the commit request manager would seldomly throw a NOT_COORDINATOR exception, which means the request was routed to a non-coordinator node. We discovered that if we don't check the coordinator node in the commitRequestManager, the request manager will pass on an empty node to the NetworkClientDelegate, which implies the request can be sent to any node in the cluster. This behavior is incorrect as the commit requests need to be routed to a coordinator node.

Because the timing coordinator's discovery during integration testing isn't entirely deterministic; therefore, the test became extremely flaky. After fixing this: The coordinator node is mandatory before attempt to enqueue these commit request to the NetworkClient.

Reviewers: Jun Rao <junrao@gmail.com>
2 changed files
38 additions
2 deletions
DATE:Aug 15, 2023
-----------

      MINOR: Refactor TierStateMachine related tests into a separate test f…
    
…ile (#13503)

This PR builds off of KAFKA-14685 and refactors any tests explicitly related to ReplicaFetcherTierStateMachine into a separate testing file ReplicaFetcherTierStateMachineTest.

Reviewers: Jun Rao <junrao@gmail.com>
6 changed files
697 additions
547 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15083: add config with "remote.log.metadata" prefix (#14151)
    
When configuring RLMM, the configs passed into configure method is the RemoteLogManagerConfig. But in RemoteLogManagerConfig, there's no configs related to remote.log.metadata.*, ex: remote.log.metadata.topic.replication.factor. So, even if users have set the config in broker, it'll never be applied.

This PR fixed the issue to allow users setting RLMM prefix: remote.log.metadata.manager.impl.prefix (default is rlmm.config.), and then, appending the desired remote.log.metadata.* configs, it'll pass into RLMM, including remote.log.metadata.common.client./remote.log.metadata.producer./ remote.log.metadata.consumer. prefixes.

Ex:

# default value
# remote.log.storage.manager.impl.prefix=rsm.config.
# remote.log.metadata.manager.impl.prefix=rlmm.config.

rlmm.config.remote.log.metadata.topic.num.partitions=50
rlmm.config.remote.log.metadata.topic.replication.factor=4

rsm.config.test=value

Reviewers: Christo Lolov <christololov@gmail.com>, Kamal Chandraprakash <kchandraprakash@uber.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
85 additions
11 deletions
DATE:Aug 11, 2023
-----------

KAFKA-7438: Replace Easymock & Powermock with Mockito in TableSourceN…
    
…odeTest (#14189)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
11 additions
16 deletions
DATE:Aug 12, 2023
-----------

      MINOR: Install ControllerServer metadata publishers sooner (#14215)
    
This patch is a follow up of #14169 that installs the metadata publishers before blocking on the authorizer future.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
25 additions
26 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14595: Move classes from ReassignPartitionsCommand to tools (#1…

…4172)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
11 changed files
658 additions
2 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15233: Add documentation for plugin.discovery and connect-plugi…
    
…n-path (KIP-898) (#14068)

Reviewers: Qichao Chu (@ex172000), Chris Egerton <chrise@aiven.io>
2 changed files
69 additions
1 deletion
DATE:Aug 10, 2023
-----------

      MINOR: Fix a race when query isUnderMinIsr (#14138)
    
When the leader becomes the follower, we first remove the ISR and then reset the leader. If we call isUnderMinIsr in between, we will get an answer with true which is a race bug.

Reviewers: Justine Olshan <jolshan@confluent.io>
2 changed files
56 additions
8 deletions
DATE:Aug 14, 2023
-----------

      MINOR: Fix streams task assignor tests (#14196)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
4 additions
4 deletions
DATE:Aug 12, 2023
-----------

      MINOR: Fix committed API in the PrototypeAsyncConsumer timeout (#14123)
    
Discovered the committed() API timeout during the integration test. After investigation, this is because the future was not completed in the ApplicationEventProcessor. Also added toString methods to the event class for debug purposes.

Reviewers: Jun Rao <junrao@gmail.com>
5 changed files
73 additions
24 deletions
DATE:Aug 11, 2023
-----------

KAFKA-14133: Migrato SessionCacheFlushListenerTest, TimestampedCache…
    
…FlushListenerTest and TimestampedTupleForwarderTest to Mockito (#14205)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
42 additions
53 deletions
DATE:Aug 16, 2023
-----------

KAFKA-7438: Replace EasyMock with Mockito in SessionStoreBuilderTest (#…

…14142)

Reviewers: Divij Vaidya <diviv@amazon.com>, Yash Mayya <yash.mayya@gmail.com>
1 changed file
15 additions
39 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15239: Fix system tests using producer performance service (#14092

)

Reviewers: Greg Harris <greg.harris@aiven.io>
7 changed files
7 additions
6 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15239: Fix ThroughputThrottler import-control (#14188)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
3 additions
0 deletions
DATE:Aug 10, 2023
-----------

KAFKA-14759: Move Mock, Schema, and Verifiable connectors to new test…
    
…-plugins module (#13302)

Reviewers: Hector Geraldino <hgeraldino@gmail.com>, Chris Egerton <chrise@aiven.io>
18 changed files
48 additions
58 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15287: Change NodeApiVersions.create() to support both zk and k…
    
…raft (#14185)

Reviewers: dengziming <dengziming1993@gmail.com>
3 changed files
7 additions
6 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15289: Support KRaft mode in RequestQuotaTest (#14201)
    
Enable kraft mode for RequestQuotaTest, there are 2 works left to be done.

Reviewers: dengziming <dengziming1993@gmail.com>
2 changed files
115 additions
43 deletions
DATE:Aug 14, 2023
-----------

KAFKA-14133: Migrate ActiveTaskCreatorTest, ChangelogTopicsTest and G…
    
…lobalProcessorContextImplTest to Mockito (#14209)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
57 additions
78 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15329: Make default remote.log.metadata.manager.class.name as t…
    
…opic based RLMM (#14202)

As described in the KIP here the default value of remote.log.metadata.manager.class.name should be TopicBasedRemoteLogMetadataManager

Reviewers: Luke Chen <showuon@gmail.com>, Kamal Chandraprakash <kchandraprakash@uber.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
17 additions
7 deletions
DATE:Aug 16, 2023
-----------

      MINOR: Add comment to onPartitionsLost override (#14121)
    
This adds comments to the ConsumerRebalanceListener overrides, in order to briefly explain why we are overriding these methods, when they are called, and what you can or can't do. Especially onPartitionsLost can create some confusion given the default implementation.

Reviewers: Luke Chen <showuon@gmail.com>, David Jacot <djacot@confluent.io>
1 changed file
5 additions
0 deletions
DATE:Aug 11, 2023
-----------

KAFKA-13197: fix GlobalKTable join/left-join semantics documentation. (…

…#14187)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
16 additions
32 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15336: Add ServiceLoader Javadocs for Connect plugins (#14194)
    
Reviewers: Chris Egerton <chrise@aiven.io>
9 changed files
29 additions
7 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15210: Mention vote should be open for at atleast 72 hours in t…
    
…he release script (#14183)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
0 deletions
DATE:Aug 16, 2023
-----------

KAFKA-7438: Replace Easymock & Powermock with Mockito in RocksDBMetri…
    
…csRecorderGaugesTest (#14190)

Reviewers: Christo Lolov <christololov@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
6 additions
13 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14538: Implement KRaft metadata transactions in QuorumController
    
Implement the QuorumController side of KRaft metadata transactions.

As specified in KIP-868, this PR creates a new metadata version, IBP_3_6_IV1, which contains the
three new records: AbortTransactionRecord, BeginTransactionRecord, EndTransactionRecord.

In order to make offset management unit-testable, this PR moves it out of QuorumController.java and
into OffsetControlManager.java. The general approach here is to track the "last stable offset," which is
calculated by looking at the latest committed offset and the in-progress transaction (if any). When
a transaction is aborted, we revert back to this last stable offset. We also revert back to it when
the controller is transitioning from active to inactive.

In a follow-up PR, we will add support for the transaction records in MetadataLoader. We will also
add support for automatically aborting pending transactions after a controller failover.

Reviewers: David Arthur <mumrah@gmail.com>
15 changed files
913 additions
159 deletions
DATE:Aug 14, 2023
-----------

KAFKA-14132: Replace Easymock & Powermock with Mockito in KafkaBasedL…
    
…ogTest (#14153)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
75 additions
164 deletions
DATE:Aug 11, 2023
-----------

KAFKA-14682: Report Mockito unused stubbings during Jenkins build (#1…

…4186)

* KAFKA-14682: Report Mockito unused stubbings during Jenkins build

* DO NOT MERGE: Add test case that should fail during Jenkins build

* Revert "DO NOT MERGE: Add test case that should fail during Jenkins build"

This reverts commit 8418b83.
1 changed file
1 addition
1 deletion
DATE:Aug 12, 2023
-----------

KAFKA-15102: Add replication.policy.internal.topic.separator.enabled …
    
…property to MirrorMaker 2 (KIP-949) (#14082)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
95 additions
3 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15030: Add connect-plugin-path command-line tool (#14064)
    
Reviewers: Chris Egerton <chrise@aiven.io>
21 changed files
1,576 additions
32 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15022: [10/N] docs for rack aware assignor (#14181)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
84 additions
4 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15295: Add config validation when remote storage is enabled on …
    
…a topic (#14176)

Add config validation which verifies that system level remote storage is enabled when enabling remote storage for a topic. In case verification fails, it throws InvalidConfigurationException.

Reviewers: Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>,  Luke Chen <showuon@gmail.com>
9 changed files
606 additions
65 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14937: Refactoring for client code to reduce boilerplate (#13990)
    
Move common code from the client implementations to the ClientUtils
class or (consumer) Utils class, where passible.

There are a number of places in the client code where the same basic
calls are made by more than one client implementation. Minor
refactoring will reduce the amount of boilerplate code necessary for
the client to construct its internal state.


Reviewers: Lianet Magrans <lianetmr@gmail.com>, Jun Rao <junrao@gmail.com>
11 changed files
422 additions
306 deletions
DATE:Aug 14, 2023
-----------

      MINOR: Fix SynchronizationTest classloaders sometimes not being paral…
    
…lel capable (#14177)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
16 additions
8 deletions
DATE:Aug 15, 2023
-----------

      MINOR: Fix the ZkMigrationState metric in KafkaController
    
This patch fixes an issue for ZK controllers where we were emitting the ZkMigrationState enum
rather than a value. This can lead to downstream failures with JMX metrics since the RMI protocol
will marshal the ZkMigrationState object returned by the gauge. Any downstream consumer of this
metric (like jconsole or a metrics exporter) will not be able to unmarshal the value since the
ZkMigrationState class will not be present.

The fix is simply to emit the byte value of this enum.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Alok Thatikunta <athatikunta@confluent.io>
2 changed files
13 additions
2 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15326: [5/N] Processing thread punctuation (#14001)
    
Implements punctuation inside processing threads. The scheduler
algorithm checks if a task that is not assigned currently can
be punctuated, and returns it when a worker thread asks for the
next task to be processed. Then, the processing thread runs all
punctuations in the punctionation queue.

Piggy-backed: take TaskExecutionMetadata into account when
processing records.

Reviewer: Bruno Cadonna <cadonna@apache.org>
9 changed files
293 additions
38 deletions
DATE:Aug 14, 2023
-----------

      MINOR: CommitRequestManager should only poll when the coordinator nod…
    
…e is known (#14179)

As title, we discovered a flaky bug during testing that the commit request manager would seldomly throw a NOT_COORDINATOR exception, which means the request was routed to a non-coordinator node. We discovered that if we don't check the coordinator node in the commitRequestManager, the request manager will pass on an empty node to the NetworkClientDelegate, which implies the request can be sent to any node in the cluster. This behavior is incorrect as the commit requests need to be routed to a coordinator node.

Because the timing coordinator's discovery during integration testing isn't entirely deterministic; therefore, the test became extremely flaky. After fixing this: The coordinator node is mandatory before attempt to enqueue these commit request to the NetworkClient.

Reviewers: Jun Rao <junrao@gmail.com>
2 changed files
38 additions
2 deletions
DATE:Aug 15, 2023
-----------

      MINOR: Refactor TierStateMachine related tests into a separate test f…
    
…ile (#13503)

This PR builds off of KAFKA-14685 and refactors any tests explicitly related to ReplicaFetcherTierStateMachine into a separate testing file ReplicaFetcherTierStateMachineTest.

Reviewers: Jun Rao <junrao@gmail.com>
6 changed files
697 additions
547 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15083: add config with "remote.log.metadata" prefix (#14151)
    
When configuring RLMM, the configs passed into configure method is the RemoteLogManagerConfig. But in RemoteLogManagerConfig, there's no configs related to remote.log.metadata.*, ex: remote.log.metadata.topic.replication.factor. So, even if users have set the config in broker, it'll never be applied.

This PR fixed the issue to allow users setting RLMM prefix: remote.log.metadata.manager.impl.prefix (default is rlmm.config.), and then, appending the desired remote.log.metadata.* configs, it'll pass into RLMM, including remote.log.metadata.common.client./remote.log.metadata.producer./ remote.log.metadata.consumer. prefixes.

Ex:

# default value
# remote.log.storage.manager.impl.prefix=rsm.config.
# remote.log.metadata.manager.impl.prefix=rlmm.config.

rlmm.config.remote.log.metadata.topic.num.partitions=50
rlmm.config.remote.log.metadata.topic.replication.factor=4

rsm.config.test=value

Reviewers: Christo Lolov <christololov@gmail.com>, Kamal Chandraprakash <kchandraprakash@uber.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
85 additions
11 deletions
DATE:Aug 11, 2023
-----------

KAFKA-7438: Replace Easymock & Powermock with Mockito in TableSourceN…
    
…odeTest (#14189)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
11 additions
16 deletions
DATE:Aug 12, 2023
-----------

      MINOR: Install ControllerServer metadata publishers sooner (#14215)
    
This patch is a follow up of #14169 that installs the metadata publishers before blocking on the authorizer future.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
25 additions
26 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14595: Move classes from ReassignPartitionsCommand to tools (#1…

…4172)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
11 changed files
658 additions
2 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15233: Add documentation for plugin.discovery and connect-plugi…
    
…n-path (KIP-898) (#14068)

Reviewers: Qichao Chu (@ex172000), Chris Egerton <chrise@aiven.io>
2 changed files
69 additions
1 deletion
DATE:Aug 10, 2023
-----------

      MINOR: Fix a race when query isUnderMinIsr (#14138)
    
When the leader becomes the follower, we first remove the ISR and then reset the leader. If we call isUnderMinIsr in between, we will get an answer with true which is a race bug.

Reviewers: Justine Olshan <jolshan@confluent.io>
2 changed files
56 additions
8 deletions
DATE:Aug 14, 2023
-----------

      MINOR: Fix streams task assignor tests (#14196)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
2 changed files
4 additions
4 deletions
DATE:Aug 12, 2023
-----------

      MINOR: Fix committed API in the PrototypeAsyncConsumer timeout (#14123)
    
Discovered the committed() API timeout during the integration test. After investigation, this is because the future was not completed in the ApplicationEventProcessor. Also added toString methods to the event class for debug purposes.

Reviewers: Jun Rao <junrao@gmail.com>
5 changed files
73 additions
24 deletions
DATE:Aug 11, 2023
-----------

KAFKA-14133: Migrato SessionCacheFlushListenerTest, TimestampedCache…
    
…FlushListenerTest and TimestampedTupleForwarderTest to Mockito (#14205)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
42 additions
53 deletions
DATE:Aug 16, 2023
-----------

KAFKA-7438: Replace EasyMock with Mockito in SessionStoreBuilderTest (#…

…14142)

Reviewers: Divij Vaidya <diviv@amazon.com>, Yash Mayya <yash.mayya@gmail.com>
1 changed file
15 additions
39 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15239: Fix system tests using producer performance service (#14092

)

Reviewers: Greg Harris <greg.harris@aiven.io>
7 changed files
7 additions
6 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15239: Fix ThroughputThrottler import-control (#14188)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
3 additions
0 deletions
DATE:Aug 10, 2023
-----------

KAFKA-14759: Move Mock, Schema, and Verifiable connectors to new test…
    
…-plugins module (#13302)

Reviewers: Hector Geraldino <hgeraldino@gmail.com>, Chris Egerton <chrise@aiven.io>
18 changed files
48 additions
58 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15287: Change NodeApiVersions.create() to support both zk and k…
    
…raft (#14185)

Reviewers: dengziming <dengziming1993@gmail.com>
3 changed files
7 additions
6 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15289: Support KRaft mode in RequestQuotaTest (#14201)
    
Enable kraft mode for RequestQuotaTest, there are 2 works left to be done.

Reviewers: dengziming <dengziming1993@gmail.com>
2 changed files
115 additions
43 deletions
DATE:Aug 14, 2023
-----------

KAFKA-14133: Migrate ActiveTaskCreatorTest, ChangelogTopicsTest and G…
    
…lobalProcessorContextImplTest to Mockito (#14209)

Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
57 additions
78 deletions
DATE:Aug 16, 2023
-----------

KAFKA-15329: Make default remote.log.metadata.manager.class.name as t…
    
…opic based RLMM (#14202)

As described in the KIP here the default value of remote.log.metadata.manager.class.name should be TopicBasedRemoteLogMetadataManager

Reviewers: Luke Chen <showuon@gmail.com>, Kamal Chandraprakash <kchandraprakash@uber.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
17 additions
7 deletions
DATE:Aug 16, 2023
-----------

      MINOR: Add comment to onPartitionsLost override (#14121)
    
This adds comments to the ConsumerRebalanceListener overrides, in order to briefly explain why we are overriding these methods, when they are called, and what you can or can't do. Especially onPartitionsLost can create some confusion given the default implementation.

Reviewers: Luke Chen <showuon@gmail.com>, David Jacot <djacot@confluent.io>
1 changed file
5 additions
0 deletions
DATE:Aug 11, 2023
-----------

KAFKA-13197: fix GlobalKTable join/left-join semantics documentation. (…

…#14187)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
16 additions
32 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15336: Add ServiceLoader Javadocs for Connect plugins (#14194)
    
Reviewers: Chris Egerton <chrise@aiven.io>
9 changed files
29 additions
7 deletions
DATE:Aug 15, 2023
-----------

KAFKA-15210: Mention vote should be open for at atleast 72 hours in t…
    
…he release script (#14183)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
0 deletions
DATE:Aug 16, 2023
-----------

KAFKA-7438: Replace Easymock & Powermock with Mockito in RocksDBMetri…
    
…csRecorderGaugesTest (#14190)

Reviewers: Christo Lolov <christololov@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
6 additions
13 deletions
DATE:Aug 15, 2023
-----------

KAFKA-14538: Implement KRaft metadata transactions in QuorumController
    
Implement the QuorumController side of KRaft metadata transactions.

As specified in KIP-868, this PR creates a new metadata version, IBP_3_6_IV1, which contains the
three new records: AbortTransactionRecord, BeginTransactionRecord, EndTransactionRecord.

In order to make offset management unit-testable, this PR moves it out of QuorumController.java and
into OffsetControlManager.java. The general approach here is to track the "last stable offset," which is
calculated by looking at the latest committed offset and the in-progress transaction (if any). When
a transaction is aborted, we revert back to this last stable offset. We also revert back to it when
the controller is transitioning from active to inactive.

In a follow-up PR, we will add support for the transaction records in MetadataLoader. We will also
add support for automatically aborting pending transactions after a controller failover.

Reviewers: David Arthur <mumrah@gmail.com>
15 changed files
913 additions
159 deletions
DATE:Aug 14, 2023
-----------

KAFKA-14132: Replace Easymock & Powermock with Mockito in KafkaBasedL…
    
…ogTest (#14153)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
75 additions
164 deletions
DATE:Aug 11, 2023
-----------

KAFKA-15189: only init remote topic metrics when enabled (#14133)
    
Only initialize remote topic metrics when system-wise remote storage is enabled to avoid impacting performance for existing brokers. Also add tests.

Reviewers: Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
24 changed files
236 additions
81 deletions
DATE:Aug 5, 2023
-----------

KAFKA-15022: [8/N] more tests for HAAssignor (#14164)
    
Part of KIP-925.

- Add more tests for HighAvailabilityTaskAssignor
- Remove null and optional check for RackAwareTaskAssignor
- Pass rack aware assignor configs to getMainConsumerConfigs so that they can be picked up in rebalance protocol
- Change STATELESS_NON_OVERLAP_COST to 0. It was a mistake to be 1. Stateless tasks should be moved without this cost.
- Update of existing tests

Reviewers: Matthias J. Sax <matthias@confluent.io>
16 changed files
820 additions
227 deletions
DATE:Aug 9, 2023
-----------

KAFKA-15244: Remove PluginType.from(Class) (#14089)
    
Reviewers: Chris Egerton <chrise@aiven.io>
17 changed files
246 additions
210 deletions
DATE:Aug 1, 2023
-----------

KAFKA-12969: Add broker level config synonyms for topic level tiered …
    
…storage configs (#14114)

KAFKA-12969: Add broker level config synonyms for topic level tiered storage configs.

Topic -> Broker Synonym:
local.retention.bytes -> log.local.retention.bytes
local.retention.ms -> log.local.retention.ms

We cannot add synonym for `remote.storage.enable` topic property as it depends on KIP-950

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
10 changed files
292 additions
67 deletions
DATE:Aug 3, 2023
-----------

KAFKA-15022: [9/N] use RackAwareTaskAssignor in StickyTaskAssignor (#…

…14178)

Part of KIP-925.

Use rack aware assignor in StickyTaskAssignor.

Reviewers: Matthias J. Sax <matthias@confluent.io>
13 changed files
935 additions
199 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15291: Connect plugins should declare a version (#14159)
    
Signed-off-by: Aindriu Lavelle <aindriu.lavelle@aiven.io>
Reviewers: Andrew Schofield, Greg Harris <greg.harris@aiven.io>
55 changed files
484 additions
54 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15022: [5/N] compute rack aware assignment for standby tasks (#…

…14108)

Part of KIP-925.

Reviewer: Matthias J. Sax <matthias@confluent.io>
7 changed files
882 additions
118 deletions
DATE:Aug 3, 2023
-----------

KAFKA-15031: Add plugin.discovery to Connect worker configuration (KI…
    
…P-898) (#14055)

Reviewers: Chris Egerton <chrise@aiven.io>
27 changed files
688 additions
7 deletions
DATE:Aug 8, 2023
-----------

KAFKA-15106: Fix AbstractStickyAssignor isBalanced predict (#13920)
    
in 3.5.0 AbstractStickyAssignor may run useless loop in performReassignments  because isBalanced have a trivial mistake, and result in rebalance timeout in some situation.

Co-authored-by: lixy <lixy@tuya.com>
Reviewers: Ritika Reddy <rreddy@confluent.io>, Philip Nee <pnee@confluent.io>, Kirk True <kirk@mustardgrain.com>, Guozhang Wang <wangguoz@gmail.com>
2 changed files
89 additions
2 deletions
DATE:Aug 3, 2023
-----------

      MINOR: Fix MiniKdc Java 17 issue in system tests (#14011)
    
Kafka system tests with Java version 17 are failing on this issue:

```python
TimeoutError("MiniKdc didn't finish startup",)
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/ducktape/tests/runner_client.py", line 186, in _do_run
    data = self.run_test()
  File "/usr/local/lib/python3.6/site-packages/ducktape/tests/runner_client.py", line 246, in run_test
    return self.test_context.function(self.test)
  File "/usr/local/lib/python3.6/site-packages/ducktape/mark/_mark.py", line 433, in wrapper
    return functools.partial(f, *args, **kwargs)(*w_args, **w_kwargs)
  File "/opt/kafka-dev/tests/kafkatest/sanity_checks/test_verifiable_producer.py", line 74, in test_simple_run
    self.kafka.start()
  File "/opt/kafka-dev/tests/kafkatest/services/kafka/kafka.py", line 635, in start
    self.start_minikdc_if_necessary(add_principals)
  File "/opt/kafka-dev/tests/kafkatest/services/kafka/kafka.py", line 596, in start_minikdc_if_necessary
    self.minikdc.start()
  File "/usr/local/lib/python3.6/site-packages/ducktape/services/service.py", line 265, in start
    self.start_node(node, **kwargs)
  File "/opt/kafka-dev/tests/kafkatest/services/security/minikdc.py", line 114, in start_node
    monitor.wait_until("MiniKdc Running", timeout_sec=60, backoff_sec=1, err_msg="MiniKdc didn't finish startup")
  File "/usr/local/lib/python3.6/site-packages/ducktape/cluster/remoteaccount.py", line 754, in wait_until
    allow_fail=True) == 0, **kwargs)
  File "/usr/local/lib/python3.6/site-packages/ducktape/utils/util.py", line 58, in wait_until
    raise TimeoutError(err_msg() if callable(err_msg) else err_msg) from last_exception
ducktape.errors.TimeoutError: MiniKdc didn't finish startup
```

Specifically, when one runs the test cases and looks at the logs of the MiniKdc:
```java
Exception in thread "main" java.lang.IllegalAccessException: class kafka.security.minikdc.MiniKdc cannot access class sun.security.krb5.Config (in module java.security.jgss) because module java.security.jgss does not export sun.security.krb5 to unnamed module @24959ca4
    at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392)
    at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:674)
    at java.base/java.lang.reflect.Method.invoke(Method.java:560)
    at kafka.security.minikdc.MiniKdc.refreshJvmKerberosConfig(MiniKdc.scala:268)
    at kafka.security.minikdc.MiniKdc.initJvmKerberosConfig(MiniKdc.scala:245)
    at kafka.security.minikdc.MiniKdc.start(MiniKdc.scala:123)
    at kafka.security.minikdc.MiniKdc$.start(MiniKdc.scala:375)
    at kafka.security.minikdc.MiniKdc$.main(MiniKdc.scala:366)
    at kafka.security.minikdc.MiniKdc.main(MiniKdc.scala)
```

This error is caused by the fact that sun.security module is no longer supported in Java 16 and higher. Related to the [1]. 
There are two ways how to solve it, and I present one of them. The second way is to export the ENV variable during the deployment of the containers using Ducktape in [2].

[1] - https://openjdk.org/jeps/396
[2] - https://github.com/apache/kafka/blob/trunk/tests/docker/ducker-ak#L308

Reviewers: Ismael Juma <ismael@juma.me.uk>, Luke Chen <showuon@gmail.com>
1 changed file
2 additions
0 deletions
DATE:Aug 7, 2023
-----------

KAFKA-15100; KRaft data race with the expiration service (#14141)
    
The KRaft client uses an expiration service to complete FETCH requests that have timed out. This expiration service uses a different thread from the KRaft polling thread. This means that it is unsafe for the expiration service thread to call tryCompleteFetchRequest. tryCompleteFetchRequest reads and updates a lot of states that is assumed to be only be read and updated from the polling thread.

The KRaft client now does not call tryCompleteFetchRequest when the FETCH request has expired. It instead will send the FETCH response that was computed when the FETCH request was first handled.

This change also fixes a bug where the KRaft client was not sending the FETCH response immediately, if the response contained a diverging epoch or snapshot id.

Reviewers: Jason Gustafson <jason@confluent.io>
9 changed files
152 additions
37 deletions
DATE:Aug 9, 2023
-----------

KAFKA-15202: Fix MM2 offset translation when syncs are variably spaced (
    
#14156)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
116 additions
40 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15288: Change BrokerApiVersionsCommandTest to support kraft mode (
    
#14175)

Use ApiKeys.clientApis() to replace ApiKeys.zkBrokerApis() to support kraft mode.

Reviewers: dengziming <dengziming1993@gmail.com>
3 changed files
57 additions
33 deletions
DATE:Aug 10, 2023
-----------

KAFKA-14595: Move AdminUtils to server-common (#14096)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
18 changed files
409 additions
339 deletions
DATE:Aug 9, 2023
-----------

      MINOR: Fix debug logs to display TimeIndexOffset (#13935)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
9 additions
2 deletions
DATE:Aug 3, 2023
-----------

KAFKA-13187: Replace EasyMock / PowerMock with Mockito in Distributed…
    
…HerderTest (#14102)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
1,557 additions
2,460 deletions
DATE:Aug 10, 2023
-----------

KAFKA-15022: [6/N] add rack aware assignor configs and update standby…
    
… optimizer (#14150)

Part of KIP-925.

- Add configs for rack aware assignor
- Update standby optimizer in RackAwareTaskAssignor to have more rounds
- Refactor some method in RackAwareTaskAssignorTest to test utils so that they can also be used in HighAvailabilityTaskAssignorTest and other tests

Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
605 additions
373 deletions
DATE:Aug 7, 2023
-----------

KAFKA-15022: [7/N] use RackAwareTaskAssignor in HAAssignor (#14139)
    
Part of KIP-915.

- Change TaskAssignor interface to take RackAwareTaskAssignor
- Integrate RackAwareTaskAssignor to StreamsPartitionAssignor and HighAvailabilityTaskAssignor
- Update HAAssignor tests

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>, Matthias J. Sax <matthias@confluent.io>
12 changed files
714 additions
140 deletions
DATE:Aug 8, 2023
-----------

KAFKA-15318: Update the Authorizer via AclPublisher (#14169)
    
On the controller, move publishing acls to the Authorizer into a dedicated MetadataPublisher,
AclPublisher. This publisher listens for notifications from MetadataLoader, and receives only
committed data. This brings the controller side in line with how the broker has always worked. It
also avoids some ugly code related to publishing directly from the QuorumController. Most important
of all, it clears the way to implement metadata transactions without worrying about Authorizer
state (since it will be handled by the MetadataLoader, along with other metadata image state).

In AclsDelta, we can remove isSnapshotDelta. We always know when the MetadataLoader is giving us a
snapshot. Also bring AclsDelta in line with the other delta classes, where completeSnapshot
calculates the diff between the previous image and the next one. We don't use this delta (since we
just apply the image directly to the authorizer) but we should have it, for consistency.

Finally, change MockAclMutator to avoid the need to subclass AclControlManager.

Reviewers: David Arthur <mumrah@gmail.com>
15 changed files
252 additions
336 deletions
DATE:Aug 10, 2023
-----------

      add changes made before merge (#14137)
    
Change in response to KIP-941.

New PR due to merge issue.

Changes line 57 in the RangeQuery class file from:

public static <K, V> RangeQuery<K, V> withRange(final K lower, final K upper) {
    return new RangeQuery<>(Optional.of(lower), Optional.of(upper));
}
to

public static <K, V> RangeQuery<K, V> withRange(final K lower, final K upper) {
     return new RangeQuery<>(Optional.ofNullable(lower), Optional.ofNullable(upper));
 }
Testing strategy:

Since null values can now be entered in RangeQuerys in order to receive full scans, I changed the logic defining query starting at line 1085 in IQv2StoreIntegrationTest.java from:

        final RangeQuery<Integer, V> query;
        if (lower.isPresent() && upper.isPresent()) {
            query = RangeQuery.withRange(lower.get(), upper.get());
        } else if (lower.isPresent()) {
            query = RangeQuery.withLowerBound(lower.get());
        } else if (upper.isPresent()) {
            query = RangeQuery.withUpperBound(upper.get());
        } else {
            query = RangeQuery.withNoBounds();
        }
to

query = RangeQuery.withRange(lower.orElse(null), upper.orElse(null));
because different combinations of isPresent() in the bounds is no longer necessary.

Reviewers: John Roesler <vvcephei@apache.org>, Bill Bejeck <bbejeck@apache.org>
2 changed files
4 additions
10 deletions
DATE:Aug 8, 2023
-----------

KAFKA-15107: Support custom metadata for remote log segment (#13984)
    
* KAFKA-15107: Support custom metadata for remote log segment

This commit does the changes discussed in the KIP-917. Mainly, changes the `RemoteStorageManager` interface in order to return `CustomMetadata` and then ensures these custom metadata are stored, propagated, (de-)serialized correctly along with the standard metadata throughout the whole lifecycle. It introduces the `remote.log.metadata.custom.metadata.max.size` to limit the custom metadata size acceptable by the broker and stop uploading in case a piece of metadata exceeds this limit.

On testing:
1. `RemoteLogManagerTest` checks the case when a piece of custom metadata is larger than the configured limit.
2. `RemoteLogSegmentMetadataTest` checks if `createWithUpdates` works correctly, including custom metadata.
3. `RemoteLogSegmentMetadataTransformTest`, `RemoteLogSegmentMetadataSnapshotTransformTest`, and `RemoteLogSegmentMetadataUpdateTransformTest` were added to test the corresponding class (de-)serialization, including custom metadata.
4. `FileBasedRemoteLogMetadataCacheTest` checks if custom metadata are being correctly saved and loaded to a file (indirectly, via `equals`).
5. `RemoteLogManagerConfigTest` checks if the configuration setting is handled correctly.

Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>, Divij Vaidya <diviv@amazon.com>
33 changed files
700 additions
60 deletions
DATE:Aug 4, 2023
-----------

KAFKA-15022: [4/N] use client tag assignor for rack aware standby tas…
    
…k assignment (#14097)

Part of KIP-925.

For rack aware standby task assignment, we can either use the already existing "rack tags" or as a fall-back the newly added "rack.id". This PR unifies both without the need to change the actual standby task assignment logic.

Reviewers: Matthias J. Sax <matthias@confluent.io>
11 changed files
472 additions
192 deletions
DATE:Aug 2, 2023
-----------

KAFKA-15271: Historicalterator can exposes elements that are too new (#…

…14125)

A HistoricalIterator at epoch N is supposed to only reveal elements at epoch N or earlier. However,
due to a bug, we sometimes will reveal elements which are at a newer epoch than N. The bug does
not affect elements that are in the latest epoch (aka topTier). It only affects elements that are
newer than N, but which do not persist until the latest epoch.  This PR fixes the bug and adds a
unit test for this case.

Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
19 additions
2 deletions
DATE:Aug 8, 2023
-----------

KAFKA-7438: Replace PowerMockRunner with MockitoJUnitRunner in RetryU…
    
…tilTest (#14143)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
7 additions
7 deletions
DATE:Aug 3, 2023
-----------

      MINOR: Use Mockito's strict stubs functionality for Connect tests and…
    
… cleanup unused stubs (#14166)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
21 changed files
68 additions
29 deletions
DATE:Aug 9, 2023
-----------

KAFKA-10199: Change to RUNNING if no pending task to recycle exist (#…

…14145)

A stream thread should only change to RUNNING if there are no
active tasks in restoration in the state updater and if there
are no pending tasks to recycle.

There are situations in which a stream thread might only have
standby tasks that are recycled to active task after a rebalance.
In such situations, the stream thread might be faster in checking
active tasks in restoration then the state updater removing the
standby task to recycle from the state updater. If that happens
the stream thread changes to RUNNING although it should wait until
the standby tasks are recycled to active tasks and restored.

Reviewers: Walker Carlson <wcarlson@confluent.io>, Matthias J. Sax <matthias@confluent.io>
5 changed files
64 additions
2 deletions
DATE:Aug 4, 2023
-----------

KAFKA-15220: Do not returned fenced brokers from getAliveBrokerNode (#…

…14050)

getAliveBrokerNode returns fenced brokers as alive which is inconsistent with methods like
getAliveBrokerNodes. Add a filter to not return fenced brokers and adds a test to validate that
the two functions are consistent.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
39 additions
3 deletions
DATE:Aug 10, 2023
-----------

      MINOR: Add test for describe topic with ID (#14110)
    
* MINOR: Add test for describe topic with ID

Add a simple test to verify topic description with topic IDs.

Reviewers: Divij Vaidya <diviv@amazon.com>, dengziming <dengziming1993@gmail.com>
1 changed file
69 additions
0 deletions
DATE:Aug 10, 2023
-----------

      MINOR: Improve JavaDocs of KafkaStreams context.commit() (#14163)
    
Reviewers: Bill Bejeck <bill@confluent.io>
2 changed files
7 additions
3 deletions
DATE:Aug 8, 2023
-----------

      MINOR: improve logging for FK-join (#14105)
    
Reviewers: Colt McNealy <colt@littlehorse.io>, Walker Carlson <wcarlson@confluent.io>
1 changed file
5 additions
0 deletions
DATE:Aug 5, 2023
-----------

KAFKA-15236: Rename tiered storage metrics (#14074)
    
Rename tiered storage metrics

Reviewers: Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
5 changed files
68 additions
68 deletions
DATE:Aug 2, 2023
-----------

KAFKA-15272: Fix the logic which finds candidate log segments to uplo…
    
…ad it to tiered storage (#14128)

In tiered storage, a segment is eligible for deletion from local disk when it gets uploaded to the remote storage.

If the topic active segment contains some messages and there are no new incoming messages, then the active segment gets rotated to passive segment after the configured log.roll.ms timeout.

The logic to find the candidate segment in RemoteLogManager does not include the recently rotated passive segment as eligible to upload it to remote storage so the passive segment won't be removed even after if it breaches by retention time/size. (ie) Topic won't be empty after it becomes stale.

Added unit test to cover the scenario which will fail without this patch.

Reviewers: Christo Lolov <lolovc@amazon.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
2 changed files
146 additions
36 deletions
DATE:Aug 2, 2023
-----------

KAFKA-15312; Force channel before atomic file move (#14162)
    
On ext4 file systems we have seen snapshots with zero-length files. This is possible if
the file is closed and moved before forcing the channel to write to disk.

Reviewers: Ron Dagostino <rndgstn@gmail.com>, Alok Thatikunta <athatikunta@confluent.io>
1 changed file
3 additions
0 deletions
DATE:Aug 8, 2023
-----------

KAFKA-14661: Upgrade Zookeeper to 3.8.1 (#13260)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Mickael Maison <mickael.maison@gmail.com>
4 changed files
19 additions
3 deletions
DATE:Aug 1, 2023
-----------

      MINOR: update Kafka Streams state.dir doc (#14155)
    
Default state directory was changes in 2.8.0 release (cf KAFKA-10604)

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Aug 6, 2023
-----------

KAFKA-15232: Move ToolsUtils to tools (#14066)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
5 changed files
5 additions
10 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15222: upgrade zinc scala plugin to 1.9.2 (#14060)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 21, 2023
-----------

KAFKA-14712: Produce correct error msg with correct metadataversion (#…

…13773)

Fix the confusing error message in ImageWriterOptions

Reviewers: Luke Chen <showuon@gmail.com>, David Arthur <mumrah@gmail.com>
3 changed files
38 additions
4 deletions
DATE:Jul 24, 2023
-----------

KAFKA-14936: Check the versioned table's history retention and compar…
    
…e to grace period (4/N) (#13942)

Check the history retention of the ktable of the grace period join.

Reviewers: Reviewers: Victoria Xia <victoria.xia@confluent.io>, Bruno Cadonna <cadonna@apache.org>
4 changed files
98 additions
3 deletions
DATE:Jul 20, 2023
-----------

KAFKA-14500; [5/N] Implement JoinGroup protocol in new GroupCoordinat…
    
…or (#13870)

This patch implements the existing JoinGroup protocol within the new group coordinator. 

Some notable differences:
* Methods return a CoordinatorResult to the runtime framework, which includes records to append to the log as well as a future to complete after the append succeeds/fails.
* The coordinator runtime ensures that only a single thread will be processing a group at any given time, therefore there is no more locking on groups.
* Instead of using on purgatories, we rely on the Timer interface to schedule/cancel delayed operations.

Reviewers: David Jacot <djacot@confluent.io>
25 changed files
4,981 additions
616 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14499: [1/N] Introduce OffsetCommit API version 9 and add new S…
    
…taleMemberEpochException error (#14046)

This patch does a few things:
1) It introduces version 9 of the OffsetCommit API. This new version has no schema changes but it can return a StaleMemberEpochException if the new consumer group protocol is used. Note the use of `"latestVersionUnstable": true` in the request schema. This means that this new version is not available yet unless activated.
2) It renames the `generationId` field in the request to `GenerationIdOrMemberEpoch`. This is backward compatible change.
3) It introduces the new StaleMemberEpochException error.
4) It does a minor refactoring in OffsetCommitRequest class.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Arthur <mumrah@gmail.com>, Justine Olshan <jolshan@confluent.io>
20 changed files
146 additions
75 deletions
DATE:Jul 21, 2023
-----------

      MINOR: Upgrade Gradle wrapper version to 8.2.1 (#14032)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
4 additions
4 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14469: Add MirrorMaker configs to table of contents in docs page (
    
#14041)

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
2 additions
1 deletion
DATE:Jul 20, 2023
-----------

      MINOR: Update docs to include ZK deprecation notice and information (#…

…14031)

Reviewers: Ismael Juma <ismael@confluent.io>, Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>, Matthias J. Sax <matthias@confluent.io>
1 changed file
17 additions
1 deletion
DATE:Jul 18, 2023
-----------

KAFKA-15091: Fix misleading Javadoc for SourceTask::commit (#13948)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
4 additions
3 deletions
DATE:Jul 18, 2023
-----------

KAFKA-14950: implement assign() and assignment() (#13797)
    
We will explicitly send an assignment change event to the background thread to invoke auto-commit if the group.id is configured. After updating the subscription state, a NewTopicsMetadataUpdateRequestEvent will also be sent to the background thread to update the metadata.

Co-authored-by: Kirk True <kirk@kirktrue.pro>
Reviewers: Jun Rao <junrao@gmail.com>
11 changed files
269 additions
25 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15022: [2/N] introduce graph to compute min cost (#13996)
    
Part of KIP-925.

Reviewers: Matthias J. Sax <matthias@confluent.io>
4 changed files
793 additions
2 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15176: add tests for tiered storage metrics (#13999)
    
Added tests for metrics:
1. RemoteLogReaderTaskQueueSize
2. RemoteLogReaderAvgIdlePercent
3. RemoteLogManagerTasksAvgIdlePercent

Also, added tests for OffsetOutOfRangeException will be thrown while reading logs

Reviewers: Christo Lolov <christololov@gmail.com>, Satish Duggana <satishd@apache.org>
5 changed files
360 additions
15 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15150: Add ServiceLoaderScanner implementation (#13971)
    
Reviewers: Chris Egerton <chris.egerton@aiven.io>
20 changed files
454 additions
72 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15199: Remove Leading and Trailing Spaces in release.py (#14035)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
16 additions
8 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15168: Handle overlapping remote log segments in RemoteLogMetad…
    
…ata cache (#14004)

KAFKA-15168: Handle overlapping remote log segments in RemoteLogMetadata cache

Reviewers: Satish Duggana <satishd@apache.org>, Viktor Nikitash <nikitashvictor@pdffiller.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Abhijeet Kumar <abhijeet.cse.kgp@gmail.com>
2 changed files
224 additions
6 deletions
DATE:Jul 24, 2023
-----------

KAFKA-15141: Initialize logger statically on hot codepaths (#13949)
    
Log4j based loggers use `org.apache.logging.log4j.spi.AbstractLoggerAdapter::getContext`
which invokes StackLocatorUtil to walk the stacktrace. This operation is quite CPU intensive
and is performed each time during instantiation.

To avoid walking the stack often, this change uses a static variable to initialize the logger
for a few classes which seem to be instantiated frequently.

Reviewers: Divij Vaidya <diviv@amazon.com>, Ismael Juma <ismael@juma.me.uk>
2 changed files
28 additions
2 deletions
DATE:Jul 19, 2023
-----------

      MINOR: Fix Connect compatibility javadocs to use NoSuchMethodError in…
    
…stead of NoSuchMethodException (#14036)

Reviewed-by: Greg Harris <greg.harris@aiven.io>
2 changed files
2 additions
2 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14669: Use the generated docs for MirrorMaker configs in the doc (
    
#13658)

Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
276 additions
252 deletions
DATE:Jul 18, 2023
-----------

KAFKA-13431 (KIP-793): Expose the original pre-transform topic partit…
    
…ion and offset in sink records (#14024)

Reviewers: Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
8 changed files
263 additions
31 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14734: Use CommandDefaultOptions in StreamsResetter (#13983)
    
This PR adds CommandDefaultOptions usage like in the other joptsimple based tools. It also moves the associated unit test class from streams to tools module as discussed in #13127 (comment)

Reviewers:  Luke Chen <showuon@gmail.com>, Bruno Cadonna <cadonna@apache.org>, Sagar Rao <sagarmeansocean@gmail.com>
5 changed files
293 additions
254 deletions
DATE:Jul 20, 2023
-----------

      MINOR: add JDK 20 build support to README (#14061)
    
Adding the value 20 to the JDK version that can build Apache Kafka into README.md

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 21, 2023
-----------

      MINOR: Minor logging and doc related improvements in topic-based RLMM…
    
… consumer-manager/task (#14045)

Improved logging and docs on consumer manager/task call paths.

Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
8 changed files
73 additions
50 deletions
DATE:Jul 22, 2023
-----------

      MINOR: Delete unneeded classgraph-MIT license (#14040)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
0 additions
21 deletions
DATE:Jul 20, 2023
-----------

KAFKA-10579: Upgrade reflections from 0.9.12 to 0.10.2 (#14029)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Chris Egerton <chris.egerton@aiven.io>
3 changed files
7 additions
29 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15194: Prepend offset in the filenames used by LocalTieredStora…
    
…ge (#14057)

Reviewers: Divij Vaidya <diviv@amazon.com>
4 changed files
77 additions
70 deletions
DATE:Jul 22, 2023
-----------

KAFKA-14499: [2/N] Add OffsetCommit record & related (#14047)
    
This patch does a few things:
1) It introduces the `OffsetAndMetadata` class which hold the committed offsets in the group coordinator.
2) It adds methods to deal with OffsetCommit records to `RecordHelpers`.
3) It adds `MetadataVersion#offsetCommitValueVersion` to get the version of the OffsetCommit value record that should be used.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Arthur <mumrah@gmail.com>, Justine Olshan <jolshan@confluent.io>
7 changed files
409 additions
0 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14133: Migrate various mocks in TaskManagerTest to Mockito (#13874

)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
41 additions
56 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15162: Reflectively find plugins in parent ClassLoaders that ar…
    
…en't on the classpath (#13977)

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewed-by: Chris Egerton <chris.egerton@aiven.io>
4 changed files
32 additions
5 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14760: Move ThroughputThrottler from tools to clients, remove t…
    
…ools dependency from connect-runtime (#13313)

Reviewers: Ismael Juma <ismael@juma.me.uk>
11 changed files
18 additions
14 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15216: InternalSinkRecord::newRecord should not ignore new head…
    
…ers (#14044)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
46 additions
3 deletions
DATE:Jul 20, 2023
-----------

KAFKA-14591: Move DeleteRecordsCommand to tools (#13278)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
21 changed files
408 additions
168 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14953: Add tiered storage related metrics (#13944)
    
* KAFKA-14953: Adding RemoteLogManager metrics
In this PR, I have added the following metrics that are related to tiered storage mentioned in[ KIP-405](https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage).
|Metric|Description|
|-----------------------------------------|--------------------------------------------------------------|
| RemoteReadRequestsPerSec                    | Number of remote storage read requests per second               |
| RemoteWriteRequestsPerSec                    | Number of remote storage write requests per second              |
| RemoteBytesInPerSec                                | Number of bytes read from remote storage per second           |
| RemoteReadErrorsPerSec                          | Number of remote storage read errors per second                   |
| RemoteBytesOutPerSec                             | Number of bytes copied to remote storage per second            |
| RemoteWriteErrorsPerSec                          | Number of remote storage write errors per second                   |
| RemoteLogReaderTaskQueueSize             | Number of remote storage read tasks pending for execution.  |
| RemoteLogReaderAvgIdlePercent             | Average idle percent of the remote storage reader thread pool|
| RemoteLogManagerTasksAvgIdlePercent | Average idle percent of RemoteLogManager thread pool          |

Added unit tests for all the rate metrics.

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Staniel Yao<yaolixinylx@gmail.com>, hudeqi<1217150961@qq.com>, Satish Duggana <satishd@apache.org>
13 changed files
313 additions
21 deletions
DATE:Jul 18, 2023
-----------

KAFKA-15211: Mock InvalidParameterException in DistributedConfigTest (#…

…14039)

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewed-by: Chris Egerton <chris.egerton@aiven.io>
1 changed file
9 additions
2 deletions
DATE:Jul 19, 2023
-----------

      MINOR Fix the build failure (#14065)
    
Fixing the build failure caused by the earlier commit 27ea025 


```
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:3526:77: the result type of an implicit conversion must be more specific than Object
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:3530:70: the result type of an implicit conversion must be more specific than Object
[Warn] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:23:21: imported `QuorumTestHarness` is permanently hidden by definition of object QuorumTestHarness in package server
[Warn] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:29:21: imported `QuorumTestHarness` is permanently hidden by definition of object QuorumTestHarness in package server
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1438:15: ambiguous reference to overloaded definition,
both method doReturn in class Mockito of type (x$1: Any, x$2: Object*)org.mockito.stubbing.Stubber
and  method doReturn in class Mockito of type (x$1: Any)org.mockito.stubbing.Stubber
match argument types (kafka.log.UnifiedLog)
```

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
3 additions
3 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15232: Move ToolsUtils to tools (#14066)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
5 changed files
5 additions
10 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15222: upgrade zinc scala plugin to 1.9.2 (#14060)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 21, 2023
-----------

KAFKA-14712: Produce correct error msg with correct metadataversion (#…

…13773)

Fix the confusing error message in ImageWriterOptions

Reviewers: Luke Chen <showuon@gmail.com>, David Arthur <mumrah@gmail.com>
3 changed files
38 additions
4 deletions
DATE:Jul 24, 2023
-----------

KAFKA-14936: Check the versioned table's history retention and compar…
    
…e to grace period (4/N) (#13942)

Check the history retention of the ktable of the grace period join.

Reviewers: Reviewers: Victoria Xia <victoria.xia@confluent.io>, Bruno Cadonna <cadonna@apache.org>
4 changed files
98 additions
3 deletions
DATE:Jul 20, 2023
-----------

KAFKA-14500; [5/N] Implement JoinGroup protocol in new GroupCoordinat…
    
…or (#13870)

This patch implements the existing JoinGroup protocol within the new group coordinator. 

Some notable differences:
* Methods return a CoordinatorResult to the runtime framework, which includes records to append to the log as well as a future to complete after the append succeeds/fails.
* The coordinator runtime ensures that only a single thread will be processing a group at any given time, therefore there is no more locking on groups.
* Instead of using on purgatories, we rely on the Timer interface to schedule/cancel delayed operations.

Reviewers: David Jacot <djacot@confluent.io>
25 changed files
4,981 additions
616 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14499: [1/N] Introduce OffsetCommit API version 9 and add new S…
    
…taleMemberEpochException error (#14046)

This patch does a few things:
1) It introduces version 9 of the OffsetCommit API. This new version has no schema changes but it can return a StaleMemberEpochException if the new consumer group protocol is used. Note the use of `"latestVersionUnstable": true` in the request schema. This means that this new version is not available yet unless activated.
2) It renames the `generationId` field in the request to `GenerationIdOrMemberEpoch`. This is backward compatible change.
3) It introduces the new StaleMemberEpochException error.
4) It does a minor refactoring in OffsetCommitRequest class.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Arthur <mumrah@gmail.com>, Justine Olshan <jolshan@confluent.io>
20 changed files
146 additions
75 deletions
DATE:Jul 21, 2023
-----------

      MINOR: Upgrade Gradle wrapper version to 8.2.1 (#14032)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
3 changed files
4 additions
4 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14469: Add MirrorMaker configs to table of contents in docs page (
    
#14041)

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
2 additions
1 deletion
DATE:Jul 20, 2023
-----------

      MINOR: Update docs to include ZK deprecation notice and information (#…

…14031)

Reviewers: Ismael Juma <ismael@confluent.io>, Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>, Matthias J. Sax <matthias@confluent.io>
1 changed file
17 additions
1 deletion
DATE:Jul 18, 2023
-----------

KAFKA-15091: Fix misleading Javadoc for SourceTask::commit (#13948)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
4 additions
3 deletions
DATE:Jul 18, 2023
-----------

KAFKA-14950: implement assign() and assignment() (#13797)
    
We will explicitly send an assignment change event to the background thread to invoke auto-commit if the group.id is configured. After updating the subscription state, a NewTopicsMetadataUpdateRequestEvent will also be sent to the background thread to update the metadata.

Co-authored-by: Kirk True <kirk@kirktrue.pro>
Reviewers: Jun Rao <junrao@gmail.com>
11 changed files
269 additions
25 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15022: [2/N] introduce graph to compute min cost (#13996)
    
Part of KIP-925.

Reviewers: Matthias J. Sax <matthias@confluent.io>
4 changed files
793 additions
2 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15176: add tests for tiered storage metrics (#13999)
    
Added tests for metrics:
1. RemoteLogReaderTaskQueueSize
2. RemoteLogReaderAvgIdlePercent
3. RemoteLogManagerTasksAvgIdlePercent

Also, added tests for OffsetOutOfRangeException will be thrown while reading logs

Reviewers: Christo Lolov <christololov@gmail.com>, Satish Duggana <satishd@apache.org>
5 changed files
360 additions
15 deletions
DATE:Jul 21, 2023
-----------

KAFKA-15150: Add ServiceLoaderScanner implementation (#13971)
    
Reviewers: Chris Egerton <chris.egerton@aiven.io>
20 changed files
454 additions
72 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15199: Remove Leading and Trailing Spaces in release.py (#14035)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
16 additions
8 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15168: Handle overlapping remote log segments in RemoteLogMetad…
    
…ata cache (#14004)

KAFKA-15168: Handle overlapping remote log segments in RemoteLogMetadata cache

Reviewers: Satish Duggana <satishd@apache.org>, Viktor Nikitash <nikitashvictor@pdffiller.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Abhijeet Kumar <abhijeet.cse.kgp@gmail.com>
2 changed files
224 additions
6 deletions
DATE:Jul 24, 2023
-----------

KAFKA-15141: Initialize logger statically on hot codepaths (#13949)
    
Log4j based loggers use `org.apache.logging.log4j.spi.AbstractLoggerAdapter::getContext`
which invokes StackLocatorUtil to walk the stacktrace. This operation is quite CPU intensive
and is performed each time during instantiation.

To avoid walking the stack often, this change uses a static variable to initialize the logger
for a few classes which seem to be instantiated frequently.

Reviewers: Divij Vaidya <diviv@amazon.com>, Ismael Juma <ismael@juma.me.uk>
2 changed files
28 additions
2 deletions
DATE:Jul 19, 2023
-----------

      MINOR: Fix Connect compatibility javadocs to use NoSuchMethodError in…
    
…stead of NoSuchMethodException (#14036)

Reviewed-by: Greg Harris <greg.harris@aiven.io>
2 changed files
2 additions
2 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14669: Use the generated docs for MirrorMaker configs in the doc (
    
#13658)

Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
276 additions
252 deletions
DATE:Jul 18, 2023
-----------

KAFKA-13431 (KIP-793): Expose the original pre-transform topic partit…
    
…ion and offset in sink records (#14024)

Reviewers: Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
8 changed files
263 additions
31 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14734: Use CommandDefaultOptions in StreamsResetter (#13983)
    
This PR adds CommandDefaultOptions usage like in the other joptsimple based tools. It also moves the associated unit test class from streams to tools module as discussed in #13127 (comment)

Reviewers:  Luke Chen <showuon@gmail.com>, Bruno Cadonna <cadonna@apache.org>, Sagar Rao <sagarmeansocean@gmail.com>
5 changed files
293 additions
254 deletions
DATE:Jul 20, 2023
-----------

      MINOR: add JDK 20 build support to README (#14061)
    
Adding the value 20 to the JDK version that can build Apache Kafka into README.md

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 21, 2023
-----------

      MINOR: Minor logging and doc related improvements in topic-based RLMM…
    
… consumer-manager/task (#14045)

Improved logging and docs on consumer manager/task call paths.

Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
8 changed files
73 additions
50 deletions
DATE:Jul 22, 2023
-----------

      MINOR: Delete unneeded classgraph-MIT license (#14040)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
0 additions
21 deletions
DATE:Jul 20, 2023
-----------

KAFKA-10579: Upgrade reflections from 0.9.12 to 0.10.2 (#14029)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Chris Egerton <chris.egerton@aiven.io>
3 changed files
7 additions
29 deletions
DATE:Jul 19, 2023
-----------

KAFKA-15194: Prepend offset in the filenames used by LocalTieredStora…
    
…ge (#14057)

Reviewers: Divij Vaidya <diviv@amazon.com>
4 changed files
77 additions
70 deletions
DATE:Jul 22, 2023
-----------

KAFKA-14499: [2/N] Add OffsetCommit record & related (#14047)
    
This patch does a few things:
1) It introduces the `OffsetAndMetadata` class which hold the committed offsets in the group coordinator.
2) It adds methods to deal with OffsetCommit records to `RecordHelpers`.
3) It adds `MetadataVersion#offsetCommitValueVersion` to get the version of the OffsetCommit value record that should be used.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, David Arthur <mumrah@gmail.com>, Justine Olshan <jolshan@confluent.io>
7 changed files
409 additions
0 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14133: Migrate various mocks in TaskManagerTest to Mockito (#13874

)

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
41 additions
56 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15162: Reflectively find plugins in parent ClassLoaders that ar…
    
…en't on the classpath (#13977)

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewed-by: Chris Egerton <chris.egerton@aiven.io>
4 changed files
32 additions
5 deletions
DATE:Jul 19, 2023
-----------

KAFKA-14760: Move ThroughputThrottler from tools to clients, remove t…
    
…ools dependency from connect-runtime (#13313)

Reviewers: Ismael Juma <ismael@juma.me.uk>
11 changed files
18 additions
14 deletions
DATE:Jul 20, 2023
-----------

KAFKA-15216: InternalSinkRecord::newRecord should not ignore new head…
    
…ers (#14044)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
46 additions
3 deletions
DATE:Jul 20, 2023
-----------

KAFKA-14591: Move DeleteRecordsCommand to tools (#13278)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
21 changed files
408 additions
168 deletions
DATE:Jul 21, 2023
-----------

KAFKA-14953: Add tiered storage related metrics (#13944)
    
* KAFKA-14953: Adding RemoteLogManager metrics
In this PR, I have added the following metrics that are related to tiered storage mentioned in[ KIP-405](https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage).
|Metric|Description|
|-----------------------------------------|--------------------------------------------------------------|
| RemoteReadRequestsPerSec                    | Number of remote storage read requests per second               |
| RemoteWriteRequestsPerSec                    | Number of remote storage write requests per second              |
| RemoteBytesInPerSec                                | Number of bytes read from remote storage per second           |
| RemoteReadErrorsPerSec                          | Number of remote storage read errors per second                   |
| RemoteBytesOutPerSec                             | Number of bytes copied to remote storage per second            |
| RemoteWriteErrorsPerSec                          | Number of remote storage write errors per second                   |
| RemoteLogReaderTaskQueueSize             | Number of remote storage read tasks pending for execution.  |
| RemoteLogReaderAvgIdlePercent             | Average idle percent of the remote storage reader thread pool|
| RemoteLogManagerTasksAvgIdlePercent | Average idle percent of RemoteLogManager thread pool          |

Added unit tests for all the rate metrics.

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Staniel Yao<yaolixinylx@gmail.com>, hudeqi<1217150961@qq.com>, Satish Duggana <satishd@apache.org>
13 changed files
313 additions
21 deletions
DATE:Jul 18, 2023
-----------

KAFKA-15211: Mock InvalidParameterException in DistributedConfigTest (#…

…14039)

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewed-by: Chris Egerton <chris.egerton@aiven.io>
1 changed file
9 additions
2 deletions
DATE:Jul 19, 2023
-----------

      MINOR Fix the build failure (#14065)
    
Fixing the build failure caused by the earlier commit 27ea025 


```
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:3526:77: the result type of an implicit conversion must be more specific than Object
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:3530:70: the result type of an implicit conversion must be more specific than Object
[Warn] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:23:21: imported `QuorumTestHarness` is permanently hidden by definition of object QuorumTestHarness in package server
[Warn] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:29:21: imported `QuorumTestHarness` is permanently hidden by definition of object QuorumTestHarness in package server
[Error] /Users/satishd/repos/apache-kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1438:15: ambiguous reference to overloaded definition,
both method doReturn in class Mockito of type (x$1: Any, x$2: Object*)org.mockito.stubbing.Stubber
and  method doReturn in class Mockito of type (x$1: Any)org.mockito.stubbing.Stubber
match argument types (kafka.log.UnifiedLog)
```

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
3 additions
3 deletions
DATE:Jul 21, 2023
-----------

KAFKA-12261: Mention about potential delivery loss on increasing part…
    
…ition when auto.offset.reset = latest (#10167)

Splitting partitions while setting auto.offset.reset to latest may cause message delivery loss, but users might not be aware about that since currently it isn't documented anywhere.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
8 additions
1 deletion
DATE:Jul 14, 2023
-----------

      MINOR: Capture build scans on ge.apache.org to benefit from deep buil…
    
…d insights (#13676)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Ismael Juma <ismael@juma.me.uk>, Divij Vaidya <diviv@amazon.com>
2 changed files
34 additions
2 deletions
DATE:Jul 12, 2023
-----------

KAFKA-15123: Add tests for ChunkedBytesStream (#13941)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
50 additions
0 deletions
DATE:Jul 15, 2023
-----------

KAFKA-14462; [23/23] Wire GroupCoordinatorService in BrokerServer (#1…

…3991)

This patch wires the new group coordinator in BrokerServer (KRaft only). With this, it is now possible to run a cluster with the new group coordinator and to use the ConsumerGroupHeartbeat API by specifying the following two properties:
- group.coordinator.new.enable = true (to enable the new group coordinator)
- unstable.api.versions.enable = true (to enable unreleased APIs)

Note that the new group coordinator does not support all the existing APIs yet.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
322 additions
36 deletions
DATE:Jul 14, 2023
-----------

KAFKA-15180: Generalize integration tests to change use of KafkaConsu…
    
…mer to Consumer (#13997)

Update the integration tests to swap the use of the concrete KafkaConsumer class to the generic Consumer interface.

Reviewers: Divij Vaidya <diviv@amazon.com>, Philip Nee <philipnee@gmail.com>, Jun Rao <junrao@gmail.com>
22 changed files
55 additions
54 deletions
DATE:Jul 14, 2023
-----------

KAFKA-15139: Avoid slow Set.removeAll(List) in MirrorCheckpointConnec…
    
…tor (#13946)

Reviewed-by: Greg Harris <greg.harris@aiven.io>
2 changed files
26 additions
26 deletions
DATE:Jul 10, 2023
-----------

      MINOR: Fix Jmxtool to honour wait option when MBean is not yet avaiba…
    
…le in MBean server (#13995)

In JmxTool.scala, we will wait till all the object names are available from MBean server. But in the newer version, we only wait for subset of object names. Due to this, we may not enforce wait option and prematurely return the result if the objects are not yet registered in MBean sever.

Reviewers: Luke Chen <showuon@gmail.com>, Federico Valeri <fvaleri@redhat.com>
2 changed files
14 additions
1 deletion
DATE:Jul 12, 2023
-----------

      Revert "MINOR: Update .asf.yaml file with refreshed github_whitelist,…
    
… and collaborators" (#14037)

This reverts commit a1f6ab6.

Reviewers: Luke Chen <showuon@gmail.com>, Yash Mayya <yash.mayya@gmail.com>, Nikolay Izhikov <NIzhikov@gmail.com>
1 changed file
50 additions
17 deletions
DATE:Jul 18, 2023
-----------

      MINOR: Avoid slow Set.removeAll(List) in MirrorSourceConnector (#13992)
    
Reviewed-by: Greg Harris <greg.harris@aiven.io>
1 changed file
3 additions
3 deletions
DATE:Jul 12, 2023
-----------

      MINOR: Update .asf.yaml file with refreshed github_whitelist, and col…
    
…laborators
1 changed file
17 additions
50 deletions
DATE:Jul 18, 2023
-----------

KAFKA-14884: Include check transaction is still ongoing right before …
    
…append (take 2) (#13787)

Introduced extra mapping to track verification state.

When verifying, there is a race condition that the add partitions verification response returns that the partition is in the ongoing transaction, but an abort marker is written before we get to append. Therefore, we track any given transaction we are verifying with an object unique to that transaction.

We check this unique state upon the first append to the log. After that, we can rely on currentTransactionFirstOffset. We remove the verification state on appending to the log with a transactional data record or marker.

We will also clean up lingering verification state entries via the producer state entry expiration mechanism. We do not update the the timestamp on retrying a verification for a transaction, so each entry must be verified before producer.id.expiration.ms.

There were a few other fixes:
- Moved the transaction manager handling for failed batch into the future completed exceptionally block to avoid processing it twice (this caused issues in unit tests)
- handle interrupted exceptions encountered when callback thread encountered them
- change handling to throw error if we try to set verification state and leaderLogIfLocal is None.

Reviewers: David Jacot <djacot@confluent.io>, Artem Livshits <alivshits@confluent.io>, Jason Gustafson <jason@confluent.io>
20 changed files
719 additions
154 deletions
DATE:Jul 14, 2023
-----------

KAFKA-15093: Add 3.4.0 and 3.5.0 to core upgrade and compatibility sy…
    
…stem tests (#13859)


Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov  <christololov@gmail.com>
5 changed files
23 additions
5 deletions
DATE:Jul 12, 2023
-----------

      MINOR: Add Streams API broker compatibility table (#13937)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
53 additions
0 deletions
DATE:Jul 11, 2023
-----------

      MINOR: Remove thread leak from ConsumerBounceTest (#13956)
    
This commit prevents the leak of daemon-bounce-broker thread which was causing test failures for tests which check for thread leak prior to running.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>, Philip Nee <philipnee@gmail.com>
1 changed file
59 additions
46 deletions
DATE:Jul 14, 2023
-----------

      MINOR: Add 3.5.0 and 3.4.1 to system tests (#13849)
    

Reviewers: Luke Chen <showuon@gmail.com>
4 changed files
15 additions
3 deletions
DATE:Jul 12, 2023
-----------

KAFKA-15155: Follow PEP 8 best practice in Python to check if a conta…
    
…iner is empty (#13974)

Reviewers: Divij Vaidya <diviv@amazon.com>
21 changed files
33 additions
33 deletions
DATE:Jul 11, 2023
-----------

KAFKA-15121: Implement the alterOffsets method in the FileStreamSourc…
    
…eConnector and the FileStreamSinkConnector (#13945)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
141 additions
4 deletions
DATE:Jul 18, 2023
-----------

KAFKA-15182: Normalize source connector offsets before invoking Sourc…
    
…eConnector::alterOffsets (#14003)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
68 additions
10 deletions
DATE:Jul 14, 2023
-----------

KAFKA-14522 Rewrite/Move of RemoteIndexCache to storage module. (#13275)
    
KAFKA-14522 Rewrite and Move of RemoteIndexCache to storage module.
Cleanedup index file suffix usages and other minor cleanups

Reviewers: Jun Rao <junrao@gmail.com>, Ismael Juma <ismael@juma.me.uk>, Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kamal Chandraprakash<kamal.chandraprakash@gmail.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>
10 changed files
713 additions
490 deletions
DATE:Jul 11, 2023
-----------

KAFKA-15148: Mark tests correctly as integration tests where they run…
    
…ning as unit tests (#13973)

Reviewers: Divij Vaidya <diviv@amazon.com>
14 changed files
31 additions
33 deletions
DATE:Jul 12, 2023
-----------

KAFKA-9564: Local Tiered Storage implementation for Remote Storage Ma…
    
…nager (#13837)

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>, Christo Lolov <lolovc@amazon.com>, Satish Duggana <satishd@apache.org>
12 changed files
2,503 additions
0 deletions
DATE:Jul 17, 2023
-----------

KAFKA-14737: Move kafka.utils.json to server-common (#13585)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
8 changed files
749 additions
0 deletions
DATE:Jul 18, 2023
-----------

KAFKA-12525: Ignoring stale status statuses when reading from Connect…
    
… status topic (#13453)

During fast consecutive rebalances where a task is revoked from one worker and assigned to another one, it has been observed that there is a small time window and thus a race condition during which a RUNNING status record in the new generation is produced and is immediately followed by a delayed UNASSIGNED status record belonging to the same or a previous generation before the worker that sends this message reads the RUNNING status record that corresponds to the latest generation.
Although this doesn't inhibit the actual execution of tasks, it reports an incorrect status for those tasks(i.e UNASSIGNED). If the users have setup some kind of monitoring on tasks status then this could lead to false alarms for example.
This fix addresses this problem by checking if a status message is stale after reading it and updates it's status only when it is safe to. 

Reviewers: Lucent-Wong <manchesterfans@live.cn>, Chris Egerton <chrise@aiven.io>, Yash Mayya <yash.mayya@gmail.com>, Konstantine Karantasis <k.karantasis@gmail.com>
2 changed files
71 additions
0 deletions
DATE:Jul 11, 2023
-----------

KAFKA-15159: upgrade minor dependencies (#13982)
    
Reviewers: Divij Vaidya <diviv@amazon.com>

---------

Co-authored-by: Damon Xie <damon.xie@zoom.us>
2 changed files
15 additions
14 deletions
DATE:Jul 11, 2023
-----------

KAFKA-14462; [22/N] Implement session and revocation timeouts (#13963)
    
This patch adds the session timeout and the revocation timeout to the new consumer group protocol.

Reviewers: Calvin Liu <caliu@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
1,058 additions
48 deletions
DATE:Jul 12, 2023
-----------

KAFKA-14647: Move TopicFilter to server-common/utils (#13158)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
12 changed files
287 additions
181 deletions
DATE:Jul 18, 2023
-----------

      MINOR Improve logging during the ZK to KRaft migration (#14008)
    
* Adds an exponential backoff to 1m while the controller is waiting for brokers to show up
* Increases one-time logs to INFO
* Adds a summary of the migration records
* Use RecordRedactor for summary of migration batches (TRACE only)

Reviewers: Colin P. McCabe <cmccabe@apache.org>
5 changed files
194 additions
56 deletions
DATE:Jul 14, 2023
-----------

      MINOR: Add ZK dual-write lag metric (#14009)
    
This patch adds ZKWriteBehindLag metric to the KafkaController mbean as specified in KIP-866

Reviewers: David Arthur <mumrah@gmail.com>
7 changed files
136 additions
24 deletions
DATE:Jul 17, 2023
-----------

      fix typo in streams/dsl-api.html (#14023)
    
Fix typo in docs/streams/dsl-api.html

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 16, 2023
-----------

      Fix compile test error (#14013)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jul 14, 2023
-----------

      Kafka Streams Threading: Exception handling (#13957)
    
Catch any exceptions that escape the processing logic
inside TaskExecutors and record them in the TaskManager.
Make sure the TaskExecutor survives, but the task is
unassigned. Add a method to TaskManager to drain the
exceptions. The aim here is that the polling thread will
drain the exceptions to be able to execute the
uncaught exception handler, abort transactions, etc.

Reviewer: Bruno Cadonna <cadonna@apache.org>
5 changed files
119 additions
1 deletion
DATE:Jul 13, 2023
-----------

      [KAFKA-15137] Do not log entire request payload in KRaftControllerCha…
    
…nnelManager (#13988)

Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
15 additions
1 deletion
DATE:Jul 11, 2023
-----------

KAFKA-14938: Fixing flaky test testConnectorBoundary (#13646)
    
Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Yash Mayya <yash.mayya@gmail.com>, 
Sudesh Wasnik <swasnik@confluent.io>, Chris Egerton <chrise@aiven.io>
2 changed files
14 additions
7 deletions
DATE:Jul 12, 2023
-----------

      MINOR: Standardize controller log4j output for replaying records (#13703

)

Standardize controller log4j output for replaying important records. The log message should include
word "replayed" to make it clear that this is a record replay. Log the replay of records for ACLs,
client quotas, and producer IDs, which were previously not logged. Also fix a case where we weren't
logging changes to broker registrations.

AclControlManager, ClientQuotaControlManager, and ProducerIdControlManager didn't previously have a
log4j logger object, so this PR adds one. It also converts them to using Builder objects. This
makes junit tests more readable because we don't need to specify paramaters where the test can use
the default (like LogContexts).

Throw an exception in replay if we get another TopicRecord for a topic which already exists.

Example log messages:
  INFO [QuorumController id=3000] Replayed a FeatureLevelRecord setting metadata version to 3.6-IV0
  DEBUG [QuorumController id=3000] Replayed a ZkMigrationStateRecord which did not alter the state from NONE.
  INFO [QuorumController id=3000] Replayed BrokerRegistrationChangeRecord modifying the registration for broker 0: BrokerRegistrationChangeRecord(brokerId=0, brokerEpoch=3, fenced=-1, inControlledShutdown=0)
  INFO [QuorumController id=3000] Replayed ClientQuotaRecord for ClientQuotaEntity(entries={user=testkit}) setting request_percentage to 0.99.

Reviewers: Divij Vaidya <diviv@amazon.com>, Ron Dagostino <rndgstn@gmail.com>, David Arthur <mumrah@gmail.com>
14 changed files
230 additions
57 deletions
DATE:Jul 13, 2023
-----------

      MINOR: remove unused variable in examples (#14021)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
4 changed files
49 additions
19 deletions
DATE:Jul 17, 2023
-----------

KAFKA-15149: Fix handling of new partitions in dual-write mode (#13968)
    
Fixes a bug where we don't send UMR and LISR requests in dual-write mode when new partitions are created. Prior to this patch, KRaftMigrationZkWriter was mutating the internal data-structures of TopicDelta which prevented MigrationPropagator from sending UMR and LISR for the changed partitions.

Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
18 additions
3 deletions
DATE:Jul 7, 2023
-----------

KAFKA-15145: Don't re-process records filtered out by SMTs on Kafka c…
    
…lient retriable exceptions in AbstractWorkerSourceTask (#13955)

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
45 additions
6 deletions
DATE:Jul 10, 2023
-----------

      [MINOR] Correcting few WARN log lines in DistributedHerder#handleReba…
    
…lance (#13939)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
1 deletion
DATE:Jun 30, 2023
-----------

      MINOR: Replace synchronization with atomic update in Connect's StateT…
    
…racker::changeState method (#13934)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
2 additions
6 deletions
DATE:Jun 29, 2023
-----------

      MINOR: Print startup time for RemoteIndexCache (#13970)
    
Reviewers: Satish Duggana <satishd@apache.org>, Divij Vaidya <diviv@amazon.com>

Co-authored-by: d00791190 <dinglan6@huawei.com>
1 changed file
3 additions
1 deletion
DATE:Jul 8, 2023
-----------

KAFKA-14718: Wait for MirrorMaker to start before executing test (#13284

)
2 changed files
108 additions
24 deletions
DATE:Jul 10, 2023
-----------

KAFKA-15135: fix(storage): pass endpoint configurations as client com…
    
…mon to TBRLMM (#13938)

Pass endpoint properties from RLM to TBRLMM and validate those are not ignored.

Reviewers: Luke Chen <showuon@gmail.com>
3 changed files
11 additions
5 deletions
DATE:Jul 3, 2023
-----------

      MINOR: some minor shell fixes and improvements (#13940)
    
Make the output of 'find' and 'ls' sorted alphabetically.

Add GlobComponentTest.java to test globbing.

Add shell/src/test/resources/log4j.properties so that shell JUnit tests show some output

Reviewers: David Arthur <mumrah@gmail.com>
5 changed files
104 additions
1 deletion
DATE:Jul 7, 2023
-----------

KAFKA-15069: Refactor plugin scanning logic into ReflectionScanner (#…

…13821)

Reviewers: Chris Egerton <chrise@aiven.io>
16 changed files
751 additions
416 deletions
DATE:Jul 6, 2023
-----------

KAFKA-14462; [20/N] Refresh subscription metadata on new metadata ima…
    
…ge (#13901)

This patch adds (1) the logic to propagate a new MetadataImage to the running coordinators; and (2) the logic to ensure that all the consumer groups subscribed to topics with changes will refresh their subscriptions metadata on the next heartbeat. In the mean time, it ensures that freshly loaded consumer groups also refresh their subscriptions metadata on the next heartbeat.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
965 additions
78 deletions
DATE:Jul 5, 2023
-----------

      MINOR: Move some things around in KRaftMigrationDriver (#13978)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
164 additions
171 deletions
DATE:Jul 10, 2023
-----------

      MINOR: Refactor & cleanup for RemoteIndexCache (#13936)
    
- Add new unit tests
- Change the on-disk filename from <offset>_<uuid>_.<indexSuffix> to <offset>_<uuid>.<indexSuffix> i.e. remove trailing underscore after
- Fix a small bug where we were parsing offset as Int when reading the file name from disk. Offset is long.
- Perform input validation in RemoteLogSegmentMetadata.
- Remove an extra loop in cleaner thread. Shutdownable thread already performs looping.

Reviewers: Jorge Esteban Quilcate Otoya <jorge.quilcate@aiven.io>, Satish Duggana <satishd@apache.org>
6 changed files
215 additions
67 deletions
DATE:Jul 8, 2023
-----------

      MINOR: Move MockTimer to server-common (#13954)
    
This patch rewrites MockTimer in Java and moves it from core to server-common. This continues the work started in #13820.

Reviewers: Divij Vaidya <diviv@amazon.com>
6 changed files
98 additions
77 deletions
DATE:Jul 6, 2023
-----------

KAFKA-14831: Illegal state errors should be fatal in transactional pr…
    
…oducer (#13591)

Poison the transaction manager if we detect an illegal transition in the Sender thread. A ThreadLocal in is stored in TransactionManager so that the Sender can inform TransactionManager which thread it's using.

Reviewers: Daniel Urban <durban@cloudera.com>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
4 changed files
150 additions
7 deletions
DATE:Jun 29, 2023
-----------

      MINOR: more KRaft Metadata Image tests (#13724)
    
Adds additional testing for the various KRaft *Image classes. For every image that we create we already test that we can get there by applying all the records corresponding to that image written out as a list of records. This patch adds more tests to confirm that we can get to each such final image with intermediate stops at all possible intermediate images along the way.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, David Arthur <mumrah@gmail.com>
10 changed files
383 additions
111 deletions
DATE:Jul 10, 2023
-----------

      Doc fixes: Fix format and other small errors in config documentation (#…

…13661)

Various formatting fixes in the config docs.

Reviewers: Bill Bejeck <bbejeck@apache.org>
3 changed files
61 additions
63 deletions
DATE:Jul 10, 2023
-----------

KAFKA-15022: [1/N] initial implementation of rack aware assignor (#13851

)

Part of KIP-925. Adds first internal classes to track rack.id client/partition metadata.

Reviewers: Matthias J. Sax <matthias@confluent.io>
4 changed files
604 additions
11 deletions
DATE:Jul 10, 2023
-----------

      MINOR: Fix typo in javadoc (#13972)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jul 7, 2023
-----------

      MINOR: Move TROGDOR.md to trogdor module (#13979)
    
Reviewers: Divij Vaidya <diviv@amazon.com>

---------

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>
8 changed files
7 additions
7 deletions
DATE:Jul 10, 2023
-----------

      MINOR: Update anchor link for exactly-once source connectors (#13933)
    
Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
1 addition
1 deletion
DATE:Jun 29, 2023
-----------

KAFKA-15153: Use Python 'is' instead of '==' to compare for None (#13964

)

Reviewers: Divij Vaidya <diviv@amazon.com>

Co-authored-by: d00791190 <dinglan6@huawei.com>
3 changed files
3 additions
3 deletions
DATE:Jul 6, 2023
-----------

KAFKA-14059 Replace PowerMock with Mockito in WorkerSourceTaskTest (#…

…13383)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
366 additions
493 deletions
DATE:Jul 10, 2023
-----------

KAFKA-10199: Consider tasks in state updater when computing offset su…
    
…ms (#13925)

With the state updater, the task manager needs also to look into the
tasks owned by the state updater when computing the sum of offsets
of the state. This sum of offsets is used by the high availability
assignor to assign warm-up replicas.
If the task manager does not take into account tasks in the
state updater, a warm-up replica will never report back that
the state for the corresponding task has caught up. Consequently,
the warm-up replica will never be dismissed and probing rebalances
will never end.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>, Walker Carlson <wcarlson@confluent.io>
2 changed files
91 additions
15 deletions
DATE:Jul 3, 2023
-----------

KAFKA-8982: Add retry of fetching metadata to Admin.deleteRecords (#1…

…3760)

Use AdminApiDriver class to refresh the metadata and retry the request that failed with retriable errors.

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Mickael Maison <mmaison@redhat.com>, Dimitar Dimitrov <30328539+dimitarndimitrov@users.noreply.github.com>
5 changed files
452 additions
178 deletions
DATE:Jul 3, 2023
-----------

KAFKA-15140: Use TestUtils methods and add logs for assertion failure…
    
… at TopicCommandIntegrationTest (#13950)

This commit utilizes TestUtils methods to create a topic and adds logs when assertions fail.

Reviewers: Divij Vaidya <diviv@amazon.com>

---------

Co-authored-by: d00791190 <dinglan6@huawei.com>
1 changed file
65 additions
104 deletions
DATE:Jul 4, 2023
-----------

KAFKA-14462; [21/N] Add CoordinatorTimer implementation in Coordinato…
    
…rRuntime (#13961)

This patch adds EventBasedCoordinatorTimer and the CoordinatorTimer interface.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
761 additions
36 deletions
DATE:Jul 7, 2023
-----------

      MINOR: Update connector status metric description to include 'stopped…
    
…' as a potential value (#13967)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Jul 6, 2023
-----------

KAFKA-15129;[7/N] Remove metrics in TransactionMarkerChannelManager w…
    
…hen TransactionCoordinator shutdown (#13962)

Reviewers: Divij Vaidya <diviv@amazon.com>

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>
2 changed files
46 additions
6 deletions
DATE:Jul 7, 2023
-----------

KAFKA-15131: Improve RemoteStorageManager exception handling document…
    
…ation (#13923)

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>, Luke Chen <showuon@gmail.com>
1 changed file
11 additions
5 deletions
DATE:Jun 30, 2023
-----------

KAFKA-15114: Update StorageTool help for creating SCRAM credentials t…
    
…o specify name instead of user. (#13904)

The choice of using name vs. user as a parameter is because internally the record uses name, all
tests using the StorageTool use name as a parameter, KafkaPrincipals are created with name and
because creating SCRAM credentials is done with --entity-name

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
2 additions
2 deletions
DATE:Jun 29, 2023
-----------

      MINOR: Fix regression introduced in #13924 (#13958)
    
Fixes a regression introduced in PR #13924 by moving the map from static to a instance specific variable.
---------

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>
2 changed files
26 additions
17 deletions
DATE:Jul 7, 2023
-----------

      MINOR: Check for thread leak at the end of @AfterEach, not at beginni…
    
…ng (#13976)

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
3 additions
2 deletions
DATE:Jul 10, 2023
-----------

KAFKA-14966; [2/N] Extract OffsetFetcher reusable logic (#13898)
    
This is a follow up on the initial OffsetFetcher refactoring to extract reusable logic, needed for the new consumer implementation (initial refactoring merged with PR-13815).

Similar to the initial refactoring, this PR brings no changes to the existing logic, just extracting functions or pieces of logic.

There were no individual tests for the extracted functions, so no tests were migrated.

Reviewers: Jun Rao <junrao@gmail.com>
3 changed files
98 additions
75 deletions
DATE:Jul 6, 2023
-----------

      MINOR: Add JDK 20 CI build and remove some branch builds (#12948)
    
It's good for us to add support for Java 20 in preparation for Java 21 - the next LTS.

Given that Scala 2.12 support has been deprecated, a Scala 2.12 variant is not included.

Also remove some branch builds that add load to the CI, but have
low value: JDK 8 & Scala 2.13 (JDK 8 support has been deprecated),
JDK 11 & Scala 2.12 (Scala 2.12 support has been deprecated) and
JDK 17 & Scala 2.12 (Scala 2.12 support has been deprecated).

A newer version of Mockito (4.9.0 -> 4.11.0) is required for Java 20 support, but we
only use it with Scala 2.13+ since it causes compilation errors with Scala 2.12. Similarly,
we upgrade easymock when the Java version is 16 or newer as it's incompatible
with powermock (which doesn't support Java 16 or newer).

Filed KAFKA-15117 for a test that fails with Java 20 (SslTransportLayerTest.testValidEndpointIdentificationCN).

Finally, fixed some lossy conversions that were added after #13582 was submitted.

Reviewers: Ismael Juma <ismael@juma.me.uk>
11 changed files
47 additions
79 deletions
DATE:Jun 30, 2023
-----------

KAFKA-15129: [1/N] Remove metrics in LogCleanerManager when LogCleane…
    
…r shutdown (#13924)

Reviewers: Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>

---------

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>
3 changed files
52 additions
8 deletions
DATE:Jul 3, 2023
-----------

      MINOR: Fix typos for connect (#13885)
    
Reviewers: Chris Egerton <chrise@aiven.io>
11 changed files
26 additions
26 deletions
DATE:Jun 20, 2023
-----------

      MINOR: Fix some typos for core (#13882)
    
Reviewers:  Divij Vaidya <diviv@amazon.com>
29 changed files
55 additions
55 deletions
DATE:Jun 20, 2023
-----------

KAFKA-15028: AddPartitionsToTxnManager metrics (#13798)
    
Adding the following metrics as per kip-890:

VerificationTimeMs – number of milliseconds from adding partition info to the manager to the time the response is sent. This will include the round trip to the transaction coordinator if it is called. This will also account for verifications that fail before the coordinator is called.

VerificationFailureRate – rate of verifications that returned in failure either from the AddPartitionsToTxn response or through errors in the manager.

AddPartitionsToTxnVerification metrics – separating the verification request metrics from the typical add partitions ones similar to how fetch replication and fetch consumer metrics are separated.

Reviewers: Divij Vaidya <diviv@amazon.com>
5 changed files
240 additions
77 deletions
DATE:Jun 28, 2023
-----------

      MINOR: Split ConsumerCoordinator#testCommitOffsetMetadata onto two te…
    
…st cases testing commitSync and commitAsync (#13665)

Split ConsumerCoordinator#testCommitOffsetMetadata onto two test cases testing commitSync and commitAsync 

Reviewers:  Luke Chen <showuon@gmail.com>
2 changed files
20 additions
4 deletions
DATE:Jun 24, 2023
-----------

      MINOR: fix typos for client (#13884)
    
Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Kirk True <ktrue@confluent.io>
38 changed files
54 additions
54 deletions
DATE:Jun 28, 2023
-----------

      MINOR: fix typos for doc (#13883)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
6 changed files
19 additions
19 deletions
DATE:Jun 21, 2023
-----------

KAFKA-14784: Connect offset reset REST API (#13818)
    
Reviewers: Chris Egerton <chrise@aiven.io>
17 changed files
1,113 additions
267 deletions
DATE:Jun 23, 2023
-----------

      MINOR; Failed atomic file move should be logged at WARN (#13917)
    
When Kafka fails to perform an atomic file move the error is getting swallowed. Kafka should log these cases at least at WARN level.

Reviewers: Ron Dagostino <rndgstn@gmail.com>, Kirk True <kirk@kirktrue.pro>
1 changed file
2 additions
2 deletions
DATE:Jun 28, 2023
-----------

      MINOR: fix typos for metadata (#13889)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Deqi Hu <deqi.hu@shopee.com>
3 changed files
9 additions
9 deletions
DATE:Jun 21, 2023
-----------

KAFKA-15098 Allow authorizers to be configured in ZK migration (#13895)
    
Reviewers: Ron Dagostino <rdagostino@confluent.io>
5 changed files
59 additions
10 deletions
DATE:Jun 22, 2023
-----------

KAFKA-15109 Don't skip leader epoch bump while in migration mode (#13890

)

While in migration mode, the KRaft controller must always bump the leader epoch when shrinking an ISR. 
This is required to maintain compatibility with the ZK brokers. Without the epoch bump, the ZK brokers
will ignore the partition state change present in the LeaderAndIsrRequest since it would not contain a new
leader epoch.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
58 additions
10 deletions
DATE:Jun 21, 2023
-----------

      MINOR: fix typos for streams (#13888)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>
26 changed files
42 additions
42 deletions
DATE:Jun 20, 2023
-----------

      MINOR: Fix ToolsTestUtils by removing incorrect closure of Std Stream (…

…#13922)

Reviewers: Lucas Bradstreet <lucas@confluent.io>, Divij Vaidya <diviv@amazon.com>
1 changed file
0 additions
1 deletion
DATE:Jun 28, 2023
-----------

      MINOR: Fix lossy conversions flagged by Java 20 (#13582)
    
An example of the warning:
> warning: [lossy-conversions] implicit cast from long to int in compound assignment is possibly lossy

There should be no change in behavior as part of these changes - runtime logic ensured
we didn't run into issues due to the lossy conversions.

Reviewers: Divij Vaidya <diviv@amazon.com>
19 changed files
47 additions
46 deletions
DATE:Jun 22, 2023
-----------

KAFKA-15053: Use case insensitive validator for security.protocol con…
    
…fig (#13831)

Fixed a regression described in KAFKA-15053 that security.protocol only allows uppercase values like PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL. With this fix, both lower case and upper case values will be supported (e.g. PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL, plaintext, ssl, sasl_plaintext, sasl_ssl)

Reviewers: Chris Egerton <chrise@aiven.io>, Divij Vaidya <diviv@amazon.com>
16 changed files
81 additions
11 deletions
DATE:Jun 29, 2023
-----------

KAFKA-15078; KRaft leader replys with snapshot for offset 0 (#13845)
    
If the follower has an empty log, fetches with offset 0, it is more
efficient for the leader to reply with a snapshot id (redirect to
FETCH_SNAPSHOT) than for the follower to continue fetching from the log
segments.

Reviewers: David Arthur <mumrah@gmail.com>, dengziming <dengziming1993@gmail.com>
2 changed files
57 additions
2 deletions
DATE:Jun 28, 2023
-----------

KAFKA-15084: Remove lock contention from RemoteIndexCache (#13850)
    
Use thread safe Caffeine to cache indexes fetched from RemoteTier locally. This PR removes a lock contention that led to higher fetch latencies as the IO threads spent time unnecessarily waiting on global cache lock while a single thread fetches the index from remote tier. See PR #13850 for details and rejected alternatives.

Reviewers: Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>
6 changed files
486 additions
160 deletions
DATE:Jun 21, 2023
-----------

      MINOR: Log lastCaughtUpTime on ISR shrinkage (#13187)
    
Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
7 additions
3 deletions
DATE:Jun 21, 2023
-----------

KAFKA-14462; [18/N] Add GroupCoordinatorService (#13812)
    
This patch introduces the GroupCoordinatorService. This is the new (incomplete) implementation of the group coordinator based on the coordinator runtime introduced in #13795.

Reviewers: Divij Vaidya <diviv@amazon.com>, Justine Olshan <jolshan@confluent.io>
14 changed files
1,600 additions
7 deletions
DATE:Jun 22, 2023
-----------

      MINOR: Bump requests (python package) from 2.24.0 to 2.31.0 in /tests (…

…#13903)

Update "requests" lib used in system tests to version "2.31.0" to fix CVE-2023-32681: Unintended leak of Proxy-Authorization header in requests

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jun 27, 2023
-----------

      MINOR: Increase Github API operations for stale PR check (#13894)
    
Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
1 addition
1 deletion
DATE:Jun 21, 2023
-----------

      MINOR: fix typos for server common (#13887)
    
Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
10 additions
10 deletions
DATE:Jun 20, 2023
-----------

      MINOR: Silence error logs for faulty plugins in integration tests (#1…

…3912)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
4 additions
2 deletions
DATE:Jun 23, 2023
-----------

KAFKA-14930: Document the new PATCH and DELETE offsets REST APIs for …
    
…Connect (#13915)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
47 additions
2 deletions
DATE:Jun 29, 2023
-----------

KAFKA-14462; [19/N] Add CoordinatorLoader implementation (#13880)
    
This patch adds a coordinator loader implementation.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
9 changed files
960 additions
131 deletions
DATE:Jun 29, 2023
-----------

      MINOR: Fix generated client ids for Connect (#13896)
    

Reviewers: Chris Egerton <fearthecellos@gmail.com>
2 changed files
4 additions
1 deletion
DATE:Jun 21, 2023
-----------

      MINOR:Fill missing parameter annotations for LogCleaner methods (#13839)
    

Reviewers: Josep Prat <josep.prat@aiven.io>
---------

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>
2 changed files
116 additions
14 deletions
DATE:Jun 21, 2023
-----------

      MINOR: fix flaky ZkMigrationIntegrationTest.testNewAndChangedTopicsIn…
    
…DualWrite (#13902)

Reviewers: David Arthur <mumrah@gmail.com>
1 changed file
1 addition
2 deletions
DATE:Jun 28, 2023
-----------

      MINOR: fix typos for group coordinator (#13886)
    
Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
8 additions
8 deletions
DATE:Jun 20, 2023
-----------

KAFKA-14936: Add Grace period logic to Stream Table Join (2/N) (#13855)
    
This PR adds the interface for grace period to the Joined object as well as uses the buffer. The majority of it is tests and moving some of the existing join logic.

Reviewers: Victoria Xia <victoria.xia@confluent.io>, Bruno Cadonna <cadonna@apache.org>
12 changed files
455 additions
40 deletions
DATE:Jun 29, 2023
-----------

KAFKA-14694: RPCProducerIdManager should not wait on new block (#13267)
    
RPCProducerIdManager initiates an async request to the controller to grab a block of producer IDs and then blocks waiting for a response from the controller.

This is done in the request handler threads while holding a global lock. This means that if many producers are requesting producer IDs and the controller is slow to respond, many threads can get stuck waiting for the lock.

This patch aims to:
* resolve the deadlock scenario mentioned above by not waiting for a new block and returning an error immediately
* remove synchronization usages in RpcProducerIdManager.generateProducerId()
* handle errors returned from generateProducerId() so that KafkaApis does not log unexpected errors
* confirm producers backoff before retrying
* introduce backoff if manager fails to process AllocateProducerIdsResponse

Reviewers: Artem Livshits <alivshits@confluent.io>, Jason Gustafson <jason@confluent.io>
12 changed files
414 additions
146 deletions
DATE:Jun 22, 2023
-----------

      MINOR: Optimize runtime of MM2 integration tests by batching transact…
    
…ions (#13816)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
128 additions
76 deletions
DATE:Jun 21, 2023
-----------

KAFKA-15109 Ensure the leader epoch bump occurs for older MetadataVer…
    
…sions (#13910)

This fixes a regression introduced by the previous KAFKA-15109 commit (d0457f7 on trunk).

Reviewers: Colin P. McCabe <cmccabe@apache.org>, José Armando García Sancio <jsancio@apache.org>
4 changed files
59 additions
19 deletions
DATE:Jun 27, 2023
-----------

      MINOR: Close ReplicaManager correctly in ReplicaManagerTest (#13868)
    
Fixes thread leaks by closing the ReplicaManager using try/finally at the end of each test. The leaks were leading to flaky test failures in ReplicaManagerTest.

Reviewers: Justine Olshan <jolshan@confluent.io>, David Jacot <djacot@confluent.io>
1 changed file
526 additions
476 deletions
DATE:Jun 21, 2023
-----------

      MINOR: Fix documentation for ConsumeBench metrics in Trogdor (#13877)
    
Co-authored-by: Deqi Hu <deqi.hu@shopee.com>

Reviewers: Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Jun 21, 2023
-----------

KAFKA-14936: Change Time Ordered Buffer to not require Change<> 0/N (#…

…13830)

Change the TimeOrderedKeyValueBuffer to take three types to include the store type so that it can be used for non change<V> operations as well.

Reviewers: Victoria Xia<victoria.xia@confluent.io> , Gabriel Gama <>
9 changed files
80 additions
74 deletions
DATE:Jun 10, 2023
-----------

KAFKA-10337: await async commits in commitSync even if no offsets giv…
    
…en (#13678)

The contract for Consumer#commitSync() guarantees that the callbacks for all prior async commits will be invoked before it returns. Prior to this patch the contract could be violated if an empty offsets map were passed in to Consumer#commitSync().

Reviewers: Philip Nee <philipnee@gmail.com>, David Jacot <djacot@confluent.io>
2 changed files
78 additions
3 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Fix ZkAclMigrationClientTest.testAclsMigrateAndDualWrite test (#…

…13809)

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
7 additions
8 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Fix flaky DistributedHerderTest cases related to zombie fencing (
    
#13806)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
27 additions
15 deletions
DATE:Jun 5, 2023
-----------

KAFKA-15048: Improve handling of unexpected quorum controller errors (#…

…13799)

When the active quorum controller encounters an "unexpected" error, such as a NullPointerException,
it currently resigns its leadership. This PR fixes it so that in addition to doing that, it also
increments the metadata error count metric. This will allow us to better track down these errors.

This PR also fixes a minor bug where performing read operations on a standby controller would
result in an unexpected RuntimeException. The bug happened because the standby controller does not
take in-memory snapshots, and read operations were attempting to read from the epoch of the latest
committed offset. The fix is for the standby controller to simply read the latest value of each
data structure. This is always safe, because standby controllers don't contain uncommitted data.

Also, fix a bug where listPartitionReassignments was reading the latest data, rather than data from
the last committed offset.

Reviewers: dengziming <dengziming1993@gmail.com>, David Arthur <mumrah@gmail.com>
8 changed files
312 additions
76 deletions
DATE:Jun 2, 2023
-----------

KAFKA-14462; [16/N] Add CoordinatorLoader and CoordinatorPlayback int…
    
…erfaces (#13794)

This patch adds the CoordinatorLoader and the CoordinatorPlayback interfaces. The former is used to load (or rebuild) the coordinator state by replaying all the records stored in the partition. The later is the interface that must be implemented by coordinator to support replaying records.

Reviewers: Calvin Liu <caliu@confluent.io>, Justine Olshan <jolshan@confluent.io>
2 changed files
78 additions
0 deletions
DATE:Jun 2, 2023
-----------

      MINOR: Retrigger collaborator invites: part 2
    
Adding and removing some users to re-trigger the invites.
1 changed file
6 additions
0 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Retrigger collaborator invites: part 1
    
Adding and removing some users to re-trigger the invites.
1 changed file
0 additions
6 deletions
DATE:Jun 6, 2023
-----------

KAFKA-14791; Create a builder for PartitionRegistration (#13788)
    
This creates a builder for PartitionRegistration. The motivation for the builder is that the constructor of PartitionRegistration has four arguments all of type int[] which makes it easy to make a mistake when using it.

Reviewers: José Armando García Sancio <jsancio@apache.org>
12 changed files
456 additions
247 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15051: add missing GET plugin/config endpoint (#13803)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
0 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14006: Parameterize WorkerConnectorTest suite (#12307)
    
Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Christo Lolov <lolovc@amazon.com>, Kvicii <kvicii.yu@gmail.com>, Mickael Maison <mickael.maison@gmail.com>
1 changed file
78 additions
55 deletions
DATE:Jun 8, 2023
-----------

KAFKA-15021; Skip leader epoch bump on ISR shrink (#13765)
    
When the KRaft controller removes a replica from the ISR because of the controlled shutdown there is no need for the leader epoch to be increased by the KRaft controller. This is accurate as long as the topic partition leader doesn't add the removed replica back to the ISR.

This change also fixes a bug when computing the HWM. When computing the HWM, replicas that are not eligible to join the ISR but are caught up should not be included in the computation. Otherwise, the HWM will never increase for replica.lag.time.max.ms because the shutting down replica is not sending FETCH request. Without this additional fix PRODUCE requests would timeout if the request timeout is greater than replica.lag.time.max.ms.

Because of the bug above the KRaft controller needs to check the MV to guarantee that all brokers support this bug fix before skipping the leader epoch bump.

Reviewers: David Mao <47232755+splett2@users.noreply.github.com>, Divij Vaidya <diviv@amazon.com>, David Jacot <djacot@confluent.io>
12 changed files
319 additions
88 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Remove reference to 'offset backing store' from exception mess…
    
…age in KafkaBasedLog (#13810)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
1 deletion
DATE:Jun 5, 2023
-----------

KAFKA-14866: Remove controller module metrics when broker is shutting…
    
… down (#13473)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
126 additions
15 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15037: pass remoteLogEnabled to unifiedLog (#13779)
    
UnifiedLog relied on the remoteStorageSystemEnable to identify if the broker is enabling remote storage, but we never pass this value from the config into UnifiedLog. So it'll always be false.

In this PR, I did:

   - pass remoteStorageSystemEnable to UnifiedLog
   - remove remoteLogManager from the class member of UnifiedLog since only UnifiedLog#fetchOffsetByTimestamp needs remoteLogManager, and this can be passed when called from ReplicaManager.

Reviewers: Satish Duggana <satishd@apache.org>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
10 changed files
35 additions
24 deletions
DATE:Jun 5, 2023
-----------

      MINOR; Add helper util Snapshots.lastContainedLogTimestamp (#13772)
    
This change refactors the lastContainedLogTimestamp to the Snapshots class, for re-usability. Introduces IdentitySerde based on ByteBuffer, required for using RecordsSnapshotReader. This change also removes the "recordSerde: RecordSerde[_]" argument from the KafkaMetadataLog constructor.

Reviewers: José Armando García Sancio <jsancio@apache.org>
7 changed files
71 additions
26 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15077: Code to trim token in FileTokenRetriever (#13835)
    
The FileTokenRetriever class is used to read the access_token from a file on the clients system and then it is passed along with the jaas config to the OAuthBearerSaslServer. In case the token was sent using FileTokenRetriever on the client side, some EOL character is getting appended to the token, causing authentication to fail with the message:


Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
31 additions
0 deletions
DATE:Jun 11, 2023
-----------

      MINOR: Move MockTime to server-common (#13823)
    
This patch rewrite `MockTime` in Java and moves it to `server-common` module. This is a prerequisite to move `MockTimer` later on to `server-common` as well. 

Reviewers: David Arthur <mumrah@gmail.com>
69 changed files
109 additions
87 deletions
DATE:Jun 9, 2023
-----------

      MINOR: Add "versions" tag to recently added ReplicaState field on Fet…
    
…ch Request (#13680)

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Jun 5, 2023
-----------

      MINOR: Enable schedule stale PR workflow (#13841)
    
Also fixes a few things in the workflow config (label name, better PR comment)

Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
9 additions
6 deletions
DATE:Jun 10, 2023
-----------

KAFKA-15052 Fix the flaky QuorumControllerTest.testBalancePartitionLe…
    
…aders (#13804)

In this test broker session timeout is configured aggressively low
(to 1 second) so that fencing can happen without much waiting. Then
in the final portion of the test when brokers should not be fenced
heartbeats are sent roughly 2 times in a session timeout window.
However the first time that's done there's other code between
sending the heartbeat and taking the timestamp, and in local tests
that code can take up to 0.5 seconds (1/2 of the session timeout).
That then can result in all brokers being fenced again which would
fail the test.

This change sends a heartbeat just when a timestamp is taken,
which in local tests results flaky failures from 4 out of 50
to 0 out of 50.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
21 additions
15 deletions
DATE:Jun 4, 2023
-----------

      MINOR: Typo and unused method removal (#13739)
    
clean up unused private method and removed typos

Reviewers:  Divij Vaidya <diviv@amazon.com>,  Manyanda Chitimbo <manyanda.chitimbo@gmail.com>,  Daniel Scanteianu, Josep Prat <josep.prat@aiven.io>
3 changed files
3 additions
7 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Re-introduce Transformation import to fix TransformationChain …
    
…Javadoc (#13808)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
0 deletions
DATE:Jun 5, 2023
-----------

KAFKA-14278: Fix InvalidProducerEpochException and InvalidTxnStateExc…
    
…eption handling in producer clients (#13811)

This PR fixes three issues:

InvalidProducerEpochException was not handled consistently. InvalidProducerEpochException used to be able to be return via both transactional response and produce response, but as of KIP-588 (2.7+), transactional responses should not return InvalidProducerEpochException anymore, only produce responses can. It can happen that older brokers may still return InvalidProducerEpochException for transactional responses; these must be converted to the newer ProducerFencedException. This conversion wasn't done for TxnOffsetCommit (sent to the group coordinator).

InvalidTxnStateException was double-wrapped in KafkaException, whereas other exceptions are usually wrapped only once. Furthermore, InvalidTxnStateException was not handled at all for in AddOffsetsToTxn response, where it should be a possible error as well, according to API documentation.

According to API documentation, UNSUPPORTED_FOR_MESSAGE_FORMAT is not possible for TxnOffsetCommit, but it looks like it is, and it is being handled there, so I updated the API documentation.

Reviewers: Justine Olshan <jolshan@confluent.io>
3 changed files
56 additions
12 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14462; [14/N] Add PartitionWriter (#13675)
    
This patch introduces the `PartitionWriter` interface in the `group-coordinator` module. The `ReplicaManager` resides in the `core` module and it is thus not accessible from the `group-coordinator` one. The `CoordinatorPartitionWriter` is basically an implementation of the interface residing in `core` which interfaces with the `ReplicaManager`.

One notable difference from the usual produce path is that the `PartitionWriter` returns the offset following the written records. This is then used by the coordinator runtime to track when the request associated with the write can be completed.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
13 changed files
755 additions
28 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Refactor DelegatingClassLoader to emit immutable PluginScanRes…
    
…ult (#13771)

Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
357 additions
219 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Handle the config topic read timeout edge case in DistributedH…
    
…erder's stopConnector method (#13750)

Reviewers: Chris Egerton
1 changed file
3 additions
1 deletion
DATE:Jun 5, 2023
-----------

      MINOR: update release.py (#13775)
    
Update release.py script:
  -  fix typo
  -  add more info about closing repository in stagingRepository

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
3 additions
1 deletion
DATE:Jun 5, 2023
-----------

KAFKA-14539: Simplify StreamsMetadataState by replacing the Cluster m…
    
…etadata with partition info map (#13751)

Replace usage of Cluster in StreamsMetadataState with Map<String, List>. Update StreamsPartitionAssignor#onAssignment method to pass existing Map<TopicPartition, PartitionInfo> instead of fake Cluster object.

Behavior remains the same; updated existing unit tests accordingly.

Reviewers:  Walker Carlson <wcarlson@confluent.io>, Bill Bejeck <bbejeck@apache.org>
4 changed files
40 additions
38 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14966: Extract OffsetFetcher reusable logic (#13815)
    
The OffsetFetcher is internally used by the KafkaConsumer to fetch offsets, validate and reset positions. For the new KafkaConsumer with a refactored threading model, similar functionality will be needed.

This is an initial refactoring for extracting logic from the OffsetFetcher, that will be reused by the new consumer implementation. No changes to the existing logic, just extracting classes, functions or pieces of logic.

All the functionality moved out of the OffsetFetcher is already covered by tests in OffsetFetcherTest and FetcherTest. There were no individual tests for the extracted functions, so no tests were migrated.

Reviewers: Jun Rao <junrao@gmail.com>
3 changed files
349 additions
233 deletions
DATE:Jun 8, 2023
-----------

KAFKA-14633: Reduce data copy & buffer allocation during decompression (
    
#13135)

After this change,

    For broker side decompression: JMH benchmark RecordBatchIterationBenchmark demonstrates 20-70% improvement in throughput (see results for RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize).
    For consumer side decompression: JMH benchmark RecordBatchIterationBenchmark a mix bag of single digit regression for some compression type to 10-50% improvement for Zstd (see results for RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize).

Reviewers: Luke Chen <showuon@gmail.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Ismael Juma <mail@ismaeljuma.com>
16 changed files
1,078 additions
303 deletions
DATE:Jun 5, 2023
-----------

KAFKA-15073: Add a Github action to mark PRs as stale (#13827)
    
This patch makes use of the Github action `actions/stale@v8` to add a `stale` label to PRs older than 90 days. 

Reviewers: Josep Prat <josep.prat@aiven.io>, David Jacot <djacot@confluent.io>
1 changed file
52 additions
0 deletions
DATE:Jun 10, 2023
-----------

KAFKA-14863: Fix failing tests for invalid plugins that are no longer…
    
… visible (#13805)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
2 additions
2 deletions
DATE:Jun 3, 2023
-----------

KAFKA-15040: trigger onLeadershipChange under KRaft mode (#13807)
    
When received LeaderAndIsr request, we'll notify remoteLogManager about this leadership changed to trigger the following workflow. But LeaderAndIsr won't be sent in KRaft mode, instead, the topicDelta will be received.

This PR fixes this issue by getting leader change and follower change from topicDelta, and triggering rlm.onLeadershipChange to notify remote log manager. Adding tests for remote storage enabled cases.

Reviewers: Satish Duggana <satishd@apache.org>
5 changed files
218 additions
47 deletions
DATE:Jun 9, 2023
-----------

KAFKA-14936: Change Time Ordered Buffer to not require Change<> 0/N (#…

…13830)

Change the TimeOrderedKeyValueBuffer to take three types to include the store type so that it can be used for non change<V> operations as well.

Reviewers: Victoria Xia<victoria.xia@confluent.io> , Gabriel Gama <>
9 changed files
80 additions
74 deletions
DATE:Jun 10, 2023
-----------

KAFKA-10337: await async commits in commitSync even if no offsets giv…
    
…en (#13678)

The contract for Consumer#commitSync() guarantees that the callbacks for all prior async commits will be invoked before it returns. Prior to this patch the contract could be violated if an empty offsets map were passed in to Consumer#commitSync().

Reviewers: Philip Nee <philipnee@gmail.com>, David Jacot <djacot@confluent.io>
2 changed files
78 additions
3 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Fix ZkAclMigrationClientTest.testAclsMigrateAndDualWrite test (#…

…13809)

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
7 additions
8 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Fix flaky DistributedHerderTest cases related to zombie fencing (
    
#13806)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
27 additions
15 deletions
DATE:Jun 5, 2023
-----------

KAFKA-15048: Improve handling of unexpected quorum controller errors (#…

…13799)

When the active quorum controller encounters an "unexpected" error, such as a NullPointerException,
it currently resigns its leadership. This PR fixes it so that in addition to doing that, it also
increments the metadata error count metric. This will allow us to better track down these errors.

This PR also fixes a minor bug where performing read operations on a standby controller would
result in an unexpected RuntimeException. The bug happened because the standby controller does not
take in-memory snapshots, and read operations were attempting to read from the epoch of the latest
committed offset. The fix is for the standby controller to simply read the latest value of each
data structure. This is always safe, because standby controllers don't contain uncommitted data.

Also, fix a bug where listPartitionReassignments was reading the latest data, rather than data from
the last committed offset.

Reviewers: dengziming <dengziming1993@gmail.com>, David Arthur <mumrah@gmail.com>
8 changed files
312 additions
76 deletions
DATE:Jun 2, 2023
-----------

KAFKA-14462; [16/N] Add CoordinatorLoader and CoordinatorPlayback int…
    
…erfaces (#13794)

This patch adds the CoordinatorLoader and the CoordinatorPlayback interfaces. The former is used to load (or rebuild) the coordinator state by replaying all the records stored in the partition. The later is the interface that must be implemented by coordinator to support replaying records.

Reviewers: Calvin Liu <caliu@confluent.io>, Justine Olshan <jolshan@confluent.io>
2 changed files
78 additions
0 deletions
DATE:Jun 2, 2023
-----------

      MINOR: Retrigger collaborator invites: part 2
    
Adding and removing some users to re-trigger the invites.
1 changed file
6 additions
0 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Retrigger collaborator invites: part 1
    
Adding and removing some users to re-trigger the invites.
1 changed file
0 additions
6 deletions
DATE:Jun 6, 2023
-----------

KAFKA-14791; Create a builder for PartitionRegistration (#13788)
    
This creates a builder for PartitionRegistration. The motivation for the builder is that the constructor of PartitionRegistration has four arguments all of type int[] which makes it easy to make a mistake when using it.

Reviewers: José Armando García Sancio <jsancio@apache.org>
12 changed files
456 additions
247 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15051: add missing GET plugin/config endpoint (#13803)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
0 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14006: Parameterize WorkerConnectorTest suite (#12307)
    
Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Christo Lolov <lolovc@amazon.com>, Kvicii <kvicii.yu@gmail.com>, Mickael Maison <mickael.maison@gmail.com>
1 changed file
78 additions
55 deletions
DATE:Jun 8, 2023
-----------

KAFKA-15021; Skip leader epoch bump on ISR shrink (#13765)
    
When the KRaft controller removes a replica from the ISR because of the controlled shutdown there is no need for the leader epoch to be increased by the KRaft controller. This is accurate as long as the topic partition leader doesn't add the removed replica back to the ISR.

This change also fixes a bug when computing the HWM. When computing the HWM, replicas that are not eligible to join the ISR but are caught up should not be included in the computation. Otherwise, the HWM will never increase for replica.lag.time.max.ms because the shutting down replica is not sending FETCH request. Without this additional fix PRODUCE requests would timeout if the request timeout is greater than replica.lag.time.max.ms.

Because of the bug above the KRaft controller needs to check the MV to guarantee that all brokers support this bug fix before skipping the leader epoch bump.

Reviewers: David Mao <47232755+splett2@users.noreply.github.com>, Divij Vaidya <diviv@amazon.com>, David Jacot <djacot@confluent.io>
12 changed files
319 additions
88 deletions
DATE:Jun 7, 2023
-----------

      MINOR: Remove reference to 'offset backing store' from exception mess…
    
…age in KafkaBasedLog (#13810)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
1 deletion
DATE:Jun 5, 2023
-----------

KAFKA-14866: Remove controller module metrics when broker is shutting…
    
… down (#13473)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
126 additions
15 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15037: pass remoteLogEnabled to unifiedLog (#13779)
    
UnifiedLog relied on the remoteStorageSystemEnable to identify if the broker is enabling remote storage, but we never pass this value from the config into UnifiedLog. So it'll always be false.

In this PR, I did:

   - pass remoteStorageSystemEnable to UnifiedLog
   - remove remoteLogManager from the class member of UnifiedLog since only UnifiedLog#fetchOffsetByTimestamp needs remoteLogManager, and this can be passed when called from ReplicaManager.

Reviewers: Satish Duggana <satishd@apache.org>, Kamal Chandraprakash <kamal.chandraprakash@gmail.com>
10 changed files
35 additions
24 deletions
DATE:Jun 5, 2023
-----------

      MINOR; Add helper util Snapshots.lastContainedLogTimestamp (#13772)
    
This change refactors the lastContainedLogTimestamp to the Snapshots class, for re-usability. Introduces IdentitySerde based on ByteBuffer, required for using RecordsSnapshotReader. This change also removes the "recordSerde: RecordSerde[_]" argument from the KafkaMetadataLog constructor.

Reviewers: José Armando García Sancio <jsancio@apache.org>
7 changed files
71 additions
26 deletions
DATE:Jun 6, 2023
-----------

KAFKA-15077: Code to trim token in FileTokenRetriever (#13835)
    
The FileTokenRetriever class is used to read the access_token from a file on the clients system and then it is passed along with the jaas config to the OAuthBearerSaslServer. In case the token was sent using FileTokenRetriever on the client side, some EOL character is getting appended to the token, causing authentication to fail with the message:


Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
31 additions
0 deletions
DATE:Jun 11, 2023
-----------

      MINOR: Move MockTime to server-common (#13823)
    
This patch rewrite `MockTime` in Java and moves it to `server-common` module. This is a prerequisite to move `MockTimer` later on to `server-common` as well. 

Reviewers: David Arthur <mumrah@gmail.com>
69 changed files
109 additions
87 deletions
DATE:Jun 9, 2023
-----------

      MINOR: Add "versions" tag to recently added ReplicaState field on Fet…
    
…ch Request (#13680)

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Jun 5, 2023
-----------

      MINOR: Enable schedule stale PR workflow (#13841)
    
Also fixes a few things in the workflow config (label name, better PR comment)

Reviewers: Josep Prat <josep.prat@aiven.io>
1 changed file
9 additions
6 deletions
DATE:Jun 10, 2023
-----------

KAFKA-15052 Fix the flaky QuorumControllerTest.testBalancePartitionLe…
    
…aders (#13804)

In this test broker session timeout is configured aggressively low
(to 1 second) so that fencing can happen without much waiting. Then
in the final portion of the test when brokers should not be fenced
heartbeats are sent roughly 2 times in a session timeout window.
However the first time that's done there's other code between
sending the heartbeat and taking the timestamp, and in local tests
that code can take up to 0.5 seconds (1/2 of the session timeout).
That then can result in all brokers being fenced again which would
fail the test.

This change sends a heartbeat just when a timestamp is taken,
which in local tests results flaky failures from 4 out of 50
to 0 out of 50.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
21 additions
15 deletions
DATE:Jun 4, 2023
-----------

      MINOR: Typo and unused method removal (#13739)
    
clean up unused private method and removed typos

Reviewers:  Divij Vaidya <diviv@amazon.com>,  Manyanda Chitimbo <manyanda.chitimbo@gmail.com>,  Daniel Scanteianu, Josep Prat <josep.prat@aiven.io>
3 changed files
3 additions
7 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Re-introduce Transformation import to fix TransformationChain …
    
…Javadoc (#13808)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
0 deletions
DATE:Jun 5, 2023
-----------

KAFKA-14278: Fix InvalidProducerEpochException and InvalidTxnStateExc…
    
…eption handling in producer clients (#13811)

This PR fixes three issues:

InvalidProducerEpochException was not handled consistently. InvalidProducerEpochException used to be able to be return via both transactional response and produce response, but as of KIP-588 (2.7+), transactional responses should not return InvalidProducerEpochException anymore, only produce responses can. It can happen that older brokers may still return InvalidProducerEpochException for transactional responses; these must be converted to the newer ProducerFencedException. This conversion wasn't done for TxnOffsetCommit (sent to the group coordinator).

InvalidTxnStateException was double-wrapped in KafkaException, whereas other exceptions are usually wrapped only once. Furthermore, InvalidTxnStateException was not handled at all for in AddOffsetsToTxn response, where it should be a possible error as well, according to API documentation.

According to API documentation, UNSUPPORTED_FOR_MESSAGE_FORMAT is not possible for TxnOffsetCommit, but it looks like it is, and it is being handled there, so I updated the API documentation.

Reviewers: Justine Olshan <jolshan@confluent.io>
3 changed files
56 additions
12 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14462; [14/N] Add PartitionWriter (#13675)
    
This patch introduces the `PartitionWriter` interface in the `group-coordinator` module. The `ReplicaManager` resides in the `core` module and it is thus not accessible from the `group-coordinator` one. The `CoordinatorPartitionWriter` is basically an implementation of the interface residing in `core` which interfaces with the `ReplicaManager`.

One notable difference from the usual produce path is that the `PartitionWriter` returns the offset following the written records. This is then used by the coordinator runtime to track when the request associated with the write can be completed.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
13 changed files
755 additions
28 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Refactor DelegatingClassLoader to emit immutable PluginScanRes…
    
…ult (#13771)

Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
357 additions
219 deletions
DATE:Jun 6, 2023
-----------

      MINOR: Handle the config topic read timeout edge case in DistributedH…
    
…erder's stopConnector method (#13750)

Reviewers: Chris Egerton
1 changed file
3 additions
1 deletion
DATE:Jun 5, 2023
-----------

      MINOR: update release.py (#13775)
    
Update release.py script:
  -  fix typo
  -  add more info about closing repository in stagingRepository

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
3 additions
1 deletion
DATE:Jun 5, 2023
-----------

KAFKA-14539: Simplify StreamsMetadataState by replacing the Cluster m…
    
…etadata with partition info map (#13751)

Replace usage of Cluster in StreamsMetadataState with Map<String, List>. Update StreamsPartitionAssignor#onAssignment method to pass existing Map<TopicPartition, PartitionInfo> instead of fake Cluster object.

Behavior remains the same; updated existing unit tests accordingly.

Reviewers:  Walker Carlson <wcarlson@confluent.io>, Bill Bejeck <bbejeck@apache.org>
4 changed files
40 additions
38 deletions
DATE:Jun 7, 2023
-----------

KAFKA-14966: Extract OffsetFetcher reusable logic (#13815)
    
The OffsetFetcher is internally used by the KafkaConsumer to fetch offsets, validate and reset positions. For the new KafkaConsumer with a refactored threading model, similar functionality will be needed.

This is an initial refactoring for extracting logic from the OffsetFetcher, that will be reused by the new consumer implementation. No changes to the existing logic, just extracting classes, functions or pieces of logic.

All the functionality moved out of the OffsetFetcher is already covered by tests in OffsetFetcherTest and FetcherTest. There were no individual tests for the extracted functions, so no tests were migrated.

Reviewers: Jun Rao <junrao@gmail.com>
3 changed files
349 additions
233 deletions
DATE:Jun 8, 2023
-----------

KAFKA-14633: Reduce data copy & buffer allocation during decompression (
    
#13135)

After this change,

    For broker side decompression: JMH benchmark RecordBatchIterationBenchmark demonstrates 20-70% improvement in throughput (see results for RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize).
    For consumer side decompression: JMH benchmark RecordBatchIterationBenchmark a mix bag of single digit regression for some compression type to 10-50% improvement for Zstd (see results for RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize).

Reviewers: Luke Chen <showuon@gmail.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Ismael Juma <mail@ismaeljuma.com>
16 changed files
1,078 additions
303 deletions
DATE:Jun 5, 2023
-----------

KAFKA-15073: Add a Github action to mark PRs as stale (#13827)
    
This patch makes use of the Github action `actions/stale@v8` to add a `stale` label to PRs older than 90 days. 

Reviewers: Josep Prat <josep.prat@aiven.io>, David Jacot <djacot@confluent.io>
1 changed file
52 additions
0 deletions
DATE:Jun 10, 2023
-----------

KAFKA-14863: Fix failing tests for invalid plugins that are no longer…
    
… visible (#13805)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
2 additions
2 deletions
DATE:Jun 3, 2023
-----------

KAFKA-15040: trigger onLeadershipChange under KRaft mode (#13807)
    
When received LeaderAndIsr request, we'll notify remoteLogManager about this leadership changed to trigger the following workflow. But LeaderAndIsr won't be sent in KRaft mode, instead, the topicDelta will be received.

This PR fixes this issue by getting leader change and follower change from topicDelta, and triggering rlm.onLeadershipChange to notify remote log manager. Adding tests for remote storage enabled cases.

Reviewers: Satish Duggana <satishd@apache.org>
5 changed files
218 additions
47 deletions
DATE:Jun 9, 2023
-----------

KAFKA-15017 Fix snapshot load in dual write mode for ClientQuotas and…
    
… SCRAM (#13757)

This patch fixes the case where a ClientQuota or SCRAM credential was added in KRaft, but not written back to ZK. This missed write only occurred when handling a KRaft snapshot. If the changed quota was processed in a metadata delta (which is the typical case), it would be written to ZK.

Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
96 additions
8 deletions
DATE:May 31, 2023
-----------

      Upgrade to snappy v1.1.10.0 (#13786)
    
Snappy v1.1.9.1 has some issues around arm compatibility and glibc library versions shipped by default with certain OS distributions. Snappy v1.1.10.0 uses a glibc LTS version, see: xerial/snappy-java#417 xerial/snappy-java#440

Reviewers: Justine Olshan <jolshan@confluent.io>
1 changed file
1 addition
1 deletion
DATE:May 31, 2023
-----------

KAFKA-14462; [12/N] Add GroupMetadataManager and ConsumerGroup (#13639)
    
This patch adds the GroupMetadataManager to the group-coordinator module. This manager is responsible for handling the groups management, the members management and the entire reconciliation process. At this point, only the new consumer group type/protocol is implemented.

The new manager is based on an architecture inspired from the quorum controller. A request can access/read the state but can't mutate it directly. Instead, a list of records is generated together with the response and those records are applied to the state by the runtime framework. We use timeline data structures. Note that the runtime framework is not part of this patch. It will come in a following one.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
12 changed files
4,175 additions
54 deletions
DATE:May 31, 2023
-----------

KAFKA-15034: Improve performance of the ReplaceField SMT; add JMH ben…
    
…chmark (#13776)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
90 additions
4 deletions
DATE:Jun 1, 2023
-----------

KAFKA-15039: Reduce logging level to trace in PartitionChangeBuilder.… (
    
#13780)

…tryElection()

A CPU profile in a large cluster showed PartitionChangeBuilder.tryElection() taking significant CPU due to logging. We adjust the logging statements in that method for clean elections from DEBUG level to TRACE to mitigate the impact of this logging under normal operations.  Unclean elections are now logged at the INFO level rather than DEBUG.

Reviewers: Jason Gustafson <jason@confluent.io>, Colin P. McCabe <cmccabe@apache.org>
1 changed file
11 additions
8 deletions
DATE:May 31, 2023
-----------

      MINOR: Add log segment unit tests, If the maximum offset beyond index…
    
…, appen… (#13584)

Add log segment unit tests, If the maximum offset beyond index, appended to the log section, it throws LogSegmentOffsetOverflowException

*More detailed description of change
The unit tests for the log segment should cover more scenario validation, and the unit tests submitted this time cover LogSegmentOffsetOverflowException that are expected to be thrown when the maximum index is exceeded

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>
1 changed file
28 additions
0 deletions
DATE:Jun 1, 2023
-----------

      MINOR: Fixing typo in ExactlyOnceWorkerSourceTask#committableRecords (#…

…13755)

Co-authored-by: Sagar Rao <sagarrao@Sagars-MacBook-Pro.local>

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
1 changed file
9 additions
9 deletions
DATE:May 31, 2023
-----------

      MINOR: Covering all epoch cases in add partitions to txn manager (#13769

)

Cleaning up the AddPartitionsToTxnManager and covering the 3 epoch cases more clearly.

Reviewers:  David Jacot <djacot@confluent.io>
2 changed files
78 additions
66 deletions
DATE:Jun 1, 2023
-----------

      MINOR: Add 3.5 upgrade steps for ZK and KRaft (#13792)
    

Reviewers: Tom Bentley <tbentley@redhat.com>
1 changed file
61 additions
2 deletions
DATE:Jun 1, 2023
-----------

      MINOR: Add transaction verification config to producerStateManager co…
    
…nfig (#13770)

I have moved this config into producer state manager so it can be checked easily under the log lock when we are about to append.

Only a few test files currently use the validation and those have been verified to work via running the tests.

Reviews:  David Jacot <djacot@confluent.io>
27 changed files
44 additions
37 deletions
DATE:May 30, 2023
-----------

      MINOR: Clean up RemoteLogManager (#13785)
    
Cleans up some warnings in class, like Raw referencing a parametrized type and lambdas instead of method references.

Signed-off-by: Josep Prat <josep.prat@aiven.io>

Reviewers: Luke Chen <showuon@gmail.com>,  Manyanda Chitimbo <manyanda.chitimbo@gmail.com>,  Satish Duggana <satishd@apache.org>
1 changed file
7 additions
8 deletions
DATE:May 31, 2023
-----------

KAFKA-14982: Improve the kafka-metadata-quorum output (#13738)
    
When running kafka-metadata-quorum script to get the quorum replication status, the LastFetchTimestamp and LastCaughtUpTimestamp output is not human-readable.

I will be convenient to add an optional flag (-hr, --human-readable) to enable a human-readable format showing the delay in ms (i.e. 366 ms ago).

This dealy is computed as (now - timestamp), where they are both represented as Unix time (UTC based).

$ bin/kafka-metadata-quorum.sh --bootstrap-server :9092 describe --replication --human-readable
NodeId	LogEndOffset	Lag	LastFetchTimestamp	LastCaughtUpTimestamp	Status  	
2     	61          	0  	5 ms ago          	5 ms ago             	Leader  	
3     	61          	0  	56 ms ago         	56 ms ago            	Follower	
4     	61          	0  	56 ms ago         	56 ms ago            	Follower

Reviewers: Luke Chen <showuon@gmail.com>
3 changed files
103 additions
20 deletions
DATE:May 29, 2023
-----------

KAFKA-14789: Prevent mis-attributing classpath plugins, allow discove…
    
…ry of classpath RestExtension and ConfigProvider (#13356)

Reviewers: Chris Egerton <chrise@aiven.io>
8 changed files
138 additions
64 deletions
DATE:May 26, 2023
-----------

KAFKA-14462; [13/N] CoordinatorEvent and CoordinatorEventProcessor (#…

…13666)

Adds CoordinatorEvent, CoordinatorEventProcessor, and MultiThreadedEventProcessor.

Reviewers: Kirk True <ktrue@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
583 additions
4 deletions
DATE:Jun 1, 2023
-----------

KAFKA-14841 Handle callbacks to ConsumerRebalanceListener in MockCons…
    
…umer (#13455)

Reviewers: Philip Nee <philipnee@gmail.com>
2 changed files
65 additions
2 deletions
DATE:May 26, 2023
-----------

      MINOR: remove unused variable from QuorumMetaLogListener#handleCommit…
    
… method (#13611)

The local variable processedRecordsSize as just left over from another commit and can be safely removed.

Reviewers: Divij Vaidya <diviv@amazon.com> , José Armando García Sancio <jsancio@apache.org>
1 changed file
0 additions
1 deletion
DATE:May 26, 2023
-----------

      MINOR: reorder collaborator (#13790)
    
reorder collaborator list and hope the invitation can be resent!

Reviewers: Bruno Cadonna <cadonna@apache.org>, Josep Prat <josep.prat@aiven.io>
1 changed file
2 additions
2 deletions
DATE:Jun 1, 2023
-----------

      MINOR: Hopefully fix flaky FetchFromFollowerIntegrationTest.testRackA…
    
…wareRangeAssignor (#13754)

This test fails regularly in CI ([example](https://ci-builds.apache.org/blue/organizations/jenkins/Kafka%2Fkafka-pr/detail/PR-13753/1/tests)). This is an attempt to stabilize it.

Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>
1 changed file
10 additions
3 deletions
DATE:May 30, 2023
-----------

KAFKA-12562: Fix KafkaStreams#store old references in comments (#13774)
    
Following method was deprecated in 2.5 and was removed in 3.0.0.

// KafkaStreams.java
public <T> T store(final String storeName, final QueryableStoreType<T> queryableStoreType);

However, many comments reference the removed method which can be confusing in generated JavaDocs. The code in java doc comments has been changed to reflect the new method, store(final StoreQueryParameters<T> storeQueryParameters).

Also, minor changes to variable names in java doc to be context specific.

Reviewer: Bruno Cadonna <cadonna@apache.org>
9 changed files
86 additions
47 deletions
DATE:Jun 1, 2023
-----------

KAFKA-14368: Connect offset write REST API (#13465)
    
Reviewers: Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
24 changed files
2,303 additions
250 deletions
DATE:May 26, 2023
-----------

KAFKA-15012: Allow leading zeros in numeric fields while deserializin…
    
…g JSON messages using the JsonConverter (#13800)

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
13 additions
2 deletions
DATE:Jun 2, 2023
-----------

KAFKA-15004: Fix configuration dual-write during migration (#13767)
    
This patch fixes several small bugs with configuration dual-write during migration.

* Topic configs are not written back to ZK while handling snapshot.
* New broker/topic configs in KRaft that did not exist in ZK will not be written to ZK.
* The sensitive configs are not encoded while writing them to Zookeeper.
* Handle topic configs in ConfigMigrationClient and KRaftMigrationZkWriter#handleConfigsSnapshot

Added tests to ensure we no longer have the above mentioned issues.

Co-authored-by: Akhilesh Chaganti <akhileshchg@users.noreply.github.com>
Reviewers: Colin P. McCabe <cmccabe@apache.org>
11 changed files
257 additions
72 deletions
DATE:May 27, 2023
-----------

KAFKA-15019: Improve handling of broker heartbeat timeouts (#13759)
    
When the active KRaft controller is overloaded, it will not be able to process broker heartbeat
requests. Instead, they will be timed out. When using the default configuration, this will happen
if the time needed to process a broker heartbeat climbs above a second for a sustained period.
This, in turn, could lead to brokers being improperly fenced when they are still alive.

With this PR, timed out heartbeats will still update the lastContactNs and metadataOffset of the
broker in the BrokerHeartbeatManager. While we don't generate any records, this should still be
adequate to prevent spurious fencing. We also log a message at ERROR level so that this condition
will be more obvious.

Other small changes in this PR: fix grammar issue in log4j of BrokerHeartbeatManager. Add JavaDoc
for ClusterControlManager#zkMigrationEnabled field. Add builder for ReplicationControlTestContext
to avoid having tons of constructors. Update ClusterControlManager.DEFAULT_SESSION_TIMEOUT_NS to
match the default in KafkaConfig.

Reviewers: Ismael Juma <ijuma@apache.org>, Ron Dagostino <rdagostino@confluent.io>
9 changed files
280 additions
56 deletions
DATE:May 31, 2023
-----------

KAFKA-14462; [15/N] Make Result generic and rename it (#13793)
    
This patch makes the record type generic, moves the class to the runtime package and finally rename the class to follow the naming of the other classes in the runtime package.

Reviewers: Calvin Liu <caliu@confluent.io>, Justine Olshan <jolshan@confluent.io>
4 changed files
34 additions
30 deletions
DATE:Jun 2, 2023
-----------

      MINOR: Move plugin path parsing from DelegatingClassLoader to PluginU…
    
…tils (#13334)

Reviewers: Chaitanya Mukka <chaitanya.mvs2007@gmail.com>, Chris Egerton <chrise@aiven.io>
8 changed files
85 additions
77 deletions
DATE:May 26, 2023
-----------

KAFKA-14996: Handle overly large user operations on the kcontroller (#…

…13742)

Previously, if a user tried to perform an overly large batch operation on the KRaft controller
(such as creating a million topics), we would create a very large number of records in memory. Our
attempt to write these records to the Raft layer would fail, because there were too many to fit in
an atomic batch. This failure, in turn, would trigger a controller failover.

(Note: I am assuming here that no topic creation policy was in place that would prevent the
creation of a million topics. I am also assuming that the user operation must be done atomically,
which is true for all current user operations, since we have not implemented KIP-868 yet.)

With this PR, we fail immediately when the number of records we have generated exceeds the
threshold that we can apply. This failure does not generate a controller failover. We also now
fail with a PolicyViolationException rather than an UnknownServerException.

In order to implement this in a simple way, this PR adds the BoundedList class, which wraps any
list and adds a maximum length. Attempts to grow the list beyond this length cause an exception to
be thrown.

Reviewers: David Arthur <mumrah@gmail.com>, Ismael Juma <ijuma@apache.org>, Divij Vaidya <diviv@amazon.com>
12 changed files
511 additions
16 deletions
DATE:May 26, 2023
-----------

      MINOR: Remove spurious warning about plugin.path config provider usag…
    
…e when null (#13783)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
1 deletion
DATE:May 31, 2023
-----------

KAFKA-14961: harden DefaultBackgroundThreadTest.testStartupAndTearDow…
    
…n test (#13664)

1. Ensures that NPE are not thrown
2. Ensures that the background thread has been started to avoid flasky
   assertions failures on isRunning
3. Add a check that the thread is not running when closed

Reviewers: Philip Nee <philipnee@gmail.com>, Kirk True <kirk@kirktrue.pro>
1 changed file
7 additions
3 deletions
DATE:May 26, 2023
-----------

KAFKA-15003: Fix ZK sync logic for partition assignments (#13735)
    
Fixed the metadata change events in the Migration component to check correctly for the diff in
existing topic changes and replicate the metadata to the Zookeeper. Also, made the diff check
exhaustive enough to handle the partial writes in Zookeeper when we're try to replicate changes
using a snapshot in the event of Controller failover.

Add migration client and integration tests to verify the change.

Co-authored-by: Akhilesh Chaganti <akhileshchg@users.noreply.github.com>
9 changed files
476 additions
32 deletions
DATE:Jun 1, 2023
-----------

KAFKA-14133: Migrate ActiveTaskCreator mock in TaskManagerTest to Moc…
    
…kito (#13681)

This pull requests migrates the ActiveTaskCreator mock in TaskManagerTest from EasyMock to Mockito
The change is restricted to a single mock to minimize the scope and make it easier for review.
Please see two examples that follow the same pattern below:
#13529
#13621

Reviewers: Divij Vaidya <diviv@amazon.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Christo Lolov <lolovc@amazon.com>, Bruno Cadonna <cadonna@apache.org>
1 changed file
276 additions
337 deletions
DATE:Jun 1, 2023
-----------

      MINOR: Fix for MetadataQuorumCommandErrorTest.testRelativeTimeMs (#13784

)

Reviewers: Divij Vaidya <diviv@amazon.com>, David Jacot <djacot@confluent.io>
2 changed files
5 additions
3 deletions
DATE:May 31, 2023
-----------

KAFKA-14863: Hide plugins with invalid constructors during plugin dis…
    
…covery (#13467)

Reviewers: Chris Egerton <chrise@aiven.io>
6 changed files
144 additions
4 deletions
DATE:Jun 2, 2023
-----------

      MINOR: Update LICENSE-binary following snappy upgrade (#13791)
    

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
3 additions
1 deletion
DATE:Jun 1, 2023
-----------

KAFKA-15010 ZK migration failover support (#13758)
    
This patch adds snapshot reconciliation during ZK to KRaft migration. This reconciliation happens whenever a snapshot is loaded by KRaft, or during a controller failover. Prior to this patch, it was possible to miss metadata updates coming from KRaft when dual-writing to ZK.

Internally this adds a new state SYNC_KRAFT_TO_ZK to the KRaftMigrationDriver state machine. The controller passes through this state after the initial ZK migration and each time a controller becomes active. 

Logging during dual-write was enhanced to include a count of write operations happening.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
23 changed files
649 additions
119 deletions
DATE:Jun 1, 2023
-----------

KAFKA-8713: JsonConverter replace.null.with.default should prevent em…
    
…itting default for Struct fields (#13781)

Co-authored-by: GeunJae Jeon <krespo>
Reviewers: Mickael Maison <mickael.maison@gmail.com>
2 changed files
40 additions
1 deletion
DATE:May 31, 2023
-----------

      MINOR: add docs to remind reader that impl of ConsumerPartitionAssign… (
    
#13659)

Reviewers: David Jacot <djacot@confluent.io>, Kirk True <kirk@kirktrue.pro>
2 changed files
27 additions
2 deletions
DATE:May 5, 2023
-----------

KAFKA-14133: Migrate topology builder mock in TaskManagerTest to mock…
    
…ito (#13529)

1. Migrates topology builder mock in TaskManagerTest to mockito.

2. Replaces the unit test to verify if subscribed partitions are added
to topology metadata.

3. Modifies signatures of methods for adding subscribed partitions to
topology metadata to use sets instead of lists. This makes the
intent of the methods clearer and makes the tests more portable.

Reviewers: Christo Lolov <lolovc@amazon.com>, Matthias J. Sax <mjsax@apache.org>
5 changed files
50 additions
73 deletions
DATE:May 2, 2023
-----------

      MINOR: fix a small typo in SharedServer.scala (#13693)
    
Diabled -> Disabled
1 changed file
6 additions
6 deletions
DATE:May 11, 2023
-----------

      MINOR: Print the cause of failure for test (#13672)
    

Motivation

PlaintextAdminIntegrationTest fails in a flaky manner with the follow trace (e.g. in this build):

org.opentest4j.AssertionFailedError: expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:31)
	at org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:228)
	at kafka.api.PlaintextAdminIntegrationTest.testElectUncleanLeadersForOnePartition(PlaintextAdminIntegrationTest.scala:1583)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

The std output doesn't contain useful information that we could use to debug the cause of failure. This is because the test, currently, validates if there is an exception and fails when one is present. It does not print what the exception is.
Change

    1. Make the test a bit more robust by waiting for server startup.
    2. Fail the test with the actual unexpected exception which will help in debugging the cause of failure.

Reviewers: Luke Chen <showuon@gmail.com>, Chia-Ping Tsai <chia7712@gmail.com>
1 changed file
18 additions
7 deletions
DATE:May 8, 2023
-----------

KAFKA-14133: Migrate ChangeLogReader mock in TaskManagerTest to Mocki…
    
…to (#13621)

Migrates ChangeLogReader mock in TaskManagerTest to mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
116 additions
134 deletions
DATE:May 8, 2023
-----------

      HOTFIX: fix the VersionedKeyValueToBytesStoreAdapter#isOpen API (#13695)
    
The VersionedKeyValueToBytesStoreAdapter#isOpen API accidentally returns the value of inner.persistent() when it should be returning inner.isOpen()

Reviewers: Matthias J. Sax <mjsax@apache.org>, Luke Chen <showuon@gmail.com>, Bruno Cadonna <cadonna@apache.org>, Victoria Xia <victoria.xia@confluent.io>
1 changed file
1 addition
1 deletion
DATE:May 10, 2023
-----------

KAFKA-14752: Kafka examples improvements - consumer changes (#13514)
    
KAFKA-14752: Kafka examples improvements - consumer changes

This is extracted from the original PR for better review.
#13492

Signed-off-by: Federico Valeri <fedevaleri@gmail.com>

Reviewers: Christo Lolov <christololov@gmail.com>, Luke Chen <showuon@gmail.com>
5 changed files
220 additions
62 deletions
DATE:May 2, 2023
-----------

KAFKA-14946: fix NPE when merging the deltatable (#13653)
    
Fix NPE while merging the deltatable. Because it's possible that hashTier is
not null but deltatable is null (ex: removing data), we should have null check
while merging for deltatable like other places did. Also added tests that will
fail without this change.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
29 additions
0 deletions
DATE:May 3, 2023
-----------

      HOTFIX: fix broken Streams upgrade system test (#13654)
    
Reviewers: Victoria Xia <victoria.xia@confluent.io>, John Roesler <john@confluent.io>
11 changed files
19 additions
27 deletions
DATE:May 8, 2023
-----------

KAFKA-14594: Move LogDirsCommand to tools module (#13122)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
7 changed files
367 additions
211 deletions
DATE:May 4, 2023
-----------

KAFKA-14913: Using ThreadUtils.shutdownExecutorServiceQuietly to clos…
    
…e executors in Connect Runtime (#13594)

#13557 introduced a utils method to close executors silently. This PR leverages that method to close executors in connect runtime. There was duplicate code while closing the executors which isn't the case with this PR.

Note that there are a few more executors used in Connect runtime but their close methods don't follow this pattern of shutdown, await and shutdown. Some of them have some logic like executor like Worker, so not changing at such places.

---------

Co-authored-by: Sagar Rao <sagarrao@Sagars-MacBook-Pro.local>

Reviewers: Daniel Urban <durban@cloudera.com>, Yash Mayya <yash.mayya@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
7 changed files
29 additions
62 deletions
DATE:May 8, 2023
-----------

      MINOR: Allow tagged fields with version subset of flexible version ra…
    
…nge (#13551)

The generated message types are missing a range check for the case when the tagged version range is a subset of
the flexible version range. This causes the tagged field count, which is computed correctly, to conflict with the
number of tags serialized.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
30 additions
4 deletions
DATE:May 3, 2023
-----------

      MINOR: Add reason to exceptions in QuorumController (#13648)
    
Saw this error message in log:

ERROR [QuorumController id=1] writeNoOpRecord: unable to start processing because of RejectedExecutionException. Reason: null (org.apache.kafka.controller.QuorumController)

The null reason is not helpful with only RejectedExecutionException. Adding the reason to it.

Reviewers: David Arthur <mumrah@gmail.com>, Divij Vaidya <diviv@amazon.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>
1 changed file
5 additions
5 deletions
DATE:May 2, 2023
-----------

      MINOR: Remove unnecessary code in client/connect (#13259)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
14 changed files
0 additions
66 deletions
DATE:May 2, 2023
-----------

KAFKA-13668: Retry upon missing initProducerId due to authorization e…
    
…rror (#12149)

Producers used to throw a fatal error upon failing initProducerId, which can be caused by authorization errors. In this case, the user will need to instantiate a producer.

This PR makes authorization errors non-fatal so that the user can retry until the permission is fixed by an admin.

Here we first transition the producer to the ABORTABLE state, then to the UNINITIALIZED state (so that the producer is recoverable). Upon the subsequent send, the producer will transition to INITIALIZING and attempt to send another InitProducerIdRequest.

Reviewers: Kirk True <ktrue@confluent.io>, David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
143 additions
26 deletions
DATE:May 4, 2023
-----------

KAFKA-14876: Document the new 'PUT /connectors/{name}/stop' REST API …
    
…for Connect (#13657)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
3 additions
2 deletions
DATE:May 2, 2023
-----------

KAFKA-14462; [11/N] Add CurrentAssignmentBuilder (#13638)
    
This patch adds the `CurrentAssignmentBuilder` class which encapsulates the reconciliation engine of the consumer group protocol. Given the current state of a member and a desired or target assignment state, the state machine takes the necessary steps to converge the member to its desired state.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Calvin Liu <caliu@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
3 changed files
1,007 additions
0 deletions
DATE:May 8, 2023
-----------

KAFKA-14926: Remove metrics on Log Cleaner shutdown (#13623)
    
When Log cleaning is shutdown, it doesn't remove metrics that were registered to `KafkaYammerMetrics.defaultRegistry()` which has one instance per server. Log cleaner's lifecycle is associated with lifecycle of `LogManager` and hence, there is no possibility where log cleaner will be shutdown but the broker won't. Broker shutdown will close the `jmxReporter` and hence, there is no current metric leak here. The motivation for this code change is to "do the right thing" from a code hygiene perspective.

Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Kirk True <kirk@mustardgrain.com>, David Jacot <djacot@confluent.io>
2 changed files
61 additions
12 deletions
DATE:May 5, 2023
-----------

KAFKA-14662: Update the ACL list in the doc (#13660)
    
Added the missing ACLs to the doc.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
126 additions
0 deletions
DATE:May 8, 2023
-----------

      HOTFIX: fix file deletions left out of MINOR: improve QuorumControlle…
    
…r logging #13540
3 changed files
0 additions
2 deletions
DATE:May 4, 2023
-----------

      MINOR: remove kraft readme link (#13691)
    
The config/kraft/README.md is already removed. We should also remove the link.

Reviewers: dengziming <dengziming1993@gmail.com>
5 changed files
5 additions
5 deletions
DATE:May 10, 2023
-----------

KAFKA-14916: Fix code that assumes transactional ID implies all recor…
    
…ds are transactional (#13607)

Also modifies verification to only add a partition to verify if it is transactional.

When verifying we look at all the transactional producer IDs and throw INVALID_RECORD on the request if one is different.

Reviewers: Kirk True <ktrue@confluent.io>, Artem Livshits <alivshits@confluent.io>, Jason Gustafson <jason@confluent.io>
4 changed files
105 additions
15 deletions
DATE:May 4, 2023
-----------

KAFKA-14840: Support for snapshots during ZK migration (#13461)
    
This patch adds support for handling metadata snapshots while in dual-write mode. Prior to this change, if the active
controller loaded a snapshot, it would get out of sync with the ZK state.

In order to reconcile the snapshot state with ZK, several methods were added to scan through the metadata in ZK to
compute differences with the MetadataImage. Since this introduced a lot of code, I opted to split out a lot of methods
from ZkMigrationClient into their own client interfaces, such as TopicMigrationClient, ConfigMigrationClient, and
AclMigrationClient. Each of these has some iterator method that lets the caller examine the ZK state in a single pass
and without using too much memory.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Luke Chen <showuon@gmail.com>
29 changed files
2,725 additions
1,394 deletions
DATE:May 5, 2023
-----------

      MINOR: Reduce number of threads created for integration test brokers (#…

…13655)

The integration tests seem to create an unnecessarily large number of threads. This reduces the number of threads created per integration test harness broker.

Reviewers: Luke Chen <showuon@gmail.com>. Justine Olshan <jolshan@confluent.io>
5 changed files
8 additions
13 deletions
DATE:May 4, 2023
-----------

KAFKA-14752: Kafka examples improvements - processor changes (#13516)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
120 additions
106 deletions
DATE:May 11, 2023
-----------

KAFKA-14500; [1/N] Rewrite MemberMetadata in Java (#13644)
    
This patch adds GenericGroupMember which is a rewrite of MemberMetadata in Java.

Reviewers: David Jacot <djacot@confluent.io>
3 changed files
751 additions
0 deletions
DATE:May 9, 2023
-----------

KAFKA-14514; Add Range Assignor on the Server (KIP-848) (#13443)
    
This patch adds the RangeAssignor on the server for KIP-848. This range assignor is very different from the old client side implementation. We added functionality to make these assignments sticky while also inheriting crucial properties of the range assignor such as facilitating joins and distributing partitions of a topic somewhat equally amongst its subscribers.

Reviewers: Philip Nee <philipnee@gmail.com>, Jeff Kim <jeff.kim@confluent.io>, David Jacot <djacot@confluent.io>
8 changed files
806 additions
12 deletions
DATE:May 10, 2023
-----------

KAFKA-14752: Kafka examples improvements - producer changes (#13515)
    
KAFKA-14752: Kafka examples improvements - producer changes

Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov <christololov@gmail.com>
4 changed files
131 additions
95 deletions
DATE:May 8, 2023
-----------

      MINOR: improve QuorumController logging #13540

When creating the QuorumController, log whether ZK migration is enabled.

When applying a feature level record which sets the metadata version, log the metadata version enum
rather than the numeric feature level.

Improve the logging when we replay snapshots in QuorumController. Log both the beginning and the
end of replay.

When TRACE is enabled, log every record that is replayed in QuorumController. Since some records
may contain sensitive information, create RecordRedactor to assist in logging only what is safe to
put in the log4j file.

Add logging to ControllerPurgatory. Successful completions are logged at DEBUG; failures are logged
at INFO, and additions are logged at TRACE.

Remove SnapshotReason.java, SnapshotReasonTest.java, and
QuorumController#generateSnapshotScheduled. They are deadcode now that snapshot generation moved to
org.apache.kafka.image.publisher.SnapshotGenerator.

Reviewers: David Arthur <mumrah@gmail.com>, José Armando García Sancio <jsancio@apache.org>
8 changed files
228 additions
177 deletions
DATE:May 4, 2023
-----------

      MINOR: Fix producer Callback comment (#13669)
    
Fixes the wrong exception name: OffsetMetadataTooLargeException.

Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Luke Chen <showuon@gmail.com>
1 changed file
14 additions
14 deletions
DATE:May 8, 2023
-----------

KAFKA-14766: Improve performance of VarInt encoding and decoding (#13312

)

Motivation

Reading/writing the protocol buffer varInt32 and varInt64 (also called varLong in our code base) is in the hot path of data plane code in Apache Kafka. We read multiple varInt in a record and in long. Hence, even a minor change in performance could extrapolate to larger performance benefit.

In this PR, we only update varInt32 encoding/decoding.
Changes

This change uses loop unrolling and reduces the amount of repetition of calculations. Based on the empirical results from the benchmark, the code has been modified to pick up the best implementation.
Results

Performance has been evaluated using JMH benchmarks on JDK 17.0.6. Various implementations have been added in the benchmark and benchmarking has been done for different sizes of varints and varlongs. The benchmark for various implementations have been added at ByteUtilsBenchmark.java

Reviewers: Ismael Juma <mlists@juma.me.uk>, Luke Chen <showuon@gmail.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>
4 changed files
772 additions
65 deletions
DATE:May 5, 2023
-----------

      MINOR: Remove unused methods in CoreUtils (#13170)
    

Reviewers: Josep Prat <josep.prat@aiven.io>, Christo Lolov <christololov@gmail.com>
2 changed files
7 additions
66 deletions
DATE:May 11, 2023
-----------

KAFKA-14978 ExactlyOnceWorkerSourceTask should remove parent metrics (#…

…13690)

Reviewers: Chris Egerton <chrise@aiven.io>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
2 changed files
21 additions
0 deletions
DATE:May 10, 2023
-----------

KAFKA-14974: Restore backward compatibility in KafkaBasedLog (#13688)
    
`KafkaBasedLog` is a widely used utility class that provides a generic implementation of a shared, compacted log of records in a Kafka topic. It isn't in Connect's public API, but has been used outside of Connect and we try to preserve backward compatibility whenever possible. KAFKA-14455 modified the two overloaded void `KafkaBasedLog::send` methods to return a `Future`. While this change is source compatible, it isn't binary compatible. We can restore backward compatibility simply by renaming the new Future returning send methods, and reinstating the older send methods to delegate to the newer methods.

This refactoring changes no functionality other than restoring the older methods.

Reviewers: Randall Hauch <rhauch@gmail.com>
3 changed files
40 additions
11 deletions
DATE:May 9, 2023
-----------

KAFKA-14462; [10/N] Add TargetAssignmentBuilder (#13637)
    
This patch adds TargetAssignmentBuilder. It is responsible for computing a target assignment for a given group.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
3 changed files
1,027 additions
3 deletions
DATE:May 2, 2023
-----------

      MINOR: add docs to remind reader that impl of ConsumerPartitionAssign… (
    
#13659)

Reviewers: David Jacot <djacot@confluent.io>, Kirk True <kirk@kirktrue.pro>
2 changed files
27 additions
2 deletions
DATE:May 5, 2023
-----------

KAFKA-14133: Migrate topology builder mock in TaskManagerTest to mock…
    
…ito (#13529)

1. Migrates topology builder mock in TaskManagerTest to mockito.

2. Replaces the unit test to verify if subscribed partitions are added
to topology metadata.

3. Modifies signatures of methods for adding subscribed partitions to
topology metadata to use sets instead of lists. This makes the
intent of the methods clearer and makes the tests more portable.

Reviewers: Christo Lolov <lolovc@amazon.com>, Matthias J. Sax <mjsax@apache.org>
5 changed files
50 additions
73 deletions
DATE:May 2, 2023
-----------

      MINOR: fix a small typo in SharedServer.scala (#13693)
    
Diabled -> Disabled
1 changed file
6 additions
6 deletions
DATE:May 11, 2023
-----------

      MINOR: Print the cause of failure for test (#13672)
    

Motivation

PlaintextAdminIntegrationTest fails in a flaky manner with the follow trace (e.g. in this build):

org.opentest4j.AssertionFailedError: expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:31)
	at org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:228)
	at kafka.api.PlaintextAdminIntegrationTest.testElectUncleanLeadersForOnePartition(PlaintextAdminIntegrationTest.scala:1583)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

The std output doesn't contain useful information that we could use to debug the cause of failure. This is because the test, currently, validates if there is an exception and fails when one is present. It does not print what the exception is.
Change

    1. Make the test a bit more robust by waiting for server startup.
    2. Fail the test with the actual unexpected exception which will help in debugging the cause of failure.

Reviewers: Luke Chen <showuon@gmail.com>, Chia-Ping Tsai <chia7712@gmail.com>
1 changed file
18 additions
7 deletions
DATE:May 8, 2023
-----------

KAFKA-14133: Migrate ChangeLogReader mock in TaskManagerTest to Mocki…
    
…to (#13621)

Migrates ChangeLogReader mock in TaskManagerTest to mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
116 additions
134 deletions
DATE:May 8, 2023
-----------

      HOTFIX: fix the VersionedKeyValueToBytesStoreAdapter#isOpen API (#13695)
    
The VersionedKeyValueToBytesStoreAdapter#isOpen API accidentally returns the value of inner.persistent() when it should be returning inner.isOpen()

Reviewers: Matthias J. Sax <mjsax@apache.org>, Luke Chen <showuon@gmail.com>, Bruno Cadonna <cadonna@apache.org>, Victoria Xia <victoria.xia@confluent.io>
1 changed file
1 addition
1 deletion
DATE:May 10, 2023
-----------

KAFKA-14752: Kafka examples improvements - consumer changes (#13514)
    
KAFKA-14752: Kafka examples improvements - consumer changes

This is extracted from the original PR for better review.
#13492

Signed-off-by: Federico Valeri <fedevaleri@gmail.com>

Reviewers: Christo Lolov <christololov@gmail.com>, Luke Chen <showuon@gmail.com>
5 changed files
220 additions
62 deletions
DATE:May 2, 2023
-----------

KAFKA-14946: fix NPE when merging the deltatable (#13653)
    
Fix NPE while merging the deltatable. Because it's possible that hashTier is
not null but deltatable is null (ex: removing data), we should have null check
while merging for deltatable like other places did. Also added tests that will
fail without this change.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
29 additions
0 deletions
DATE:May 3, 2023
-----------

      HOTFIX: fix broken Streams upgrade system test (#13654)
    
Reviewers: Victoria Xia <victoria.xia@confluent.io>, John Roesler <john@confluent.io>
11 changed files
19 additions
27 deletions
DATE:May 8, 2023
-----------

KAFKA-14594: Move LogDirsCommand to tools module (#13122)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
7 changed files
367 additions
211 deletions
DATE:May 4, 2023
-----------

KAFKA-14913: Using ThreadUtils.shutdownExecutorServiceQuietly to clos…
    
…e executors in Connect Runtime (#13594)

#13557 introduced a utils method to close executors silently. This PR leverages that method to close executors in connect runtime. There was duplicate code while closing the executors which isn't the case with this PR.

Note that there are a few more executors used in Connect runtime but their close methods don't follow this pattern of shutdown, await and shutdown. Some of them have some logic like executor like Worker, so not changing at such places.

---------

Co-authored-by: Sagar Rao <sagarrao@Sagars-MacBook-Pro.local>

Reviewers: Daniel Urban <durban@cloudera.com>, Yash Mayya <yash.mayya@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
7 changed files
29 additions
62 deletions
DATE:May 8, 2023
-----------

      MINOR: Allow tagged fields with version subset of flexible version ra…
    
…nge (#13551)

The generated message types are missing a range check for the case when the tagged version range is a subset of
the flexible version range. This causes the tagged field count, which is computed correctly, to conflict with the
number of tags serialized.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
30 additions
4 deletions
DATE:May 3, 2023
-----------

      MINOR: Add reason to exceptions in QuorumController (#13648)
    
Saw this error message in log:

ERROR [QuorumController id=1] writeNoOpRecord: unable to start processing because of RejectedExecutionException. Reason: null (org.apache.kafka.controller.QuorumController)

The null reason is not helpful with only RejectedExecutionException. Adding the reason to it.

Reviewers: David Arthur <mumrah@gmail.com>, Divij Vaidya <diviv@amazon.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>
1 changed file
5 additions
5 deletions
DATE:May 2, 2023
-----------

      MINOR: Remove unnecessary code in client/connect (#13259)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
14 changed files
0 additions
66 deletions
DATE:May 2, 2023
-----------

KAFKA-13668: Retry upon missing initProducerId due to authorization e…
    
…rror (#12149)

Producers used to throw a fatal error upon failing initProducerId, which can be caused by authorization errors. In this case, the user will need to instantiate a producer.

This PR makes authorization errors non-fatal so that the user can retry until the permission is fixed by an admin.

Here we first transition the producer to the ABORTABLE state, then to the UNINITIALIZED state (so that the producer is recoverable). Upon the subsequent send, the producer will transition to INITIALIZING and attempt to send another InitProducerIdRequest.

Reviewers: Kirk True <ktrue@confluent.io>, David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
143 additions
26 deletions
DATE:May 4, 2023
-----------

KAFKA-14876: Document the new 'PUT /connectors/{name}/stop' REST API …
    
…for Connect (#13657)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
3 additions
2 deletions
DATE:May 2, 2023
-----------

KAFKA-14462; [11/N] Add CurrentAssignmentBuilder (#13638)
    
This patch adds the `CurrentAssignmentBuilder` class which encapsulates the reconciliation engine of the consumer group protocol. Given the current state of a member and a desired or target assignment state, the state machine takes the necessary steps to converge the member to its desired state.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Calvin Liu <caliu@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
3 changed files
1,007 additions
0 deletions
DATE:May 8, 2023
-----------

KAFKA-14926: Remove metrics on Log Cleaner shutdown (#13623)
    
When Log cleaning is shutdown, it doesn't remove metrics that were registered to `KafkaYammerMetrics.defaultRegistry()` which has one instance per server. Log cleaner's lifecycle is associated with lifecycle of `LogManager` and hence, there is no possibility where log cleaner will be shutdown but the broker won't. Broker shutdown will close the `jmxReporter` and hence, there is no current metric leak here. The motivation for this code change is to "do the right thing" from a code hygiene perspective.

Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Kirk True <kirk@mustardgrain.com>, David Jacot <djacot@confluent.io>
2 changed files
61 additions
12 deletions
DATE:May 5, 2023
-----------

KAFKA-14662: Update the ACL list in the doc (#13660)
    
Added the missing ACLs to the doc.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
126 additions
0 deletions
DATE:May 8, 2023
-----------

      HOTFIX: fix file deletions left out of MINOR: improve QuorumControlle…
    
…r logging #13540
3 changed files
0 additions
2 deletions
DATE:May 4, 2023
-----------

      MINOR: remove kraft readme link (#13691)
    
The config/kraft/README.md is already removed. We should also remove the link.

Reviewers: dengziming <dengziming1993@gmail.com>
5 changed files
5 additions
5 deletions
DATE:May 10, 2023
-----------

KAFKA-14916: Fix code that assumes transactional ID implies all recor…
    
…ds are transactional (#13607)

Also modifies verification to only add a partition to verify if it is transactional.

When verifying we look at all the transactional producer IDs and throw INVALID_RECORD on the request if one is different.

Reviewers: Kirk True <ktrue@confluent.io>, Artem Livshits <alivshits@confluent.io>, Jason Gustafson <jason@confluent.io>
4 changed files
105 additions
15 deletions
DATE:May 4, 2023
-----------

KAFKA-14840: Support for snapshots during ZK migration (#13461)
    
This patch adds support for handling metadata snapshots while in dual-write mode. Prior to this change, if the active
controller loaded a snapshot, it would get out of sync with the ZK state.

In order to reconcile the snapshot state with ZK, several methods were added to scan through the metadata in ZK to
compute differences with the MetadataImage. Since this introduced a lot of code, I opted to split out a lot of methods
from ZkMigrationClient into their own client interfaces, such as TopicMigrationClient, ConfigMigrationClient, and
AclMigrationClient. Each of these has some iterator method that lets the caller examine the ZK state in a single pass
and without using too much memory.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Luke Chen <showuon@gmail.com>
29 changed files
2,725 additions
1,394 deletions
DATE:May 5, 2023
-----------

      MINOR: Reduce number of threads created for integration test brokers (#…

…13655)

The integration tests seem to create an unnecessarily large number of threads. This reduces the number of threads created per integration test harness broker.

Reviewers: Luke Chen <showuon@gmail.com>. Justine Olshan <jolshan@confluent.io>
5 changed files
8 additions
13 deletions
DATE:May 4, 2023
-----------

KAFKA-14752: Kafka examples improvements - processor changes (#13516)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
120 additions
106 deletions
DATE:May 11, 2023
-----------

KAFKA-14500; [1/N] Rewrite MemberMetadata in Java (#13644)
    
This patch adds GenericGroupMember which is a rewrite of MemberMetadata in Java.

Reviewers: David Jacot <djacot@confluent.io>
3 changed files
751 additions
0 deletions
DATE:May 9, 2023
-----------

KAFKA-14514; Add Range Assignor on the Server (KIP-848) (#13443)
    
This patch adds the RangeAssignor on the server for KIP-848. This range assignor is very different from the old client side implementation. We added functionality to make these assignments sticky while also inheriting crucial properties of the range assignor such as facilitating joins and distributing partitions of a topic somewhat equally amongst its subscribers.

Reviewers: Philip Nee <philipnee@gmail.com>, Jeff Kim <jeff.kim@confluent.io>, David Jacot <djacot@confluent.io>
8 changed files
806 additions
12 deletions
DATE:May 10, 2023
-----------

KAFKA-14752: Kafka examples improvements - producer changes (#13515)
    
KAFKA-14752: Kafka examples improvements - producer changes

Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov <christololov@gmail.com>
4 changed files
131 additions
95 deletions
DATE:May 8, 2023
-----------

      MINOR: improve QuorumController logging #13540

When creating the QuorumController, log whether ZK migration is enabled.

When applying a feature level record which sets the metadata version, log the metadata version enum
rather than the numeric feature level.

Improve the logging when we replay snapshots in QuorumController. Log both the beginning and the
end of replay.

When TRACE is enabled, log every record that is replayed in QuorumController. Since some records
may contain sensitive information, create RecordRedactor to assist in logging only what is safe to
put in the log4j file.

Add logging to ControllerPurgatory. Successful completions are logged at DEBUG; failures are logged
at INFO, and additions are logged at TRACE.

Remove SnapshotReason.java, SnapshotReasonTest.java, and
QuorumController#generateSnapshotScheduled. They are deadcode now that snapshot generation moved to
org.apache.kafka.image.publisher.SnapshotGenerator.

Reviewers: David Arthur <mumrah@gmail.com>, José Armando García Sancio <jsancio@apache.org>
8 changed files
228 additions
177 deletions
DATE:May 4, 2023
-----------

      MINOR: Fix producer Callback comment (#13669)
    
Fixes the wrong exception name: OffsetMetadataTooLargeException.

Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Luke Chen <showuon@gmail.com>
1 changed file
14 additions
14 deletions
DATE:May 8, 2023
-----------

KAFKA-14766: Improve performance of VarInt encoding and decoding (#13312

)

Motivation

Reading/writing the protocol buffer varInt32 and varInt64 (also called varLong in our code base) is in the hot path of data plane code in Apache Kafka. We read multiple varInt in a record and in long. Hence, even a minor change in performance could extrapolate to larger performance benefit.

In this PR, we only update varInt32 encoding/decoding.
Changes

This change uses loop unrolling and reduces the amount of repetition of calculations. Based on the empirical results from the benchmark, the code has been modified to pick up the best implementation.
Results

Performance has been evaluated using JMH benchmarks on JDK 17.0.6. Various implementations have been added in the benchmark and benchmarking has been done for different sizes of varints and varlongs. The benchmark for various implementations have been added at ByteUtilsBenchmark.java

Reviewers: Ismael Juma <mlists@juma.me.uk>, Luke Chen <showuon@gmail.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>
4 changed files
772 additions
65 deletions
DATE:May 5, 2023
-----------

      MINOR: Remove unused methods in CoreUtils (#13170)
    

Reviewers: Josep Prat <josep.prat@aiven.io>, Christo Lolov <christololov@gmail.com>
2 changed files
7 additions
66 deletions
DATE:May 11, 2023
-----------

KAFKA-14978 ExactlyOnceWorkerSourceTask should remove parent metrics (#…

…13690)

Reviewers: Chris Egerton <chrise@aiven.io>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
2 changed files
21 additions
0 deletions
DATE:May 10, 2023
-----------

KAFKA-14974: Restore backward compatibility in KafkaBasedLog (#13688)
    
`KafkaBasedLog` is a widely used utility class that provides a generic implementation of a shared, compacted log of records in a Kafka topic. It isn't in Connect's public API, but has been used outside of Connect and we try to preserve backward compatibility whenever possible. KAFKA-14455 modified the two overloaded void `KafkaBasedLog::send` methods to return a `Future`. While this change is source compatible, it isn't binary compatible. We can restore backward compatibility simply by renaming the new Future returning send methods, and reinstating the older send methods to delegate to the newer methods.

This refactoring changes no functionality other than restoring the older methods.

Reviewers: Randall Hauch <rhauch@gmail.com>
3 changed files
40 additions
11 deletions
DATE:May 9, 2023
-----------

KAFKA-14462; [10/N] Add TargetAssignmentBuilder (#13637)
    
This patch adds TargetAssignmentBuilder. It is responsible for computing a target assignment for a given group.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
3 changed files
1,027 additions
3 deletions
DATE:May 2, 2023
-----------

KAFKA-14639: A single partition may be revoked and assign during a si…
    
…ngle round of rebalance (#13550)

This is a really long story, but the incident started in KAFKA-13419 when we observed a member sending out a topic partition owned from the previous generation when a member missed a rebalance cycle due to REBALANCE_IN_PROGRESS.

This patch changes the AbstractStickyAssignor.AllSubscriptionsEqual method.  In short, it should no long check and validate only the highest generation.  Instead, we consider 3 cases:
1. Member will continue to hold on to its partition if there are no other owners
2. If there are 1+ owners to the same partition. One with the highest generation will win.
3. If two members of the same generation hold on to the same partition.  We will log an error but remove both from the assignment. (Same with the current logic)

Here are some important notes that lead to the patch:
- If a member is kicked out of the group, and `UNKNOWN_MEMBER_ID` will be thrown.
- It seems to be a common situation that members are late to joinGroup and therefore get `REBALANCE_IN_PROGRESS` error.  This is why we don't want to reset generation because it might cause lots of revocations and can be disruptive

To summarize the current behavior of different errors:
`REBALANCE_IN_PROGRESS`
- heartbeat: requestRejoin if member state is stable
- joinGroup: rejoin immediately
- syncGroup: rejoin immediately
- commit: requestRejoin and fail the commit. Raise this exception if the generation is staled, i.e. another rebalance is already in progress.

`UNKNOWN_MEMBER_ID`
- heartbeat: resetStateAndRejoinif generation hasn't changed. otherwise, ignore
- joinGroup: resetStateAndRejoin if generation unchanged, otherwise rejoin immediately
- syncGroup:  resetStateAndRejoin if generation unchanged, otherwise rejoin immediately

`ILLEGAL_GENERATION`
- heartbeat: resetStateAndRejoinif generation hasn't changed. otherwise, ignore
- syncGroup: raised the exception if generation has been resetted or the member hasn't completed rebalancing.  then resetStateAndRejoin if generation unchanged, otherwise rejoin immediately

Reviewers: David Jacot <djacot@confluent.io>
2 changed files
130 additions
32 deletions
DATE:Apr 28, 2023
-----------

KAFKA-14462; [8/N] Add ConsumerGroupMember (#13538)
    
This patch adds ConsumerGroupMember.

Reviewers: Christo Lolov <lolovc@amazon.com>, Jeff Kim <jeff.kim@confluent.io>, Jason Gustafson <jason@confluent.io>
3 changed files
924 additions
0 deletions
DATE:Apr 25, 2023
-----------

KAFKA-14859: SCRAM ZK to KRaft migration with dual write (#13628)
    
Handle migrating SCRAM records in ZK when migrating from ZK to KRaft.

This includes handling writing back SCRAM records to ZK while in dual write mode where metadata updates are written to both the KRaft metadata log and to ZK. This allows for rollback of migration to include SCRAM metadata changes.

Reviewers: David Arthur <mumrah@gmail.com>
6 changed files
124 additions
8 deletions
DATE:May 1, 2023
-----------

KAFKA-14929: Fixing flaky test putTopicStateRetriableFailure (#13634)
    
Co-authored-by: Sagar Rao <sagarrao@Sagars-MacBook-Pro.local>

Reviewers: Daniel Urban <durban@cloudera.com>, Justine Olshan <jolshan@confluent.io>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
1 changed file
2 additions
2 deletions
DATE:Apr 26, 2023
-----------

KAFKA-14584: Deprecate StateChangeLogMerger tool (#13171)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
2 additions
3 deletions
DATE:Apr 28, 2023
-----------

KAFKA-14933: Document Connect's log level REST APIs from KIP-495 (#13636

)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Manyanda Chitimbo <manyanda.chitimbo@gmail.com>
2 changed files
20 additions
2 deletions
DATE:Apr 25, 2023
-----------

      MINOR: Upgrade gradle to 8.1.1 (#13625)
    
Also upgrade gradle plugins:
 - `org.owasp.dependencycheck` gradle plugin to version `8.2.1`
 - `com.github.johnrengelman.shadow gradle` plugin to version `8.1.1`

Gradle release notes:
* https://docs.gradle.org/8.1.1/release-notes.html

Reviewers: Ismael Juma <ismael@juma.me.uk>
4 changed files
10 additions
9 deletions
DATE:Apr 25, 2023
-----------

KAFKA-12446: update change encoding to use varint (#13533)
    
KIP-904 had the goal in mind to save space when encoding the size on a byte array. However, using UINT32 does not achieve this goal. This PR changes the encoding to VARINT instead.

Reviewers: Victoria Xia <victoria.xia@confluent.io>,  Farooq Qaiser <fqaiser94@gmail.com>, Walker Carlson <wcarlson@confluent.io>
3 changed files
103 additions
80 deletions
DATE:Apr 24, 2023
-----------

KAFKA-14834: [12/N] Minor code cleanups relating to versioned stores (#…

…13615)

Reviewers: Matthias J. Sax <matthias@confluent.io>
9 changed files
280 additions
255 deletions
DATE:Apr 24, 2023
-----------

      MINOR: fix zookeeper_migration_test.py (#13620)
    
Reviewers: Mickael Maison <mimaison@users.noreply.github.com>
1 changed file
3 additions
3 deletions
DATE:Apr 24, 2023
-----------

KAFKA-14592: Move FeatureCommand to tools (#13459)
    
KAFKA-14592: Move FeatureCommand to tools

Reviewers: Luke Chen <showuon@gmail.com>
8 changed files
653 additions
627 deletions
DATE:Apr 25, 2023
-----------

KAFKA-14905: Reduce flakiness in MM2 ForwardingAdmin test due to admi…
    
…n timeouts (#13575)

Reduce flakiness of `MirrorConnectorsWithCustomForwardingAdminIntegrationTest`

Reviewers: Josep Prat <jlprat@apache.org>
1 changed file
24 additions
38 deletions
DATE:Apr 21, 2023
-----------

      MINOR: only set sslEngine#setUseClientMode to false once when ssl mod…
    
…e is server (#13626)

The sslEngine.setUseClientMode(false) was duplicated when ssl mode is server during SSLEngine creation
in DefaultSslEngineFactory.java. The patch attemps to remove the duplicated call.

Reviewers:   maulin-vasavada <maulin.vasavada@gmail.com>, Divij Vaidya <diviv@amazon.com>, Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
0 additions
1 deletion
DATE:Apr 25, 2023
-----------

      MINOR: remove spurious call to fatalFaultHandler (#13651)
    
Remove a spurious call to fatalFaultHandler accidentally introduced by KAFKA-14805.  We should only
invoke the fatal fault handller if we are unable to generate the activation records. If we are
unable to write the activation records, a controller failover should be sufficient to remedy the
situation.

Co-authored-by: Luke Chen showuon@gmail.com

Reviewers: Luke Chen <showuon@gmail.com>, David Arthur <mumrah@gmail.com>
2 changed files
13 additions
8 deletions
DATE:Apr 28, 2023
-----------

      MINOR: Move ControllerPurgatory to server-common (#13555)
    
This patch renames from `ControllerPurgatory` to `DeferredEventQueue` and moves it from the `metadata` module to `server-common` module.

Reviewers: Alexandre Dupriez <alexandre.dupriez@gmail.com>, Ziming Deng <dengziming1993@gmail.com>, José Armando García Sancio <jsancio@apache.org>
5 changed files
48 additions
45 deletions
DATE:Apr 21, 2023
-----------

KAFKA-14462; [7/N] Add ClientAssignor, Assignment, TopicMetadata and …
    
…VersionedMetadata (#13537)

This patch adds ClientAssignor, Assignment, TopicMetadata and VersionedMetadata classes.

Reviewers: Christo Lolov <lolovc@amazon.com>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
9 changed files
985 additions
0 deletions
DATE:Apr 21, 2023
-----------

      MINOR: Fixing typos in the ConsumerCoordinator (#13618)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Christo Lolov <lolovc@amazon.com>, David Jacot <djacot@confluent.io>
1 changed file
6 additions
6 deletions
DATE:Apr 28, 2023
-----------

      MINOR: Fix Javadoc for configureAdminResources in Connect's RestServer (
    
#13635)

Reviewers: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>, Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
1 deletion
DATE:May 1, 2023
-----------

      MINOR: Adding reviewers.py (#11096)
    
This script can be used to help build the "Reviewers: " string we include in commit messages.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Luke Chen <showuon@gmail.com>, José Armando García Sancio <jsancio@apache.org>
1 changed file
76 additions
0 deletions
DATE:Apr 27, 2023
-----------

      Revert "KAFKA-14908: Set setReuseAddress on the kafka server socket (#…

…13572)"

This reverts commit d04c3e5.
2 changed files
1 addition
41 deletions
DATE:Apr 20, 2023
-----------

KAFKA-14462; [9/N] Add RecordHelpers (#13544)
    
This patch adds RecordHelpers.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
2 changed files
757 additions
0 deletions
DATE:Apr 27, 2023
-----------

KAFKA-14828: Remove R/W locks using persistent data structures (#13437)
    
Currently, StandardAuthorizer uses a R/W lock for maintaining the consistency of data. For the clusters with very high traffic, we will typically see an increase in latencies whenever a write operation comes. The intent of this PR is to get rid of the R/W lock with the help of immutable or persistent collections. Basically, new object references are used to hold the intermediate state of the write operation. After the completion of the operation, the main reference to the cache is changed to point to the new object. Also, for the read operation, the code is changed such that all accesses to the cache for a single read operation are done to a particular cache object only.

In the PR description, you can find the performance of various libraries at the time of both read and write. Read performance is checked with the existing AuthorizerBenchmark. For write performance, a new AuthorizerUpdateBenchmark has been added which evaluates the performance of the addAcl operation.


Reviewers:  Ron Dagostino <rndgstn@gmail.com>, Manikumar Reddy <manikumar.reddy@gmail.com>,  Divij Vaidya <diviv@amazon.com>
11 changed files
1,154 additions
234 deletions
DATE:Apr 21, 2023
-----------

KAFKA-14944: Reduce CompletedFetch#parseRecord() memory copy (#12545)
    
This implements KIP-863: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=225152035
Direct use ByteBuffer instead of byte[] to deserialize.

Reviewers: Luke Chen <showuon@gmail.com>, Kirk True <kirk@kirktrue.pro>
15 changed files
243 additions
18 deletions
DATE:Apr 27, 2023
-----------

      MINOR: updated KS release notes for 3.5 (#13577)
    
Reviewers: Walker Carlson <wcarlson@confluent.io>
2 changed files
51 additions
15 deletions
DATE:Apr 21, 2023
-----------

KAFKA-14876: Document the new 'GET /connectors/{name}/offsets' REST A…
    
…PI for Connect (#13587)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
0 deletions
DATE:Apr 24, 2023
-----------

KAFKA-14909: check zkMigrationReady tag before migration (#13631)
    
1. add ZkMigrationReady in apiVersionsResponse
2. check all nodes if ZkMigrationReady are ready before moving to next migration state

Reviewers: David Arthur <mumrah@gmail.com>, dengziming <dengziming1993@gmail.com>
20 changed files
310 additions
106 deletions
DATE:Apr 28, 2023
-----------

      MINOR: fix noticed typo in raft and metadata projects (#13612)
    
Reviewers: Josep Prat <jlprat@apache.org>
10 changed files
13 additions
13 deletions
DATE:Apr 21, 2023
-----------

      MINOR: Fix incorrect description of SessionLifetimeMs (#13649)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 28, 2023
-----------

KAFKA-14862: Outer stream-stream join does not output all results wit…
    
…h multiple input partitions (#13592)

Stream-stream outer join, uses a "shared time tracker" to track stream-time progress for left and right input in a single place. This time tracker is incorrectly shared across tasks.

This PR introduces a supplier to create a "shared time tracker" object per task, to be shared between the left and right join processors.

Reviewers: Victoria Xia <victoria.xia@confluent.io>, Bruno Cadonna <bruno@confluent.io>, Walker Carlson <wcarlson@confluent.io>
5 changed files
217 additions
15 deletions
DATE:Apr 24, 2023
-----------

KAFKA-14943: Fix ClientQuotaControlManager validation
    
Don't allow setting negative or zero values for quotas. Don't allow SCRAM mechanism names to be
used as client quota names. SCRAM mechanisms are not client quotas. (The confusion arose because of
internal ZK representation details that treated them both as "client configs.")

Add unit tests for ClientQuotaControlManager.isValidIpEntity and
ClientQuotaControlManager.configKeysForEntityType.

This change doesn't affect metadata record application, only input validation. If there are bad
client quotas that are set currently, this change will not alter the current behavior (of throwing
an exception and ignoring the bad quota).
4 changed files
240 additions
43 deletions
DATE:Apr 27, 2023
-----------

KAFKA-14805 KRaft controller supports pre-migration mode (#13407)
    
This patch adds the concept of pre-migration mode to the KRaft controller. While in this mode, 
the controller will only allow certain write operations. The purpose of this is to disallow metadata 
changes when the controller is waiting for the ZK migration records to be committed.

The following ControllerWriteEvent operations are permitted in pre-migration mode

* completeActivation
* maybeFenceReplicas
* writeNoOpRecord
* processBrokerHeartbeat
* registerBroker (only for migrating ZK brokers)
* unregisterBroker

Raft events and other controller events do not follow the same code path as ControllerWriteEvent, 
so they are not affected by this new behavior.

This patch also add a new metric as defined in KIP-868: kafka.controller:type=KafkaController,name=ZkMigrationState

In order to support upgrades from 3.4.0, this patch also redefines the enum value of value 1 to mean 
MIGRATION rather than PRE_MIGRATION.

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
28 changed files
1,049 additions
251 deletions
DATE:Apr 26, 2023
-----------

KAFKA-14834: [13/N] Docs updates for versioned store semantics (#13622)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
5 changed files
81 additions
8 deletions
DATE:Apr 26, 2023
-----------

KAFKA-14904: Pending state blocked verification of transactions (#13579)
    
KAFKA-14561 added verification to transactional produce requests to confirm an ongoing transaction.

There is an edge case where the transaction is added, but the coordinator is writing to the log for another partition. In this case, when verifying, we return CONCURRENT_TRANSACTIONS and retry. However, the next inflight batch is often successful because the write completes.

When a partition has no entry in the PSM, it will allow any sequence number. This means if we retry the first write to the partition (or first write in a while) we will never be able to write it and get OutOfOrderSequence exceptions. This is a known issue. Since the verification makes this more common, I propose allowing verification on pending ongoing state since the pending state doesn't prevent us from checking the already added partitions.

The good news is part 2 of KIP-890 will allow us to enforce that the first write for a transaction is sequence 0 and this issue will go away entirely.

This PR also adds the locking back into the addPartitions/verify path that was incorrectly removed.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Artem Livshits <alivshits@confluent.io>, Jason Gustafson <jason@confluent.io>
2 changed files
112 additions
48 deletions
DATE:Apr 20, 2023
-----------

KAFKA-14666: Add MM2 in-memory offset translation index for offsets b…
    
…ehind replication (#13429)

Reviewers: Daniel Urban <durban@cloudera.com>, Chris Egerton <chrise@aiven.io>
5 changed files
516 additions
50 deletions
DATE:Apr 26, 2023
-----------

      MINOR: Add ClusterTool wrapper scripts and redirection (KIP-906) (#13560

)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
3 changed files
47 additions
1 deletion
DATE:Apr 17, 2023
-----------

KAFKA-14054: Handle TimeoutException gracefully (#13534)
    
We incorrectly assumed, that `consumer.position()` should always be
served by the consumer locally set position.

However, within `commitNeeded()` we check if first `if(commitNeeded)`
and thus go into the else only if we have not processed data (otherwise,
`commitNeeded` would be true). For this reason, we actually don't know
if the consumer has a valid position or not.

We should just swallow a timeout if the consumer cannot get the position
from the broker, and try the next partition. If any position advances, we
can return true, and if we timeout for all partitions we can return
false.

Reviewers: Michal Cabak (@miccab), John Roesler <john@confluent.io>, Guozhang Wang <guozhand@confluent.io>
1 changed file
5 additions
7 deletions
DATE:Apr 14, 2023
-----------

      MINOR: Refactor changelogger to accept timestamp (#13563)
    
Reviewers: Bill Bejeck <bill@confluent.io>
8 changed files
52 additions
30 deletions
DATE:Apr 14, 2023
-----------

KAFKA-14868: Remove all ReplicaManager metrics when it is closed (#13471

)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
44 additions
2 deletions
DATE:Apr 19, 2023
-----------

      MINOR: Fixing gradle build during compileScala and compileTestScala (#…

…13588)

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>
2 changed files
2 additions
2 deletions
DATE:Apr 18, 2023
-----------

      MINOR: Correct type of record batch CRC field (#13583)
    
The CRC field of Record Batch was incorrectly documented as int32 while in reality it's an unsigned uint32 field.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 17, 2023
-----------

KAFKA-14869: Bump coordinator value records to flexible versions (KIP…
    
…-915, Part-2) (#13526)

This patch implemented the second part of KIP-915. It bumps the versions of the value records used by the group coordinator and the transaction coordinator to make them flexible versions. The new versions are not used when writing to the partitions but only when reading from the partitions. This allows downgrades from future versions that will include tagged fields.

Reviewers: David Jacot <djacot@confluent.io>
7 changed files
368 additions
20 deletions
DATE:Apr 18, 2023
-----------

      MINOR: Disable the dual write integration test until KAFKA-14840 (#13573

)

Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
2 additions
1 deletion
DATE:Apr 14, 2023
-----------

KAFKA-14586: Adding redirection for StreamsResetter (#13614)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
1 changed file
32 additions
0 deletions
DATE:Apr 20, 2023
-----------

KAFKA-8115: Reduce flakiness in Trogdor JsonRestServer shutdown (#12830)
    
The GRACEFUL_SHUTDOWN_TIMEOUT_MS for the Trogdor JsonRestServer is 100ms.
In heavily loaded CI environments, this timeout can be exceeded. When this happens,
it causes the jettyServer.stop() and jettyServer.destroy() calls to throw exceptions, which
prevents shutdownExecutor.shutdown() from running. This has the effect of causing the JsonRestServer::waitForShutdown method to block for 1 day, which exceeds the 120s
timeout on the CoordinatorTest (and any other test relying on MiniTrogdorCluster).

This change makes it such that the graceful shutdown timeout is less likely to be exceeded,
and when it is, the timeout does not cause the waitForShutdown method to block for much
longer than the graceful shutdown timeout.

Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
7 additions
3 deletions
DATE:Apr 15, 2023
-----------

KAFKA-14887: FinalizedFeatureChangeListener should not shut down when…
    
… ZK session expires

FinalizedFeatureChangeListener shuts the broker down when it encounters an issue trying to process feature change
events. However, it does not distinguish between issues related to feature changes actually failing and other
exceptions like ZooKeeper session expiration. This introduces the possibility that Zookeeper session expiration
could cause the broker to shutdown, which is not intended. This patch updates the code to distinguish between
these two types of exceptions. In the case of something like a ZK session expiration it logs a warning and continues.
We shutdown the broker only for FeatureCacheUpdateException.

Reviewers: Kamal Chandraprakash <kamal.chandraprakash@gmail.com>, Christo Lolov <christololov@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
1 changed file
6 additions
4 deletions
DATE:Apr 19, 2023
-----------

KAFKA-14735: Improve KRaft metadata image change performance at high … (
    
#13280)

topic counts.

Introduces the use of persistent data structures in the KRaft metadata image to avoid copying the entire TopicsImage upon every change.  Performance that was O(<number of topics in the cluster>) is now O(<number of topics changing>), which has dramatic time and GC improvements for the most common topic-related metadata events.  We abstract away the chosen underlying persistent collection library via ImmutableMap<> and ImmutableSet<> interfaces and static factory methods.

Reviewers: Luke Chen <showuon@gmail.com>, Colin P. McCabe <cmccabe@apache.org>, Ismael Juma <ismael@juma.me.uk>, Purshotam Chauhan <pchauhan@confluent.io>
24 changed files
2,148 additions
183 deletions
DATE:Apr 17, 2023
-----------

      MINOR: Add note for KIP-894 (#13547)
    
Add release note for KIP-894

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
5 additions
0 deletions
DATE:Apr 17, 2023
-----------

KAFKA-14869: Ignore unknown record types for coordinators (KIP-915, P…
    
…art-1) (#13511)

This patch implemented the first part of KIP-915. It updates the group coordinator and the transaction coordinator to ignores unknown record types while loading their respective state from the partitions. This allows downgrades from future versions that will include new record types.

Reviewers: Alexandre Dupriez <alexandre.dupriez@gmail.com>, David Jacot <djacot@confluent.io>
6 changed files
186 additions
48 deletions
DATE:Apr 18, 2023
-----------

      MINOR: rename internal FK-join processor classes (#13589)
    
Reviewers: John Roesler <john@confluent.io>, Bill Bejeck <bill@confluent.io>
10 changed files
80 additions
81 deletions
DATE:Apr 18, 2023
-----------

      MINOR: Add ConsumerPerformance tool migration note (#13559)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 17, 2023
-----------

      MINOR: remove unnecessary KeyValueMapper (#13545)
    
Reviewers: Christo Lolov (@clolov), Bill Bejeck <bill@confluent.io>
1 changed file
1 addition
5 deletions
DATE:Apr 14, 2023
-----------

      MINOR: improve ProductionExceptionHandler test (#13576)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
1 addition
0 deletions
DATE:Apr 14, 2023
-----------

      MINOR: Add EndToEndLatency wrapper scripts and redirection (KIP-906) (#…

…13556)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
4 changed files
65 additions
1 deletion
DATE:Apr 17, 2023
-----------

KAFKA-14908: Set setReuseAddress on the kafka server socket (#13572)
    
Changes SocketServer to set the setReuseAddress(true) socket option.

This aids use-cases where kafka is started/stopped on the same port in rapid succession. Examples are: where a kafka cluster is embedded in an integration test suite that starts/stops a cluster before/after each test.

Reviewers: Luke Chen <showuon@gmail.com>, Tom Bentley <tbentley@redhat.com>, Divij Vaidya <diviv@amazon.com>
2 changed files
41 additions
1 deletion
DATE:Apr 19, 2023
-----------

      MINOR: KRaftMetadataCache.getPartitionInfo must set all relevant fields
    
Fix a case where KRaftMetadataCache.getPartitionInfo was not setting all the PartitionInfo fields it
should have been. Add a regression test.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
62 additions
1 deletion
DATE:Apr 17, 2023
-----------

      MINOR: Improve raft log4j messages a bit (#13553)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
4 changed files
57 additions
26 deletions
DATE:Apr 14, 2023
-----------

KAFKA-14790: Add more AddPartitionsToTxn tests in KafkaApis and Autho…
    
…rizer tests (#13502)

Added AddPartitionsToTxn tests to KafkaApis.

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
110 additions
0 deletions
DATE:Apr 14, 2023
-----------

KAFKA-14918 Only send controller RPCs to migrating ZK brokers (#13606)
    
This patch fixes an issue where the KRaft controller could incorrectly send ZK controller RPCs to KRaft brokers.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
118 additions
9 deletions
DATE:Apr 19, 2023
-----------

KAFKA-14902: KafkaStatusBackingStore retries on a dedicated backgroun…
    
…d thread to avoid stack overflows (#13557)

KafkaStatusBackingStore uses an infinite retry logic on producer send, which can lead to a stack overflow.
To avoid the problem, a background thread was added, and the callback submits the retry onto the background thread.
2 changed files
34 additions
2 deletions
DATE:Apr 18, 2023
-----------

      MINOR: fix typos in MigrationClient, StandardAuthorizer, StandardAuth…
    
…orizerData and KafkaConfigSchema files (#13593)

Reviewers: Luke Chen <showuon@gmail.com>
4 changed files
4 additions
4 deletions
DATE:Apr 18, 2023
-----------

      MINOR: fix some flaky KRaft-related tests (#13543) (#13543)
    
In SharedServer, fix some cases where a volatile variable could change to null while we were using
it, during shutdown. This is mainly a junit test issue, although it could also cause ugly error
messages during shutdown when running the server in a production context.

Fix a race in KafkaEventQueueTest.testSize.

Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
19 additions
18 deletions
DATE:Apr 14, 2023
-----------

      Update zstd to 1.5.5 (#13567)
    
1.5.4 is a large release that offers significant performance improvements across
multiple scenarios, as well as new features.

1.5.5 is a smaller release that corrects a rare corruption bug and improves performance
in some scenarios.

It looks like 1.5.3 was retracted or never released.

Zstandard release notes:
* 1.5.4: https://github.com/facebook/zstd/releases/tag/v1.5.4
* 1.5.5: https://github.com/facebook/zstd/releases/tag/v1.5.5

zstd-jni diff: luben/zstd-jni@v1.5.2-1...v1.5.5-1

Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Apr 15, 2023
-----------

KAFKA-13299: Accept duplicate listener on port for IPv4/IPv6 (#11478)
    
Loosens the validation so that Kafka can accept duplicate listeners on the same port but if and only if the listeners are valid IP addresses with one address being an IPv4 address and the other being an IPv6 address.

Reviewers: Josep Prat <jlprat@apache.org>, Luke Chen <showuon@apache.org>
6 changed files
116 additions
8 deletions
DATE:Apr 19, 2023
-----------

KAFKA-14821 Implement the listOffsets API with AdminApiDriver (#13432)
    
We are handling complex workflows ListOffsets by chaining together MetadataCall instances and ListOffsetsCall instances, there are many complex and error-prone logic. In this PR we rewrote it with the `AdminApiDriver` infra, notable changes better than old logic:
1. Retry lookup stage on receiving `NOT_LEADER_OR_FOLLOWER` and `LEADER_NOT_AVAILABLE`, whereas in the past we failed the partition directly without retry.
2. Removing class field `supportsMaxTimestamp` and calculating it on the fly to avoid the mutable state, this won't change any behavior of  the client.
3. Retry fulfillment stage on `RetriableException`, whereas in the past we just retry fulfillment stage on `InvalidMetadataException`, this means we will retry on `TimeoutException` and other `RetriableException`.

We also `handleUnsupportedVersionException` to `AdminApiHandler` and `AdminApiLookupStrategy`, they are used to keep consistency with old logic, and we can continue improvise them. 

Reviewers: Ziming Deng <dengziming1993@gmail.com>, David Jacot <djacot@confluent.io>
12 changed files
771 additions
483 deletions
DATE:Apr 20, 2023
-----------

KAFKA-14881: Rework UserScramCredentialRecord (#13513)
    
Rework UserScramCredentialRecord to store serverKey and StoredKey rather than saltedPassword. This
is necessary to support migration from ZK, since those are the fields we stored in ZK.  Update
latest MetadataVersion to IBP_3_5_IV2 and make SCRAM support conditional on this version.  Moved
ScramCredentialData.java from org.apache.kafka.image to org.apache.kafka.metadata, which seems more
appropriate.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
15 changed files
223 additions
76 deletions
DATE:Apr 18, 2023
-----------

KAFKA-14834: [11/N] Update table joins to identify out-of-order recor…
    
…ds with `isLatest` (#13609)

This PR fixes a bug in the table-table join handling of out-of-order records in versioned tables where if the latest value for a particular key is a tombstone, by using the isLatest value from the Change object instead of calling get(key) on the state store to fetch timestamps to compare against. As part of this fix, this PR also updates table-table joins to determine whether upstream tables are versioned by using the GraphNode mechanism, instead of checking the table's value getter.

Part of KIP-914.

Reviewer: Matthias J. Sax <matthias@confluent.io>
25 changed files
730 additions
743 deletions
DATE:Apr 19, 2023
-----------

      Revert "KAFKA-14318: KIP-878, Introduce partition autoscaling configs (…

…#12962)" (#13527)

This reverts commit d9b1392.

KIP-878 implementation did not make any progress, so we need to revert
the public API changes which are not functional right now.

Reviewers: Bill Bejeck <bill@confluent.io>
11 changed files
84 additions
198 deletions
DATE:Apr 14, 2023
-----------

      MINOR: Add StreamsResetter tool migration note (#13586)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 17, 2023
-----------

      MINOR: Deflake some tests in TopicCommandIntegrationTest (#13479)
    
A couple tests in TopicCommandIntegrationTest look flaky, such as testTopicDeletion and testTopicWithCollidingCharDeletionAndCreateAgain.

I also updated part of a comment that implies the code only runs in ZK mode but thats not the case so I removed it.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Justine Olshan <jolshan@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Mar 30, 2023
-----------

KAFKA-14829: Consolidate reassignment logic into PartitionReassignmen…
    
…tReplicas (#13440)

Currently, we have various bits of reassignment logic spread across different classes. For example, ReplicationControlManager contains logic for when a reassignment is in progress, which is duplication in PartitionChangeBuilder. Another example is PartitionReassignmentRevert which contains logic for how to undo/revert a reassignment. The idea here is to move the logic to PartitionReassignmentReplicas so it's more testable and easier to reason about.

Reviewers: José Armando García Sancio <jsancio@apache.org>
7 changed files
243 additions
66 deletions
DATE:Mar 29, 2023
-----------

      MINOR: fix BrokerMetadataPublisherTest.testExceptionInUpdateCoordinator
    
Fix a case where we were getting an exception because we removed a publisher, but left it in
BrokerServer.metadataPublishers (resulting in us trying to remove it during broker shutdown.)
3 changed files
3 additions
2 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14880; TransactionMetadata with producer epoch -1 should be exp…
    
…irable (#13499)

We have seen the following error in logs:

```
"Mar 22, 2019 @ 21:57:56.655",Error,"kafka-0-0","transaction-log-manager-0","Uncaught exception in scheduled task 'transactionalId-expiration'","java.lang.IllegalArgumentException: Illegal new producer epoch -1
```

Investigations showed that it is actually possible for a transaction metadata object to still have -1 as producer epoch when it transitions to Dead.

When a transaction metadata is created for the first time (in handleInitProducerId), it has -1 as its producer epoch. Then a producer epoch is attributed and the transaction coordinator tries to persist the change. If the write fail for instance because there is an under min isr, the transaction metadata remains with its epoch as -1 forever or until the init producer id is retried.

This means that it is possible for transaction metadata to remain with -1 as producer epoch until it gets expired. At the moment, this is not allowed because we enforce a producer epoch greater or equals to 0 in prepareTransitionTo.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>
2 changed files
53 additions
1 deletion
DATE:Apr 6, 2023
-----------

KAFKA-14857: Fix some MetadataLoader bugs (#13462)
    
The MetadataLoader is not supposed to publish metadata updates until we have loaded up to the high
water mark. Previously, this logic was broken, and we published updates immediately. This PR fixes
that and adds a junit test.

Another issue is that the MetadataLoader previously assumed that we would periodically get
callbacks from the Raft layer even if nothing had happened. We relied on this to install new
publishers in a timely fashion, for example. However, in older MetadataVersions that don't include
NoOpRecord, this is not a safe assumption.

Aside from the above changes, also fix a deadlock in SnapshotGeneratorTest, fix the log prefix for
BrokerLifecycleManager, and remove metadata publishers on brokerserver shutdown (like we do for
controllers).

Reviewers: David Arthur <mumrah@gmail.com>, dengziming <dengziming1993@gmail.com>
7 changed files
157 additions
83 deletions
DATE:Mar 29, 2023
-----------

      MINOR: Create only one FeatureControlManager instance in ReplicationC…
    
…ontrolManagerTest (#13468)

This is a small patch to make it so we only create one FeatureControlManager instance in ReplicationControlManagerTest. Currently we create two, which isn't needed. Its also a bit confusing because the ReplicationControlTestContext objects ends up having a different FeatureControlManager reference that the one its own ReplicationControlManager instance has a reference to.

Reviewers: José Armando García Sancio <jsancio@apache.org>, dengziming <dengziming1993@gmail.com>
1 changed file
11 additions
16 deletions
DATE:Mar 30, 2023
-----------

      MINOR: Fix base ConfigDef in AbstractHerder::connectorPluginConfig (#…

…13466)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Greg Harris <gharris1727@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 4, 2023
-----------

      Switch to SplittableRandom in ProducerPerformance utility (#13482)
    
Why:
Using java.util.Random to generate every byte sent from the ProducerPerformance
appears to be a limiting factor. Throughput of the ProducerPerformance script is
higher with a file of records as compared to randomly generated records.

On my machine a single thread can generate ~100MB/second of uppercase letters using
java.util.Random and ~300MB/sec using java.util.SplittableRandom. This is a limit on
throughput.

Note: you can optimise further by expanding it from 26 letters to 32 letter generated
as it is more efficient to generate a nicely distributed int when the bound is a
power of two.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
8 additions
7 deletions
DATE:Mar 31, 2023
-----------

      Minor: fix ReadOnlyTaskTest (#13519)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
4 additions
0 deletions
DATE:Apr 6, 2023
-----------

      MINOR: fix invalid usage in java docs (#13506)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
4 additions
4 deletions
DATE:Apr 6, 2023
-----------

      Fix typos in security.html (#13480)
    
Reviewers: Divij Vaidya <diviv@amazon.com>,  Jun Rao <junrao@gmail.com>
1 changed file
3 additions
3 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14838: Add flow/connector/task/role information to MM2 Kafka cl…
    
…ient.id configs (#13458)

Reviewers: Chris Egerton <chrise@aiven.io>
20 changed files
172 additions
59 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14452: Make sticky assignors rack-aware if client rack is confi…
    
…gured (KIP-881) (#13350)

Best-effort rack alignment for sticky assignors when both consumer racks and partition racks are available with the protocol changes introduced in KIP-881. Rack-aware assignment is enabled by configuring client.rack for consumers. The assignment builders attempt to align on racks on a best-effort basis, but prioritize balanced assignment over rack alignment.

Reviewers: David Jacot <djacot@confluent.io>
7 changed files
1,014 additions
479 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14491: [19/N] Combine versioned store RocksDB instances into one (
    
#13431)

The RocksDB-based versioned store implementation introduced in KIP-889 currently uses two physical RocksDB instances per store instance: one for the "latest value store" and another for the "segments store." This PR combines those two RocksDB instances into one by representing the latest value store as a special "reserved" segment within the segments store. This reserved segment has segment ID -1, is never expired, and is not included in the regular Segments methods for getting or creating segments, but is represented in the physical RocksDB instance the same way as any other segment.

Reviewers: Matthias J. Sax <matthias@confluent.io>
8 changed files
440 additions
104 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14617: Update AlterPartitionRequest and enable Kraft controller…
    
… to reject stale request. (#13408)

Second part of the [KIP-903](https://cwiki.apache.org/confluence/display/KAFKA/KIP-903%3A+Replicas+with+stale+broker+epoch+should+not+be+allowed+to+join+the+ISR), it updates the AlterPartitionRequest:
- Deprecate the NewIsr field
- Create a new field BrokerState with BrokerId and BrokerEpoch
- Bump the AlterPartition version to 3

With this change, the Quorum Controller is enabled to reject stale AlterPartition request.

Reviewers: Jun Rao <junrao@gmail.com>, David Jacot <djacot@confluent.io>
14 changed files
326 additions
81 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14864: Close iterator in KStream windowed aggregation emit on w…
    
…indow close (#13470)

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
22 additions
18 deletions
DATE:Apr 4, 2023
-----------

      Use readlock for reading epochs in LeaderEpochFIleCache (#13483)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
1 changed file
2 additions
3 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14850: introduce InMemoryLeaderEpochCheckpoint (#13456)
    
The motivation for introducing InMemoryLeaderEpochCheckpoint is to allow remote log manager to create the RemoteLogSegmentMetadata(RLSM) with the correct leader epoch info for a specific segment. To do that, we need to rely on the LeaderEpochCheckpointCache to truncate from start and end, to get the epoch info. However, we don't really want to truncate the epochs in cache (and write to checkpoint file in the end). So, we introduce this InMemoryLeaderEpochCheckpoint to feed into LeaderEpochCheckpointCache, and when we truncate the epoch for RLSM, we can do them in memory without affecting the checkpoint file, and without interacting with file system.

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
4 changed files
163 additions
2 deletions
DATE:Apr 5, 2023
-----------

      Suppress exception in testExceptionInUpdateCoordinator (#13486)
    
Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
2 additions
2 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14867: Trigger rebalance when replica racks change if client.ra…
    
…ck is configured (KIP-881) (#13474)

When `client.rack` is configured for consumers, we perform rack-aware consumer partition assignment to improve locality. After/during reassignments, replica racks may change, so to ensure optimal consumer assignment, trigger rebalance from the leader when set of racks of any partition changes.

Reviewers: David Jacot <djacot@confluent.io>
3 changed files
224 additions
31 deletions
DATE:Mar 31, 2023
-----------

      MINOR: fix stream failing tests (#13512)
    
Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Guozhang Wang <wangguoz@gmail.com>
2 changed files
6 additions
11 deletions
DATE:Apr 6, 2023
-----------

      MINOR: move RecordReader from org.apache.kafka.tools (client module) …
    
…to org.apache.kafka.tools.api (tools-api module) (#13454)

Reviewers: Jun Rao <junrao@gmail.com>
8 changed files
118 additions
5 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14376: Add ConfigProvider to make use of environment variables …
    
…KIP-887 (#12992)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>, Jordan Moore <crikket.007@gmail.com>, Chris Egerton <fearthecellos@gmail.com>
3 changed files
236 additions
0 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14172: Should clear cache when active recycled from standby (#1…

…3369)

This fix is inspired by #12540.

1. Added a clearCache function for CachedStateStore, which would be triggered upon recycling a state manager.
2. Added the integration test inherited from #12540 .
3. Improved some log4j entries.
4. Found and fixed a minor issue with log4j prefix.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
14 changed files
411 additions
6 deletions
DATE:Apr 5, 2023
-----------

      MINOR: Change ordering of checks to prevent log spam on metadata upda…
    
…tes (#13447)

On startup, we always update the metadata. The topic ID also goes from null to defined. Move the epoch is null check to before the topic ID check to prevent log spam.

Reviewers: David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>
1 changed file
9 additions
3 deletions
DATE:Mar 30, 2023
-----------

      MINOR: Remove addOne to fix build (#13469)
    
Removed addOne method that broke scala 2.12 build

---------

Co-authored-by: David Arthur <mumrah@gmail.com>

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Jason Gustafson <jason@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Mar 29, 2023
-----------

KAFKA-10199: Add task updater metrics, part 2 (#13300)
    
Part of KIP-869

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
17 changed files
300 additions
156 deletions
DATE:Apr 5, 2023
-----------

KAFKA-14468: Committed API (#13380)
    
In this PR, I implemented the committed API. Here are the specifics:

* the CommitRequestManager handles committed() request.
* I implemented a UnsentOffsetFetchRequestState to handle deduping the request: because we don't want to send the exact requests repeatedly.
* I implemented the retry mechanism: Some retriable errors will be retried automatically
* ClientResponse errors are handled in the handlers.
* Some of the top-level APIs were refactored lightly.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
9 changed files
781 additions
124 deletions
DATE:Mar 29, 2023
-----------

KAFKA-14785 (KIP-875): Connect offset read REST API (#13434)
    
Reviewers: Chris Egerton <chrise@aiven.io>
33 changed files
1,564 additions
157 deletions
DATE:Apr 2, 2023
-----------

KAFKA-14771: Include threads info in ConcurrentModificationException …
    
…message (#13325)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
6 additions
2 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14491: [16/N] Add recovery logic for store inconsistency due to…
    
… failed write (#13364)

The RocksDB-based implementation of versioned stores introduced via KIP-889 consists of a "latest value store" and separate (logical) "segments stores." A single put operation may need to modify multiple (two) segments, or both a segment and the latest value store, which opens the possibility to store inconsistencies if the first write succeeds while the later one fails. When this happens, Streams will error out, but the store still needs to be able to recover upon restart. This PR adds the necessary repair logic into RocksDBVersionedStore to effectively undo the earlier failed write when a store inconsistency is encountered.

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
322 additions
153 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14491: [20/N] Add public-facing methods for versioned stores (#…

…13442)

Until this PR, all the code added for KIP-889 for introducing versioned stores to Kafka Streams has been accessible from internal packages only. This PR exposes the stores via public Stores.java methods, and also updates the TopologyTestDriver.

Reviewers: Matthias J. Sax <matthias@confluent.io>
8 changed files
284 additions
42 deletions
DATE:Apr 5, 2023
-----------

      MINOR: add under-min-isr string to log messages (#13508)
    
Whenever there are changes to the ISR, add an extra string to the existing log message in case the partition is under min ISR. This makes it easier to search the log when partitions go under min-ISR.

Reviewers: Luke Chen <showuon@gmail.com>, Colin Patrick McCabe <colin@cmccabe.xyz>
1 changed file
4 additions
2 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14533: Do not interrupt state-updater thread during shutdown (#…

…13318)

1. Fix the StateUpdater shutdown procedure: a) in shutdown, we first set the running flag, then notify the condition; b) in the thread's waitIfAllChangelogsCompletelyRead block, we collapse the if condition together with the while condition so that we always check all four conditions once the thread is notified inside the while loop. As a result, shutdown procedure would not involve any thread interruptions anymore.
2. Print fine-grained streams exception when list-offset fails, this is a byproduct of the debugging procedure but I think it's worth keeping since it has better operational visibilities.
3. Some nit logging improvements (including moving logger from the inner thread into the outer class to also add some more logging).
4. Re-enable state-updater in SmokeTestDriverIntegrationTest.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Bruno Cadonna <cadonna@apache.org>
10 changed files
112 additions
117 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14765 and KAFKA-14776: Support for SCRAM at bootstrap with inte…
    
…gration tests (#13374)

Implement KIP-900

Update kafka-storage to be able to add SCRAM records to the bootstrap metadata file at format time so that SCRAM is enabled at initial start (bootstrap) of KRaft cluster. Includes unit tests.

Update ./core/src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala to use bootstrap and
enable the test to run with both ZK and KRaft quorum.

Moved the one test from ScramServerStartupTest.scala into SaslScramSslEndToEndAuthorizationTest.scala. This test is really small, so there was no point in recreating all the bootstrap startup just for a 5 line test when it could easily be run elsewhere.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Manikumar Reddy <manikumar.reddy@gmail.com>
15 changed files
456 additions
131 deletions
DATE:Apr 4, 2023
-----------

      MINOR: Deflake some tests in TopicCommandIntegrationTest (#13479)
    
A couple tests in TopicCommandIntegrationTest look flaky, such as testTopicDeletion and testTopicWithCollidingCharDeletionAndCreateAgain.

I also updated part of a comment that implies the code only runs in ZK mode but thats not the case so I removed it.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Justine Olshan <jolshan@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Mar 30, 2023
-----------

KAFKA-14829: Consolidate reassignment logic into PartitionReassignmen…
    
…tReplicas (#13440)

Currently, we have various bits of reassignment logic spread across different classes. For example, ReplicationControlManager contains logic for when a reassignment is in progress, which is duplication in PartitionChangeBuilder. Another example is PartitionReassignmentRevert which contains logic for how to undo/revert a reassignment. The idea here is to move the logic to PartitionReassignmentReplicas so it's more testable and easier to reason about.

Reviewers: José Armando García Sancio <jsancio@apache.org>
7 changed files
243 additions
66 deletions
DATE:Mar 29, 2023
-----------

      MINOR: fix BrokerMetadataPublisherTest.testExceptionInUpdateCoordinator
    
Fix a case where we were getting an exception because we removed a publisher, but left it in
BrokerServer.metadataPublishers (resulting in us trying to remove it during broker shutdown.)
3 changed files
3 additions
2 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14880; TransactionMetadata with producer epoch -1 should be exp…
    
…irable (#13499)

We have seen the following error in logs:

```
"Mar 22, 2019 @ 21:57:56.655",Error,"kafka-0-0","transaction-log-manager-0","Uncaught exception in scheduled task 'transactionalId-expiration'","java.lang.IllegalArgumentException: Illegal new producer epoch -1
```

Investigations showed that it is actually possible for a transaction metadata object to still have -1 as producer epoch when it transitions to Dead.

When a transaction metadata is created for the first time (in handleInitProducerId), it has -1 as its producer epoch. Then a producer epoch is attributed and the transaction coordinator tries to persist the change. If the write fail for instance because there is an under min isr, the transaction metadata remains with its epoch as -1 forever or until the init producer id is retried.

This means that it is possible for transaction metadata to remain with -1 as producer epoch until it gets expired. At the moment, this is not allowed because we enforce a producer epoch greater or equals to 0 in prepareTransitionTo.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>
2 changed files
53 additions
1 deletion
DATE:Apr 6, 2023
-----------

KAFKA-14857: Fix some MetadataLoader bugs (#13462)
    
The MetadataLoader is not supposed to publish metadata updates until we have loaded up to the high
water mark. Previously, this logic was broken, and we published updates immediately. This PR fixes
that and adds a junit test.

Another issue is that the MetadataLoader previously assumed that we would periodically get
callbacks from the Raft layer even if nothing had happened. We relied on this to install new
publishers in a timely fashion, for example. However, in older MetadataVersions that don't include
NoOpRecord, this is not a safe assumption.

Aside from the above changes, also fix a deadlock in SnapshotGeneratorTest, fix the log prefix for
BrokerLifecycleManager, and remove metadata publishers on brokerserver shutdown (like we do for
controllers).

Reviewers: David Arthur <mumrah@gmail.com>, dengziming <dengziming1993@gmail.com>
7 changed files
157 additions
83 deletions
DATE:Mar 29, 2023
-----------

      MINOR: Create only one FeatureControlManager instance in ReplicationC…
    
…ontrolManagerTest (#13468)

This is a small patch to make it so we only create one FeatureControlManager instance in ReplicationControlManagerTest. Currently we create two, which isn't needed. Its also a bit confusing because the ReplicationControlTestContext objects ends up having a different FeatureControlManager reference that the one its own ReplicationControlManager instance has a reference to.

Reviewers: José Armando García Sancio <jsancio@apache.org>, dengziming <dengziming1993@gmail.com>
1 changed file
11 additions
16 deletions
DATE:Mar 30, 2023
-----------

      MINOR: Fix base ConfigDef in AbstractHerder::connectorPluginConfig (#…

…13466)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Greg Harris <gharris1727@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Apr 4, 2023
-----------

      Switch to SplittableRandom in ProducerPerformance utility (#13482)
    
Why:
Using java.util.Random to generate every byte sent from the ProducerPerformance
appears to be a limiting factor. Throughput of the ProducerPerformance script is
higher with a file of records as compared to randomly generated records.

On my machine a single thread can generate ~100MB/second of uppercase letters using
java.util.Random and ~300MB/sec using java.util.SplittableRandom. This is a limit on
throughput.

Note: you can optimise further by expanding it from 26 letters to 32 letter generated
as it is more efficient to generate a nicely distributed int when the bound is a
power of two.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
8 additions
7 deletions
DATE:Mar 31, 2023
-----------

      Minor: fix ReadOnlyTaskTest (#13519)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
4 additions
0 deletions
DATE:Apr 6, 2023
-----------

      MINOR: fix invalid usage in java docs (#13506)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
4 additions
4 deletions
DATE:Apr 6, 2023
-----------

      Fix typos in security.html (#13480)
    
Reviewers: Divij Vaidya <diviv@amazon.com>,  Jun Rao <junrao@gmail.com>
1 changed file
3 additions
3 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14838: Add flow/connector/task/role information to MM2 Kafka cl…
    
…ient.id configs (#13458)

Reviewers: Chris Egerton <chrise@aiven.io>
20 changed files
172 additions
59 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14452: Make sticky assignors rack-aware if client rack is confi…
    
…gured (KIP-881) (#13350)

Best-effort rack alignment for sticky assignors when both consumer racks and partition racks are available with the protocol changes introduced in KIP-881. Rack-aware assignment is enabled by configuring client.rack for consumers. The assignment builders attempt to align on racks on a best-effort basis, but prioritize balanced assignment over rack alignment.

Reviewers: David Jacot <djacot@confluent.io>
7 changed files
1,014 additions
479 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14491: [19/N] Combine versioned store RocksDB instances into one (
    
#13431)

The RocksDB-based versioned store implementation introduced in KIP-889 currently uses two physical RocksDB instances per store instance: one for the "latest value store" and another for the "segments store." This PR combines those two RocksDB instances into one by representing the latest value store as a special "reserved" segment within the segments store. This reserved segment has segment ID -1, is never expired, and is not included in the regular Segments methods for getting or creating segments, but is represented in the physical RocksDB instance the same way as any other segment.

Reviewers: Matthias J. Sax <matthias@confluent.io>
8 changed files
440 additions
104 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14617: Update AlterPartitionRequest and enable Kraft controller…
    
… to reject stale request. (#13408)

Second part of the [KIP-903](https://cwiki.apache.org/confluence/display/KAFKA/KIP-903%3A+Replicas+with+stale+broker+epoch+should+not+be+allowed+to+join+the+ISR), it updates the AlterPartitionRequest:
- Deprecate the NewIsr field
- Create a new field BrokerState with BrokerId and BrokerEpoch
- Bump the AlterPartition version to 3

With this change, the Quorum Controller is enabled to reject stale AlterPartition request.

Reviewers: Jun Rao <junrao@gmail.com>, David Jacot <djacot@confluent.io>
14 changed files
326 additions
81 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14864: Close iterator in KStream windowed aggregation emit on w…
    
…indow close (#13470)

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
22 additions
18 deletions
DATE:Apr 4, 2023
-----------

      Use readlock for reading epochs in LeaderEpochFIleCache (#13483)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
1 changed file
2 additions
3 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14850: introduce InMemoryLeaderEpochCheckpoint (#13456)
    
The motivation for introducing InMemoryLeaderEpochCheckpoint is to allow remote log manager to create the RemoteLogSegmentMetadata(RLSM) with the correct leader epoch info for a specific segment. To do that, we need to rely on the LeaderEpochCheckpointCache to truncate from start and end, to get the epoch info. However, we don't really want to truncate the epochs in cache (and write to checkpoint file in the end). So, we introduce this InMemoryLeaderEpochCheckpoint to feed into LeaderEpochCheckpointCache, and when we truncate the epoch for RLSM, we can do them in memory without affecting the checkpoint file, and without interacting with file system.

Reviewers: Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
4 changed files
163 additions
2 deletions
DATE:Apr 5, 2023
-----------

      Suppress exception in testExceptionInUpdateCoordinator (#13486)
    
Reviewers: David Arthur <mumrah@gmail.com>
2 changed files
2 additions
2 deletions
DATE:Mar 31, 2023
-----------

KAFKA-14867: Trigger rebalance when replica racks change if client.ra…
    
…ck is configured (KIP-881) (#13474)

When `client.rack` is configured for consumers, we perform rack-aware consumer partition assignment to improve locality. After/during reassignments, replica racks may change, so to ensure optimal consumer assignment, trigger rebalance from the leader when set of racks of any partition changes.

Reviewers: David Jacot <djacot@confluent.io>
3 changed files
224 additions
31 deletions
DATE:Mar 31, 2023
-----------

      MINOR: fix stream failing tests (#13512)
    
Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Guozhang Wang <wangguoz@gmail.com>
2 changed files
6 additions
11 deletions
DATE:Apr 6, 2023
-----------

      MINOR: move RecordReader from org.apache.kafka.tools (client module) …
    
…to org.apache.kafka.tools.api (tools-api module) (#13454)

Reviewers: Jun Rao <junrao@gmail.com>
8 changed files
118 additions
5 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14376: Add ConfigProvider to make use of environment variables …
    
…KIP-887 (#12992)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Viktor Somogyi-Vass <viktorsomogyi@gmail.com>, Jordan Moore <crikket.007@gmail.com>, Chris Egerton <fearthecellos@gmail.com>
3 changed files
236 additions
0 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14172: Should clear cache when active recycled from standby (#1…

…3369)

This fix is inspired by #12540.

1. Added a clearCache function for CachedStateStore, which would be triggered upon recycling a state manager.
2. Added the integration test inherited from #12540 .
3. Improved some log4j entries.
4. Found and fixed a minor issue with log4j prefix.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
14 changed files
411 additions
6 deletions
DATE:Apr 5, 2023
-----------

      MINOR: Change ordering of checks to prevent log spam on metadata upda…
    
…tes (#13447)

On startup, we always update the metadata. The topic ID also goes from null to defined. Move the epoch is null check to before the topic ID check to prevent log spam.

Reviewers: David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>
1 changed file
9 additions
3 deletions
DATE:Mar 30, 2023
-----------

      MINOR: Remove addOne to fix build (#13469)
    
Removed addOne method that broke scala 2.12 build

---------

Co-authored-by: David Arthur <mumrah@gmail.com>

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Jason Gustafson <jason@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Mar 29, 2023
-----------

KAFKA-10199: Add task updater metrics, part 2 (#13300)
    
Part of KIP-869

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
17 changed files
300 additions
156 deletions
DATE:Apr 5, 2023
-----------

KAFKA-14468: Committed API (#13380)
    
In this PR, I implemented the committed API. Here are the specifics:

* the CommitRequestManager handles committed() request.
* I implemented a UnsentOffsetFetchRequestState to handle deduping the request: because we don't want to send the exact requests repeatedly.
* I implemented the retry mechanism: Some retriable errors will be retried automatically
* ClientResponse errors are handled in the handlers.
* Some of the top-level APIs were refactored lightly.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
9 changed files
781 additions
124 deletions
DATE:Mar 29, 2023
-----------

KAFKA-14785 (KIP-875): Connect offset read REST API (#13434)
    
Reviewers: Chris Egerton <chrise@aiven.io>
33 changed files
1,564 additions
157 deletions
DATE:Apr 2, 2023
-----------

KAFKA-14771: Include threads info in ConcurrentModificationException …
    
…message (#13325)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
6 additions
2 deletions
DATE:Apr 3, 2023
-----------

KAFKA-14491: [16/N] Add recovery logic for store inconsistency due to…
    
… failed write (#13364)

The RocksDB-based implementation of versioned stores introduced via KIP-889 consists of a "latest value store" and separate (logical) "segments stores." A single put operation may need to modify multiple (two) segments, or both a segment and the latest value store, which opens the possibility to store inconsistencies if the first write succeeds while the later one fails. When this happens, Streams will error out, but the store still needs to be able to recover upon restart. This PR adds the necessary repair logic into RocksDBVersionedStore to effectively undo the earlier failed write when a store inconsistency is encountered.

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
322 additions
153 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14491: [20/N] Add public-facing methods for versioned stores (#…

…13442)

Until this PR, all the code added for KIP-889 for introducing versioned stores to Kafka Streams has been accessible from internal packages only. This PR exposes the stores via public Stores.java methods, and also updates the TopologyTestDriver.

Reviewers: Matthias J. Sax <matthias@confluent.io>
8 changed files
284 additions
42 deletions
DATE:Apr 5, 2023
-----------

      MINOR: add under-min-isr string to log messages (#13508)
    
Whenever there are changes to the ISR, add an extra string to the existing log message in case the partition is under min ISR. This makes it easier to search the log when partitions go under min-ISR.

Reviewers: Luke Chen <showuon@gmail.com>, Colin Patrick McCabe <colin@cmccabe.xyz>
1 changed file
4 additions
2 deletions
DATE:Apr 6, 2023
-----------

KAFKA-14533: Do not interrupt state-updater thread during shutdown (#…

…13318)

1. Fix the StateUpdater shutdown procedure: a) in shutdown, we first set the running flag, then notify the condition; b) in the thread's waitIfAllChangelogsCompletelyRead block, we collapse the if condition together with the while condition so that we always check all four conditions once the thread is notified inside the while loop. As a result, shutdown procedure would not involve any thread interruptions anymore.
2. Print fine-grained streams exception when list-offset fails, this is a byproduct of the debugging procedure but I think it's worth keeping since it has better operational visibilities.
3. Some nit logging improvements (including moving logger from the inner thread into the outer class to also add some more logging).
4. Re-enable state-updater in SmokeTestDriverIntegrationTest.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Bruno Cadonna <cadonna@apache.org>
10 changed files
112 additions
117 deletions
DATE:Apr 4, 2023
-----------

KAFKA-14765 and KAFKA-14776: Support for SCRAM at bootstrap with inte…
    
…gration tests (#13374)

Implement KIP-900

Update kafka-storage to be able to add SCRAM records to the bootstrap metadata file at format time so that SCRAM is enabled at initial start (bootstrap) of KRaft cluster. Includes unit tests.

Update ./core/src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala to use bootstrap and
enable the test to run with both ZK and KRaft quorum.

Moved the one test from ScramServerStartupTest.scala into SaslScramSslEndToEndAuthorizationTest.scala. This test is really small, so there was no point in recreating all the bootstrap startup just for a 5 line test when it could easily be run elsewhere.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Manikumar Reddy <manikumar.reddy@gmail.com>
15 changed files
456 additions
131 deletions
DATE:Apr 4, 2023
-----------

      MINOR:Incorrect/canonical use of constants in AdminClientConfig and S…
    
…treamsConfigTest (#13427)

Co-authored-by: Deqi Hu <deqi.hu@shopee.com>

Reviewers: Ziming Deng <dengziming1993@gmail.com>, Guozhang Wang <guozhang.wang.us@gmail.com>
2 changed files
3 additions
3 deletions
DATE:Mar 23, 2023
-----------

      MINOR: Use JUnit-5 extension to enforce strict stubbing (#13347)
    
A privious change disabled strict stubbing for the `RocksDBMetricsRecorderTest`. To re-enable the behavior in JUnit-5, we need to pull in a new dependency in the `streams` gradle project.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
2 changed files
7 additions
0 deletions
DATE:Mar 20, 2023
-----------

KAFKA-14491: [14/N] Set changelog topic configs for versioned stores (#…

…13292)

Sets the correct topic configs for changelog topics for versioned stores introduced in KIP-889. Changelog topics for versioned stores differ from those for non-versioned stores only in that min.compaction.lag.ms needs to be set in order to prevent version history from being compacted prematurely.

The value for min.compaction.lag.ms is equal to the store's history retention plus some buffer to account for the broker's use of wall-clock time in performing compactions. This buffer is analogous to the windowstore.changelog.additional.retention.ms value for window store changelog topic retention time, and uses the same default of 24 hours. In the future, we can propose a KIP to expose a config such as versionedstore.changelog.additional.compaction.lag.ms to allow users to tune this value.

Reviewers: Matthias J. Sax <matthias@confluent.io>
10 changed files
360 additions
65 deletions
DATE:Mar 22, 2023
-----------

KAFKA-14812:ProducerPerformance still counting successful sending in …
    
…console when sending failed (#13404)

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>
2 changed files
107 additions
13 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14797: Emit offset sync when offset translation lag would excee…
    
…d max.offset.lag (#13367)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
52 additions
41 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14814: Skip Connect target state updates when the configs store…
    
… has same state (#13426)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Chris Egerton <chrise@aiven.io>
3 changed files
55 additions
3 deletions
DATE:Mar 23, 2023
-----------

KAFKA-14843: Include Connect framework properties when retrieving con…
    
…nector config definitions (#13445)

Reviewers: Yash Mayya <yash.mayya@gmail.com>, Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
4 changed files
100 additions
16 deletions
DATE:Mar 28, 2023
-----------

KAFKA-14848: KafkaConsumer incorrectly passes locally-scoped serializ…
    
…ers to FetchConfig (#13452)

Fix for a NPE bug that was caused by referring to a local variable and not the instance variable of the deserializers.

Co-authored-by: Robert Yokota <1761488+rayokota@users.noreply.github.com>

Reviewers: Robert Yokota <1761488+rayokota@users.noreply.github.com>, Guozhang Wang <wangguoz@gmail.com>
3 changed files
102 additions
5 deletions
DATE:Mar 27, 2023
-----------

KAFKA-14491: [18/N] Update versioned store to check latest value on t…
    
…imestamped get (#13409)

Part of KIP-889.

Prior to this PR, versioned stores always returned null for get(key, timestamp) calls where the timestamp has exceeded the store's history retention, even if the latest value for the key (i.e., the one returned from get(key)) satisfies the timestamp bound. This was an oversight from the earlier implementation -- get(key, timestamp) should still return a record in this situation since the record exists in the store. This PR updates both the javadocs and the implementation accordingly.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
86 additions
8 deletions
DATE:Mar 22, 2023
-----------

KAFKA-14835: Create ControllerMetadataMetricsPublisher (#13438)
    
Separate out KRaft controller metrics into two groups: metrics directly managed by the
QuorumController, and metrics handled by an external publisher. This separation of concerns makes
the code easier to reason about, by clarifying what metrics can be changed where.

The external publisher, ControllerServerMetricsPublisher, handles all metrics which are related to
the content of metadata. For example, metrics about number of topics or number of partitions, etc.
etc. It fits into the MetadataLoader metadata publishing framework as another publisher.  Since
ControllerServerMetricsPublisher operates off of a MetadataImage, we don't have to create
(essentially) another copy of the metadata in memory, as ControllerMetricsManager. This reduces
memory consumption. Another benefit of operating off of the MetadataImage is that we don't have to
have special handling for each record type, like we do now in ControllerMetricsManager.

Reviewers: David Arthur <mumrah@gmail.com>
20 changed files
1,492 additions
1,474 deletions
DATE:Mar 24, 2023
-----------

KAFKA-14491: [17/N] Refactor segments cleanup logic
    
Part of KIP-899.

AbstractSegments automatically calls the helper method to clean up expired segments as part of getOrCreateSegmentIfLive(). This works fine for windowed store implementations which call getOrCreateSegmentIfLive() exactly once per put() call, but is inefficient and difficult to reason about for the new RocksDBVersionedStore implementation (cf. #13188) which makes potentially multiple calls to getOrCreateSegmentIfLive() for different segments for a single put() call. This PR addresses this by refactoring the call to clean up expired segments out of getOrCreateSegmentIfLive(), opting to have the different segments implementations specify when cleanup should occur instead. After this PR, RocksDBVersionedStore only cleans up expired segments once per call to put().

Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
32 additions
9 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14722: Make BooleanSerde public (#13382)
    
KAFKA-14722: Make BooleanSerde public (#13328)

Addition of boolean serde
https://cwiki.apache.org/confluence/display/KAFKA/KIP-907%3A+Add+Boolean+Serde+to+public+interface

During the task KAFKA-14491 Victoria added BooleanSerde class, It will be useful to have such class in public package.

Reviewers: Walker Carlson <wcarlson@confluent.io>, Lucas Brutschy <lbrutschy@confluent.io>, Divij Vaidya <diviv@amazon.com>
9 changed files
129 additions
45 deletions
DATE:Mar 24, 2023
-----------

KAFKA-14491: [15/N] Add integration tests for versioned stores (#13340)
    
Adds integration tests for the new versioned stores introduced in KIP-889.

This PR also contains a small bugfix for the restore record converter, required to get the tests above to pass: even though versioned stores are timestamped stores, we do not want to use the record converter for prepending timestamps when restoring a versioned store.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
686 additions
1 deletion
DATE:Mar 22, 2023
-----------

      MINOR: Refactor Mirror integration tests to reduce duplication (#13428)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>
3 changed files
96 additions
285 deletions
DATE:Mar 24, 2023
-----------

KAFKA-8713: Allow using null for field in JsonConverter (KIP-581) (#1…

…3419)

Add a new configuration replace.null.with.default to allow using null instead of the default value.

Reviewers: Chris Egerton <fearthecellos@gmail.com>
3 changed files
77 additions
24 deletions
DATE:Mar 21, 2023
-----------

      MINOR: Fix remote_kraft -> isolated_kraft in kafkatest (#13439)
    
ddd652c standardized on "isolated" as the name for all the isolated
modes, and renamed kafkatest.services.kafka.quorum.remote_kraft to
isolated_kraft. However, the tests using remote_kraft weren't
updated, and are broken as a result. This is a simple search and
replace to fix those.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
14 changed files
27 additions
27 deletions
DATE:Mar 23, 2023
-----------

      MINOR: Expand use of PartitionAssignment (#13402)
    
Updates ReplicationControlManager and PartitionReassignmentReplicas to use PartitionAssignment.

Reviewers: José Armando García Sancio <jsancio@apache.org>
5 changed files
60 additions
46 deletions
DATE:Mar 20, 2023
-----------

      MINOR: doc: fix typo in config-streams (#13450)
    
Reviewers: Chia-Ping Tsai <chia7712@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Mar 25, 2023
-----------

      MINOR: Add Exactly-once support for connectors to the docs table of c…
    
…ontents (#13436)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
1 addition
0 deletions
DATE:Mar 22, 2023
-----------

KAFKA-14774 the removed listeners should not be reconfigurable (#13326)
    
Reviewers: Mickael Maison <mimaison@users.noreply.github.com>
3 changed files
34 additions
3 deletions
DATE:Mar 27, 2023
-----------

KAFKA-14365: Extract common logic from Fetcher (#13425)
    
* KAFKA-14365: Extract common logic from Fetcher

Extract logic from Fetcher into AbstractFetcher.

Also introduce FetchConfig as a more concise way to delineate state from
incoming configuration.

Formalized the defaults in CommonClientConfigs and ConsumerConfig to be
accessible elsewhere.

* Removed overridden methods in favor of synchronizing where needed

Reviewers: Guozhang Wang <wangguoz@gmail.com>
13 changed files
1,042 additions
821 deletions
DATE:Mar 24, 2023
-----------

KAFKA-10244 An new java interface to replace 'kafka.common.MessageRea…
    
…der' (#13393)

Reviewers: Mickael Maison <mimaison@users.noreply.github.com>
5 changed files
258 additions
78 deletions
DATE:Mar 25, 2023
-----------

KAFKA-6891: send.buffer.bytes should be allowed to set -1 in KafkaCon…
    
…nect (#13398)

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>
2 changed files
12 additions
2 deletions
DATE:Mar 21, 2023
-----------

      MINOR: Cleanups in clients common.config (#13422)
    

Reviewers: Guozhang Wang <guozhang.wang.us@gmail.com>
5 changed files
17 additions
24 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14740: Add source tag to MirrorSourceMetrics - KIP-911 (#13420)
    
New add.source.alias.to.metrics setting to add the source cluster alias to the MirrorSourceConnector metrics

Reviewers: Chris Egerton <fearthecellos@gmail.com>
3 changed files
193 additions
50 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14800: Bump snappy-java version to 1.1.9.1 (#13385)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
1 changed file
1 addition
1 deletion
DATE:Mar 24, 2023
-----------

KAFKA-14796 Migrate ACLs from AclAuthorizor to KRaft (#13368)
    
This patch refactors the loadCache method in AclAuthorizer to make it reusable by ZkMigrationClient.
The loaded ACLs are converted to AccessControlEntryRecord. I noticed we still have the defunct
AccessControlRecord, so I've deleted it.

Also included here are the methods to write ACL changes back to ZK while in dual-write mode.

Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>, Colin P. McCabe <cmccabe@apache.org>
9 changed files
400 additions
70 deletions
DATE:Mar 27, 2023
-----------

KAFKA-14837/14842:Avoid the rebalance caused by the addition and dele…
    
…tion of irrelevant groups for MirrorCheckPointConnector (#13446)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
91 additions
6 deletions
DATE:Mar 28, 2023
-----------

      Fix log DateTime format unit test (#13441)
    
Reviewers: Viktor Somogyi-Vass <viktorsomogyi@gmail.com>
1 changed file
4 additions
6 deletions
DATE:Mar 27, 2023
-----------

KAFKA-14827: Support for StandardAuthorizer benchmark (#13423)
    
* KAFKA-14827: Support for StandardAuthorizer benchmark

Co-authored-by: Purshotam Chauhan <purshotam.r.chauhan@gmail.com>

* reverting unintentional change

---------

Co-authored-by: David Arthur <mumrah@gmail.com>

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
58 additions
12 deletions
DATE:Mar 28, 2023
-----------

      MINOR: Rename remote_controller_quorum to isolated_controller_quorum (#…

…13448)

Similar to #13439:

ddd652c standardized on "isolated" as the name for all the isolated
modes, and renamed remote_controller_quorum to
kafkatest.services.kafka.quorum.remote_kraft to
isolated_controller_quorum. This broke
SecurityTest.test_quorum_ssl_endpoint_validation_failure, which should
be fixed by this simple rename.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
1 changed file
1 addition
1 deletion
DATE:Mar 24, 2023
-----------

      MINOR; Increase log level of some rare events (#13430)
    
To help debug KRaft's behavior this change increases the log level of
some rare messages to INFO level.

Reviewers: Jason Gustafson <jason@confluent.io>
3 changed files
7 additions
4 deletions
DATE:Mar 22, 2023
-----------

KAFKA-14795: Provide message formatter for RemoteLogMetadata (#13362)
    
* KAFKA-14795: Provide message formatter for RemoteLogMetadata

This commit introduces a formatter for `RemoteLogMetadata`.

Example usage:
```bash
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic __remote_log_metadata --from-beginning --formatter 'org.apache.kafka.server.log.remote.metadata.storage.serialization.RemoteLogMetadataSerde$RemoteLogMetadataFormatter'

RemoteLogSegmentMetadata{remoteLogSegmentId=RemoteLogSegmentId{topicIdPartition=M1z1YtfhQ5i7oqLNve_0UQ:topic1-0, id=iWtc1Z6xQu2_DJXTklzKxQ}, startOffset=97990, endOffset=98467, brokerId=0, maxTimestampMs=1678292889855, eventTimestampMs=1678292938280, segmentLeaderEpochs={0=97990}, segmentSizeInBytes=511460, state=COPY_SEGMENT_STARTED}
```

Reviewers: Luke Chen <showuon@gmail.com>, Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
2 changed files
82 additions
0 deletions
DATE:Mar 21, 2023
-----------

KAFKA-14586: Moving StreamResetter to tools (#13127)
    
Moves StreamResetter to tools project.

Reviewers: Federico Valeri <fedevaleri@gmail.com>, Christo Lolov <lolovc@amazon.com>, Bruno Cadonna <cadonna@apache.org>
10 changed files
13 additions
9 deletions
DATE:Mar 28, 2023
-----------

KAFKA-14853 the serializer/deserialize which extends ClusterResourceL…
    
…istener is not added to Metadata (#13460)

Reviewers: dengziming <dengziming1993@gmail.com>
3 changed files
49 additions
6 deletions
DATE:Mar 29, 2023
-----------

      MINOR: tweak the doc of "num.network.threads" (#13327)
    
Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Mar 5, 2023
-----------

KAFKA-14770: Allow dynamic keystore update for brokers if string repr…
    
…esentation of DN matches even if canonical DNs don't match (#13346)

To avoid mistakes during dynamic broker config updates that could potentially affect clients, we restrict changes that can be performed dynamically without broker restart. For broker keystore updates, we require the DN to be the same for the old and new certificates since this could potentially contain host names used for host name verification by clients. DNs are compared using standard Java implementation of X500Principal.equals() which compares canonical names. If tags of fields change from one with a printable string representation and one without or vice-versa, canonical name check fails even if the actual name is the same since canonical representation converts to hex for some tags only. We can relax the verification to allow dynamic updates in this case by enabling dynamic update if either the canonical name or the RFC2253 string representation of the DN matches.

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Kalpesh Patel <kpatel@confluent.io>
3 changed files
62 additions
3 deletions
DATE:Mar 7, 2023
-----------

      MINOR: Clarify docs for Streams config max.warmup.replicas. (#13082)
    
Documentation only—Minor clarification on how max.warmup.replicas works; specifically, that one "warmup replica" corresponds to a Task that is restoring its state. Also clarifies how max.warmup.replicas interacts with probing.rebalance.interval.ms.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>, Guozhang Wang <wangguoz@gmail.com>
2 changed files
19 additions
5 deletions
DATE:Mar 3, 2023
-----------

KAFKA-13999: Add ProducerCount metrics (KIP-847) (#13078)
    
This is the PR for the implementation of KIP-847: https://cwiki.apache.org/confluence/display/KAFKA/KIP-847%3A+Add+ProducerIdCount+metrics
Add ProducerIdCount metric at the broker level:

kafka.server:type=ReplicaManager,name=ProducerIdCount
Added unit tests below to ensure the metric reported the count correctly.

---------

Co-authored-by: Artem Livshits <84364232+artemlivshits@users.noreply.github.com>

Reviewers: Ismael Juma <ismael@juma.me.uk>, Divij Vaidya <diviv@amazon.com>, Christo Lolov <christo_lolov@yahoo.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>, Justine Olshan <jolshan@confluent.io>
7 changed files
137 additions
8 deletions
DATE:Mar 1, 2023
-----------

KAFKA-14578: Move ConsumerPerformance to tools (#13215)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Alexandre Dupriez <alexandre.dupriez@gmail.com>
9 changed files
583 additions
515 deletions
DATE:Mar 6, 2023
-----------

KAFKA-14726 Move/rewrite of LogReadInfo, LogOffsetSnapshot, LogStartO…
    
…ffsetIncrementReason to storage module (#13304)

Reviewers: Jun Rao <junrao@gmail.com>, Luke Chen <showuon@gmail.com>, Mickael Maison <mickael.maison@gmail.com>, Ismael Juma <ismael@juma.me.uk>
21 changed files
276 additions
138 deletions
DATE:Mar 4, 2023
-----------

KAFKA-14491: [12/N] Relax requirement that KTable stores must be Time…
    
…stampedKVStores (#13264)

As part of introducing versioned key-value stores in KIP-889, we want to lift the existing DSL restriction that KTable stores are always TimestampedKeyValueStores to allow for KTable stores which are VersionedKeyValueStores instead. This PR lifts this restriction by replacing raw usages of TimestampedKeyValueStore with a new KeyValueStoreWrapper which supports either TimestampedKeyValueStore or VersionedKeyValueStore.

Reviewers: Matthias J. Sax <matthias@confluent.io>
19 changed files
573 additions
80 deletions
DATE:Mar 2, 2023
-----------

KAFKA-14761 Adding integration test for the prototype consumer (#13303)
    
The goal of this PR is to add more tests to the PrototypeAsyncConsumer to test

* Successful startup and shutdown.
* Commit.

I also added integration tests:

* Test commitAsync()
* Test commitSync()
Note that I still need to implement committed() to test if commitSync() has been successfully committed.
Additional things:

Change KafkaConsumer<K, V> to Consumer<K, V> to use different implementations

Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>, Guozhang Wang <wangguoz@gmail.com>
11 changed files
234 additions
85 deletions
DATE:Mar 8, 2023
-----------

KAFKA-14649: Isolate failures during plugin path scanning to single p…
    
…lugin classes (#13182)

Reviewers: Christo Lolov <christo_lolov@yahoo.com>, Chris Egerton <chrise@aiven.io>
14 changed files
770 additions
17 deletions
DATE:Mar 2, 2023
-----------

      MINOR Moved a few log segment util methods from LocalLog to LogFileUt…
    
…ils (#13309)

Reviewers: Jun Rao <junrao@gmail.com>, Luke Chen <showuon@gmail.com>
4 changed files
147 additions
105 deletions
DATE:Mar 1, 2023
-----------

KAFKA-14462; [1/N] Add new server configurations (KIP-848) (#13322)
    
This patch adds the new server configurations introduced in KIP-848. All of them are kept as internal configurations for now. We will make them public when the KIP is ready. It also adds an internal configuration named `group.coordinator.new.enable` that we will used during the development of the KIP. This one will be remove later on and replaced by IBP/feature flag.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
2 changed files
152 additions
0 deletions
DATE:Mar 2, 2023
-----------

      MINOR: Remove unnecessary toString(); fix comment references (#13212)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>, Lucas Brutschy <lbrutschy@confluent.io>
25 changed files
29 additions
25 deletions
DATE:Mar 6, 2023
-----------

KAFKA-14580: Moving EndToEndLatency from core to tools module (#13095)
    

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>, Ismael Juma <mlists@juma.me.uk>
6 changed files
333 additions
182 deletions
DATE:Mar 2, 2023
-----------

      MINOR: fix fault handling in ControllerServer and KafkaServer (#13331)
    
This PR has two fixes for fault handling. One makes fault handling more
strict on the controller; the other makes it a bit less strict on the
(ZK-based) broker.

In ControllerServer, invoke a fatal fault handler in the catch block of
the ControllerServer.startup() function. This will protect us from cases
where unwinding startup would otherwise encounter a deadlock, or be too
slow.  This is the same reason why we made controller fault handlers
call halt() instead of exit() in KAFKA-14693.  In a sense, this JIRA is
a continuation of that fix since it turns some cases that would
previously have been handled by calling shutdown() into cases where we
invoke a fault handler which will call halt() directly.

In KafkaServer,  when we are in migration-from-zk mode and we create a
RaftManager, it should have a fault handler which simply calls
shutdown() on the broker rather than invoking
ProcessTerminatingFaultHandler. This fixes the bug where we could invoke
the process terminating fault handler from junit tests.

Reviewers: Ron Dagostino <rndgstn@gmail.com>
4 changed files
15 additions
3 deletions
DATE:Mar 6, 2023
-----------

KAFKA-14371: Remove unused clusterId field from quorum-state file (#1…

…3102)

Remove clusterId field from the KRaft controller's quorum-state file $LOG_DIR/__cluster_metadata-0/quorum-state

Reviewers: Luke Chen <showuon@gmail.com>, dengziming <dengziming1993@gmail.com>, Christo Lolov <christololov@gmail.com>
2 changed files
48 additions
2 deletions
DATE:Mar 1, 2023
-----------

      MINOR: Update gradle to 8.0.2 and update several gradle plugins (#13339)
    
Also removed workaround from `build.gradle` that is no longer required after
the update to Gradle 8.0.2.

Related links:
 - zinc release notes:   https://github.com/sbt/zinc/releases/tag/v1.8.0
 - gradle release notes: https://github.com/gradle/gradle/releases/tag/v8.0.2
 - gradle diff:          gradle/gradle@v8.0.1...v8.0.2

plugins version upgrade details:
 - 'com.github.ben-manes.versions'              0.44.0 -> 0.46.0
 - 'org.owasp.dependencycheck'                     8.0.2 -> 8.1.2
 - 'io.swagger.core.v3.swagger-gradle-plugin' 2.2.0 -> 2.2.8
 - 'org.gradle.test-retry'                                    1.5.1 -> 1.5.2
 - 'com.github.johnrengelman.shadow'           7.1.2 -> 8.1.0

Reviewers: Ismael Juma <ismael@juma.me.uk>
4 changed files
12 additions
15 deletions
DATE:Mar 5, 2023
-----------

      MINOR: Refactor task change logic to AbstractHerder, reuse for standa…
    
…lone mode. (#13287)

Reviewers: Chris Egerton <chrise@aiven.io>
5 changed files
27 additions
45 deletions
DATE:Mar 2, 2023
-----------

KAFKA-14451: Rack-aware consumer partition assignment for RangeAssign…
    
…or (KIP-881) (#12990)

Best-effort rack alignment for range assignor when both consumer racks and partition racks are available with the protocol changes introduced in KIP-881. Rack-aware assignment is enabled by configuring client.rack for consumers. Balanced assignment per topic is prioritized over rack-alignment. For topics with equal partitions and the same set of subscribers, co-partitioning is prioritized over rack-alignment.

Reviewers: David Jacot <djacot@confluent.io>
8 changed files
852 additions
165 deletions
DATE:Mar 1, 2023
-----------

KAFKA-14084: SCRAM support in KRaft. (#13114)
    
This commit adds support to store the SCRAM credentials in a cluster with KRaft quorum servers and
no ZK cluster backing the metadata. This includes creating ScramControlManager in the controller,
and adding support for SCRAM to MetadataImage and MetadataDelta.

Change UserScramCredentialRecord to contain only a single tuple (name, mechanism, salt, pw, iter)
rather than a mapping between name and a list. This will avoid creating an excessively large record
if a single user has many entries. Because record ID 11 (UserScramCredentialRecord) has not been
used before, this is a compatible change. SCRAM will be supported in 3.5-IV0 and later.

This commit does not include KIP-900 SCRAM bootstrapping support, or updating the credential cache
on the controller (as opposed to broker). We will implement these in follow-on commits.

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
29 changed files
1,274 additions
86 deletions
DATE:Mar 3, 2023
-----------

KAFKA-14590: Move DelegationTokenCommand to tools (#13172)
    
KAFKA-14590: Move DelegationTokenCommand to tools

Reviewers: Luke Chen <showuon@gmail.com>, Christo Lolov <christo_lolov@yahoo.com>, Federico Valeri <fvaleri@redhat.com>
5 changed files
501 additions
378 deletions
DATE:Mar 2, 2023
-----------

      MINOR: use built-in "--rerun" to replace "-Prerun-tests" (#13343)
    
Reviewers: Ismael Juma <ismael@juma.me.uk>
2 changed files
4 additions
19 deletions
DATE:Mar 6, 2023
-----------

KAFKA-14745: Cache the ReplicationPolicy instance in MirrorConnectorC…
    
…onfig (#13328)


Reviewers: Chris Egerton <fearthecellos@gmail.com>
3 changed files
11 additions
5 deletions
DATE:Mar 3, 2023
-----------

KAFKA-14792: Race condition in LazyIndex.get() (#13359)
    
`LazyIndex.get()` has a race condition that can result in a ClassCastException being thrown in some cases.

This was introduced when `LazyIndex` was rewritten from Scala to Java.

I didn't include a test since it's a bit overkill to add a concurrent test for this.

Reviewers: Jun Rao <junrao@gmail.com>
1 changed file
14 additions
9 deletions
DATE:Mar 7, 2023
-----------

KAFKA-14462; [2/N] Add ConsumerGroupHeartbeart to GroupCoordinator in…
    
…terface (#13329)

This patch adds ConsumerGroupHeartbeat to the GroupCoordinator interface and implements the API in KafkaApis.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
159 additions
12 deletions
DATE:Mar 7, 2023
-----------

KAFKA-14729: The kafakConsumer pollForFetches(timer) method takes up …
    
…a lot of cpu due to the abnormal exit of the heartbeat thread (#13270)

throwing an exception directly form the foreground thread's callers when the abnormal exit of the heartbeat thread

Reviewers: Luke Chen <showuon@gmail.com>, Philip Nee <philipnee@gmail.com>
2 changed files
18 additions
2 deletions
DATE:Mar 2, 2023
-----------

KAFKA-14351: Controller Mutation Quota for KRaft (#13116)
    
Implement KIP-599 controller mutation quotas for the KRaft controller. These quotas apply to create
topics, create partitions, and delete topic operations. They are specified in terms of number of
partitions.

The approach taken here is to reuse the ControllerMutationQuotaManager that is also used in ZK
mode. The quotas are implemented as Sensor objects and Sensor.checkQuotas enforces the quota,
whereas Sensor.record notes that new partitions have been modified. While ControllerApis handles
fetching the Sensor objects, we must make the final callback to check the quotas from within
QuorumController. The reason is because only QuorumController knows the final number of partitions
that must be modified. (As one example, up-to-date information about the number of partitions that
will be deleted when a topic is deleted is really only available in QuorumController.)

For quota enforcement, the logic is already in place. The KRaft controller is expected to set the
throttle time in the response that is embedded in EnvelopeResponse, but it does not actually apply
the throttle because there is no client connection to throttle. Instead, the broker that forwarded
the request is expected to return the throttle value from the controller and to throttle the client
connection. It also applies its own request quota, so the enforced/returned quota is the maximum of
the two.

This PR also installs a DynamicConfigPublisher in ControllerServer. This allows dynamic
configurations to be published on the controller. Previously, they could be set, but they were not
applied. Note that we still don't have a good way to set node-level configurations for isolatied
controllers. However, this will allow us to set cluster configs (aka default node configs) and have
them take effect on the controllers.

In a similar vein, this PR separates out the dynamic client quota publisher logic used on the
broker into DynamicClientQuotaPublisher. We can now install this on both BrokerServer and
ControllerServer. This makes dynamically configuring quotas (such as controller mutation quotas)
possible.

Also add a ducktape test, controller_mutation_quota_test.py.

Reviewers: David Jacot <djacot@confluent.io>, Ismael Juma <ismael@juma.me.uk>, Colin P. McCabe <cmccabe@apache.org>
15 changed files
1,040 additions
155 deletions
DATE:Mar 7, 2023
-----------

      MINOR: Fix flaky tests in DefaultStateUpdaterTest (#13319)
    
Found a few flaky tests while reviewing another PR. The root cause seems to be with changing the return behavior of when in mockito. Fixed those without using reset and also bumped a couple debug log lines to info since they could be very helpful in debugging.

Reviewers: Luke Chen <showuon@gmail.com>, Lucas Brutschy <lbrutschy@confluent.io>, Matthias J. Sax <matthias@confluent.io>
3 changed files
17 additions
16 deletions
DATE:Mar 2, 2023
-----------

      MINOR: Fix hint in selector poll (#13324)
    
Reviewers: Chia-Ping Tsai <chia7712@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Mar 5, 2023
-----------

      Revert "KAFKA-14371: Remove unused clusterId field from quorum-state …
    
…file (#13102)" (#13355)

This reverts commit 0927049.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
2 additions
48 deletions
DATE:Mar 7, 2023
-----------

KAFKA-14752: Improving the existing consumer examples (#13353)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
2 changed files
26 additions
5 deletions
DATE:Mar 8, 2023
-----------

      MINOR: fix rerun-tests for unit test (#13288)
    
Related to #11926. Let `unitTest` also process rerun-tests.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
5 additions
0 deletions
DATE:Mar 2, 2023
-----------

KAFKA-14491: [13/N] Add versioned store builder and materializer (#13274

)

This PR introduces VersionedKeyValueStoreBuilder for building the new versioned stores introduced in KIP-889, analogous to the existing TimestampedKeyValueStoreBuilder for building timestamped stores. This PR also updates the existing KTable store materializer class to materialize versioned stores in addition to timestamped stores. As part of this change, the materializer is renamed from TimestampedKeyValueStoreMaterializer to simply KeyValueStoreMaterializer.

Reviewers: Matthias J. Sax <matthias@confluent.io>, John Roesler <john@confluent.io>
15 changed files
611 additions
158 deletions
DATE:Mar 7, 2023
-----------

KAFKA-14753: Improve kafka producer example (#13354)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
44 additions
21 deletions
DATE:Mar 8, 2023
-----------

      MINOR: update RocksDBMetricsRecorder test to JUnit5 and fix memory le…
    
…ak (#13336)

The test was leaking memory via Mockito internals. Piggy-backing an update to JUnit5.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
12 additions
8 deletions
DATE:Mar 3, 2023
-----------

KAFKA-14402: Update AddPartitionsToTxn protocol to batch and handle v…
    
…erifyOnly requests (#13231)

Part 1 of KIP-890

I've updated the API spec and related classes.

Clients should only be able to send up to version 3 requests and that is enforced by using a client builder.

Requests > 4 only require cluster permissions as they are initiated from other brokers. API version 4 is marked as unstable for now.

I've added tests for the batched requests and for the verifyOnly mode.

Also -- minor change to the KafkaApis method to properly match the request name.

Reviewers: Jason Gustafson <jason@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Guozhang Wang <wangguoz@gmail.com>, David Jacot <djacot@confluent.io>
20 changed files
955 additions
272 deletions
DATE:Mar 7, 2023
-----------

      [KAFKA-14685] Refactor logic to handle OFFSET_MOVED_TO_TIERED_STORAGE…
    
… error (#13206)

Reviewers: Rittika Adhikari <rittika.adhikari@gmail.com>, Luke Chen <showuon@gmail.com>, Satish Duggana <satishd@apache.org>, Alexandre Dupriez <alexandre.dupriez@gmail.com>, Jun Rao <junrao@gmail.com>
9 changed files
558 additions
316 deletions
DATE:Feb 24, 2023
-----------

      MINOR: Remove unused ZooKeeper log level configuration from `connect-…
    
…log4j.properties` (#13216)

Signed-off-by: Jakub Scholz <www@scholzj.com>

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
2 changed files
0 additions
2 deletions
DATE:Feb 22, 2023
-----------

      MINOR: reformat ClusterConfigState constructions in Abstract & Distri…
    
…butedHerder (#13286)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
146 additions
39 deletions
DATE:Feb 28, 2023
-----------

KAFKA-14295 FetchMessageConversionsPerSec meter not recorded (#13279)
    
Reviewers: Luke Chen <showuon@gmail.com>
4 changed files
17 additions
1 deletion
DATE:Feb 23, 2023
-----------

      MINOR: srcJar should depend on processMessages task (#13316)
    
This fixes the following `./gradlew install` issue:

```text
* What went wrong:
A problem was found with the configuration of task ':storage:srcJar' (type 'Jar').
  - Gradle detected a problem with the following location: '/Users/ijuma/src/kafka/storage/src/generated/java'.

    Reason: Task ':storage:srcJar' uses this output of task ':storage:processMessages' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.

    Possible solutions:
      1. Declare task ':storage:processMessages' as an input of ':storage:srcJar'.
      2. Declare an explicit dependency on ':storage:processMessages' from ':storage:srcJar' using Task#dependsOn.
      3. Declare an explicit dependency on ':storage:processMessages' from ':storage:srcJar' using Task#mustRunAfter.

    Please refer to https://docs.gradle.org/8.0.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.
```

Reviewers: David Jacot <david.jacot@gmail.com>
1 changed file
7 additions
0 deletions
DATE:Feb 28, 2023
-----------

KAFKA-14060: Replace EasyMock and PowerMock with Mockito in AbstractW…
    
…orkerSourceTaskTest (#13191)

Reviewers: Christo Lolov <christololov@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
275 additions
301 deletions
DATE:Feb 27, 2023
-----------

      MINOR: Adjust logging with ZK log format (#13281)
    
This PR adjust Kafka log format with ZK by printing ZK session id in hex format like ZK do.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
3 additions
2 deletions
DATE:Feb 23, 2023
-----------

      MINOR: Various cleanups in common utils (#13174)
    
- Remove unused methods
- Cleanup syntax

Reviewers: Josep Prat <josep.prat@aiven.io>, Christo Lolov <christololov@gmail.com>
7 changed files
13 additions
61 deletions
DATE:Feb 27, 2023
-----------

      KAFKA 14714: Move/Rewrite RollParams, LogAppendInfo, and LeaderHwChan…
    
…ge to storage module. (#13255)

Reviewers: Jun Rao <junrao@gmail.com>, Ismael Juma <ismael@juma.me.uk>
25 changed files
529 additions
240 deletions
DATE:Feb 22, 2023
-----------

KAFKA-14128: Kafka Streams does not handle TimeoutException (#13161)
    
Kafka Streams is supposed to handle TimeoutException during internal topic creation gracefully. This PR fixes the exception handling code to avoid crashing on an TimeoutException returned by the admin client.

Reviewer: Matthias J. Sax <matthias@confluent.io>, Colin Patrick McCabe <cmccabe@apache.org>, Alexandre Dupriez (@Hangleton)
2 changed files
71 additions
15 deletions
DATE:Feb 23, 2023
-----------

      MINOR: stabilize LeaderElectionTest#testLeaderElectionAndEpoch (#13290)
    
Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
5 additions
2 deletions
DATE:Feb 23, 2023
-----------

      MINOR: after reading BYTES type it's possible to access data beyond i…
    
…ts size (#13261)

After reading data of type BYTES, COMPACT_BYTES, NULLABLE_BYTES or COMPACT_NULLABLE_BYTES returned ByteBuffer might have a capacity that is larger than its limit, thus these data types may access data that lies beyond its size by increasing limit of the returned ByteBuffer. I guess this is not very critical but I think it would be good to restrict increasing limit of the returned ByteBuffer by making its capacity strictly equal to its limit. I think someone might unintentionally mishandle these data types and accidentally mess up data in the ByteBuffer from which they were read.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
37 additions
8 deletions
DATE:Feb 23, 2023
-----------

      MINOR: ExponentialBackoff Javadoc improvements (#13317)
    
Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
7 additions
4 deletions
DATE:Feb 28, 2023
-----------

      MINOR: Add missing unit tests for {Local|Remote}LeaderEndpoint classes (
    
#13272)

Reviewers: Satish Duggana <satishd@apache.org>, Jun Rao <junrao@gmail.com>
2 changed files
91 additions
0 deletions
DATE:Feb 22, 2023
-----------

KAFKA-14491: [11/N] Add metered wrapper for versioned stores (#13252)
    
Introduces the metered store layer for the new versioned key-value store introduced in KIP-889. This outermost, metered store layer handles all serialization/deserialization from VersionedKeyValueStore to a bytes-representation (VersionedBytesStore) so that all inner stores may operate only with bytes types.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
596 additions
8 deletions
DATE:Feb 24, 2023
-----------

KAFKA-14732: Use an exponential backoff retry mechanism while reconfi…
    
…guring connector tasks (#13276)

Reviewers: Chaitanya Mukka <chaitanya.mvs2007@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
191 additions
13 deletions
DATE:Feb 28, 2023
-----------

      MINOR: Remove duplicate empty string check (#13145)
    

Reviewers: Chris Egerton <fearthecellos@gmail.com>, Christo Lolov <christololov@gmail.com>
1 changed file
0 additions
3 deletions
DATE:Feb 27, 2023
-----------

KAFKA-14671: Refactor PredicatedTransformation to not implement Trans…
    
…formation (#13184)

Reviewers: Christo Lolov <christololov@gmail.com>, Yash Mayya <yash.mayya@gmail.com>, Chris Egerton <chrise@aiven.io>
10 changed files
113 additions
118 deletions
DATE:Feb 28, 2023
-----------

      MINOR: add size check for tagged fields (#13100)
    
Add size check for taggedFields of a tag, and add tests.

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
28 additions
0 deletions
DATE:Feb 22, 2023
-----------

KAFKA-14659 source-record-write-[rate|total] metrics should exclude f…
    
…iltered records (#13193)

Reviewers: Christo Lolov <christololov@gmail.com>, Chris Egerton <chrise@aiven.io>
3 changed files
18 additions
16 deletions
DATE:Feb 28, 2023
-----------

      MINOR: enable DynamicBrokerReconfigurationTest.testUncleanLeaderElect…
    
…ionEnable (#13296)

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
0 additions
1 deletion
DATE:Feb 24, 2023
-----------

      MINOR: Replace String literal with existing String variable (#13305)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Chia-Ping Tsai <chia7712@gmail.com>
1 changed file
2 additions
2 deletions
DATE:Feb 26, 2023
-----------

KAFKA-10199: Add task updater metrics, part 1 (#13228)
    
* Moved pausing-tasks logic out of the commit-interval loop to be on the top-level loop, similar to resuming tasks.
* Added thread-level restoration metrics.
* Related unit tests.

Reviewers: Lucas Brutschy <lucasbru@users.noreply.github.com>, Matthias J. Sax <matthias@confluent.io>
9 changed files
427 additions
82 deletions
DATE:Feb 24, 2023
-----------

      MINOR: some ZK migration code cleanups.
    
Some minor improvements to the JavaDoc for ZkMigrationState.

Rename MigrationState to MigrationDriverState to avoid confusion with ZkMigrationState.

Remove ClusterImage#zkBrokers. This costs O(num_brokers) time to calculate, but is only ever used
when in migration state. It should just be calculated in the migration code. (Additionally, the
function ClusterImage.zkBrokers() returns something other than ClusterImage#zkBrokers, which is
confusing.)

Also remove ClusterDelta#liveZkBrokerIdChanges. This is only used in one place, and it's easy to
calculate it there. In general we should avoid providing expensive accessors unless absolutely
necessary. Expensive code should look expensive: if people want to iterate over all brokers, they
can write a loop to do that rather than hiding it inside an accessor.
8 changed files
83 additions
90 deletions
DATE:Feb 28, 2023
-----------

KAFKA-14680: Upgrade gradle version from 7.6 to 8.0.1 (#13205)
    
Details:
 * gradle upgrade: 7.6 -> 8.0.1
 * spotbugs plugin upgrade: 5.0.9 -> 5.0.13
 * tweaked the mechanics for `-release`/`-source`/`-target` to workaround idiosyncrasies in Gradle 8.0.1 and newer Scala 2.13 versions.
 * streams-scala `test` task no longer triggers the `spotless` task since a newer version is required for Gradle 8 support, but the newer version requires Java 11.
Note: relates to #5479

Gradle upgrade highlights:
* "Scala Incremental Compilation for Multi-Module projects broken in 7.x": gradle/gradle#20101
* "Incremental compilation of java modules is broken with Gradle 7.6": gradle/gradle#23067

Full release notes: https://docs.gradle.org/8.0/release-notes.html

Reviewers: Ismael Juma <ismael@juma.me.uk>
4 changed files
30 additions
21 deletions
DATE:Feb 24, 2023
-----------

Kafka-14743: update request metrics after callback (#13297)
    
Currently, the kafka.network:type=RequestMetrics,name=MessageConversionsTimeMs,request=Fetch will not get updated because the request metrics is recorded BEFORE the messageConversions metrics value updated. That means, even if we updated the messageConversions metrics value, the request metrics will never reflect the update. This patch fixes it by updating the request metric after callback completed, so that the messageConversions metric value can be updated correctly.

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>, Divij Vaidya <diviv@amazon.com>
3 changed files
33 additions
9 deletions
DATE:Feb 26, 2023
-----------

KAFKA-14728: Don't run 'spotlessScalaCheck' in CI (#13263)
    
Blocks #13205.

Rationale:
- build works fine in trunk with Gradle 7.6 and spotless gradle plugin 6.13.0 for all currently used JDK versions (that is: JDK 8 / JDK 11 / JDK 17)
- however, recent spotless gradle plugin versions (6.14.+) support only JDK 11+ versions: https://github.com/diffplug/spotless/blob/main/plugin-gradle/CHANGES.md#6140---2023-01-26
- given a fact that Kafka still needs to support JDK 8 builds (until Kafka version 4.0) it is reasonable to simply remove spotless checks out of Jenkinsfile (and re-introduce them when the time comes).

For even more details see GitHub discussion here: #13205 (comment)

Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
1 addition
1 deletion
DATE:Feb 23, 2023
-----------

      MINOR: Introduce OffsetAndEpoch in LeaderEndpoint interface return va…
    
…lues (#13268)

Reviewers: Satish Duggana <satishd@apache.org>, Alexandre Dupriez <alexandre.dupriez@gmail.com>, Jun Rao <junrao@gmail.com>
17 changed files
154 additions
89 deletions
DATE:Feb 24, 2023
-----------

KAFKA-12639: Exit upon expired timer to prevent tight looping (#13190)
    
In AbstractCoordinator#joinGroupIfNeeded - joinGroup request will be retried without proper backoff, due to the expired timer. This is an uncommon scenario and possibly only appears during the testing, but I think it makes sense to enforce the client to drive the join group via poll.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
3 changed files
50 additions
4 deletions
DATE:Mar 1, 2023
-----------

KAFKA-14744; NPE while converting OffsetFetch from version < 8 to ver…
    
…sion >= 8 (#13295)

While refactoring the OffsetFetch handling in KafkaApis, we introduced a NullPointerException (NPE). The NPE arises when the FetchOffset API is called with a client using a version older than version 8 and using null for the topics to signal that all topic-partition offsets must be returned. This means that this bug mainly impacts admin tools. The consumer does not use null.

This NPE is here: 24a8642#diff-0f2f19fd03e2fc5aa9618c607b432ea72e5aaa53866f07444269f38cb537f3feR237.

We missed this during the refactor because we had no tests in place to test this mode.

Reviewers: Chia-Ping Tsai <chia7712@gmail.com>, Justine Olshan <jolshan@confluent.io>
3 changed files
138 additions
9 deletions
DATE:Feb 23, 2023
-----------

      MINOR: update Stream docs with regard to upgrad.from config for 0.1…
    
…0.1.2 release (#13074)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
0 additions
2 deletions
DATE:Feb 24, 2023
-----------

KAFKA-14468: Implement CommitRequestManager to manage the commit and …
    
…autocommit requests (#13021)

This pull request introduces a CommitRequestManager to efficiently manage commit requests from clients and the autocommit state. The manager utilizes a "staged" commit queue to store commit requests made by clients. A background thread regularly polls the CommitRequestManager, which then checks the queue for any outstanding commit requests. When permitted, the CommitRequestManager generates a PollResult which contains a list of UnsentRequests that are subsequently processed by the NetworkClientDelegate.

In addition, a RequestManagerRegistry has been implemented to hold all request managers, including the new CommitRequestManager and the CoordinatorRequestManager. The registry is regularly polled by a background thread in each event loop, ensuring that all request managers are kept up to date and able to handle incoming requests

Reviewers: Jason Gustafson <jason@confluent.io>, Guozhang Wang <wangguoz@gmail.com>
12 changed files
721 additions
68 deletions
DATE:Feb 24, 2023
-----------

      MINOR: update docs of 'replica.socket.receive.buffer.bytes' (#13308)
    
Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Feb 27, 2023
-----------

KAFKA-14742: Throttle connectors in ExactlyOnceSourceIntegrationTest …
    
…to fix flakey OOMEs (#13291)

KAFKA-14742: Throttle connectors in ExactlyOnceSourceIntegrationTest to fix flakey OOMEs
fixup: rename config constant, use meaningful constant names in EOSIT

Signed-off-by: Greg Harris <greg.harris@aiven.io>

Reviewers: Edoardo Comar <edocomar@gmail.com>
2 changed files
56 additions
53 deletions
DATE:Feb 28, 2023
-----------

KAFKA-14704; Follower should truncate before incrementing high waterm…
    
…ark (#13230)

When a leader becomes a follower, it is likely that it has uncommitted records in its log. When it reaches out to the leader, the leader will detect that they have diverged and it will return the diverging epoch and offset. The follower truncates it log based on this.

There is a small caveat in this process. When the leader return the diverging epoch and offset, it also includes its high watermark, low watermark, start offset and end offset. The current code in the `AbstractFetcherThread` works as follow. First it process the partition data and then it checks whether there is a diverging epoch/offset. The former may accidentally expose uncommitted records as this step updates the local watermark to whatever is received from the leader. As the follower, or the former leader, may have uncommitted records, it will be able to updated the high watermark to a larger offset if the leader has a higher watermark than the current local one. This result in exposing uncommitted records until the log is finally truncated. The time window is short but a fetch requests coming at the right time to the follower could read those records. This is especially true for clients out there which uses recent versions of the fetch request but without implementing KIP-320.

When this happens, the follower logs the following messages: 
* `Truncating XXX to offset 21434 below high watermark 21437`
* `Non-monotonic update of high watermark from (offset=21437 segment=[20998:98390]) to (offset=21434 segment=[20998:97843])`.

This patch proposes to mitigate the issue by starting by checking on whether a diverging epoch/offset is provided by the leader and skip processing the partition data if it is. This basically means that the first fetch request will result in truncating the log and a subsequent fetch request will update the low/high watermarks.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
3 changed files
187 additions
34 deletions
DATE:Feb 14, 2023
-----------

      MINOR Added assertion checks in tests for ProducerStateManager.active…
    
…Producers usages (#13235)

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
18 additions
7 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14299: Fix pause and resume with state updater (#13025)
    
* Fixes required to make the PauseResumeIntegrationTest pass. It was not enabled and it does not pass for the state updater code path.

* Make sure no progress is made on paused topologies. The state updater restored one round of polls from the restore
consumer before realizing that a newly added task was already in paused state when being added.

* Wake up state updater when tasks are being resumed. If a task is resumed, it may be necessary to wake up the state updater from waiting on the tasksAndActions condition.

* Make sure that allTasks methods also return the tasks that are currently being restored.

* Enable PauseResumeIntegrationTest and upgrade it to JUnit5.

Reviewers: Bruno Cadonna <cadonna@apache.org>, Guozhang Wang <wangguoz@gmail.com>
12 changed files
189 additions
66 deletions
DATE:Feb 21, 2023
-----------

KAFKA-13771: Support to explicitly delete delegationTokens that have …
    
…expired but have not been automatically cleaned up (#11976)

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
8 additions
4 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14727: Enable periodic offset commits for EOS source tasks (#13262

)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
39 additions
43 deletions
DATE:Feb 16, 2023
-----------

      [MINOR] assert the cache size for each operation in RemoteIndexCacheT…
    
…est (#13244)

Reviewers: Satish Duggana <satishd@apache.org>
1 changed file
7 additions
0 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14491: [8/N] Add serdes for ValueAndTimestamp with null value (#…

…13249)

Introduces a new Serde, that serializes a value and timestamp as a single byte array, where the value may be null (in order to represent putting a tombstone with timestamp into the versioned store).

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
378 additions
1 deletion
DATE:Feb 16, 2023
-----------

      MINOR: Fix PluginInfoTest for Connect (#13266)
    
Reviewers: Kamal Chandraprakash <kchandraprakash@uber.com>

Note: Merged without committer review in order to fix the build on trunk
1 changed file
8 additions
6 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14021: Implement new KIP-618 APIs in MirrorSourceConnector (#12366

)

Reviewers: Mickael Maison <mickael.maison@gmail.com>
13 changed files
351 additions
30 deletions
DATE:Feb 13, 2023
-----------

KAFKA-14731: Upgrade ZooKeeper to 3.6.4 (#13273)
    
Reviewers: Colin Patrick McCabe <cmccabe@apache.org>
2 changed files
3 additions
3 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14491: [9/N] Add versioned bytes store and supplier (#13250)
    
As part of introducing versioned key-value stores in KIP-889, we'd like a way to represent a versioned key-value store (VersionedKeyValueStore<Bytes, byte[]>) as a regular key-value store (KeyValueStore<Bytes, byte[]>) in order to be compatible with existing DSL methods for passing key-value stores, e.g., StreamsBuilder#table() and KTable methods, which are explicitly typed to accept Materialized<K, V, KeyValueStore<Bytes, byte[]>. This way, we do not need to introduce new versions of all relevant StreamsBuilder and KTable methods to relax the Materialized type to accept versioned stores.

This PR introduces the new VersionedBytesStore extends KeyValueStore<Bytes, byte[]> interface for this purpose, along with the corresponding supplier (VersionedBytesStoreSupplier) and implementation (RocksDbVersionedKeyValueBytesStoreSupplier). The RocksDbVersionedKeyValueBytesStoreSupplier implementation leverages an adapter (VersionedKeyValueToBytesStoreAdapter) to assist in converting from VersionedKeyValueStore to VersionedBytesStore.

Reviewers: Matthias J. Sax <matthias@confluent.io>
5 changed files
413 additions
0 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14491: [6/N] Support restoring RocksDB versioned store from cha…
    
…ngelog (#13189)

This PR builds on the new RocksDB-based versioned store implementation (see KIP-889) by adding code for restoring from changelog. The changelog topic format is the same as for regular timestamped key-value stores: record keys, values, and timestamps are stored in the Kafka message key, value, and timestamp, respectively. The code for actually writing to this changelog will come in a follow-up PR.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
502 additions
7 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14676: Include all SASL configs in login cache key to ensure cl…
    
…ients in a JVM can use different OAuth configs (#13211)

We currently cache login managers in static maps for both static JAAS config using system property and for JAAS config specified using Kafka config sasl.jaas.config. In addition to the JAAS config, the login manager callback handler is included in the key, but all other configs are ignored. This implementation is based on the assumption clients that require different logins (e.g. username/password) use different JAAS configs, because login properties are included in the JAAS config rather than as separate top-level configs. The OIDC support added in KIP-768 only allows configuration of token endpoint URL as a top-level config. This results in two clients in a JVM configured with different token endpoint URLs to incorrectly share a login.

This PR includes all SASL configs prefixed with sasl. to be included in the key so that logins are only shared if all the sasl configs are identical. 

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Kirk True <kirk@mustardgrain.com>
2 changed files
55 additions
5 deletions
DATE:Feb 12, 2023
-----------

KAFKA-12468, KAFKA-13659, KAFKA-12566: Fix MM2 causing negative downs…
    
…tream lag, syncing stale offsets, and flaky integration tests (#13178)

KAFKA-12468: Fix negative lag on down consumer groups synced by MirrorMaker 2

KAFKA-13659: Stop syncing consumer groups with stale offsets in MirrorMaker 2

KAFKA-12566: Fix flaky MirrorMaker 2 integration tests

Reviewers: Chris Egerton <chrise@aiven.io>
11 changed files
507 additions
159 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14673; Add high watermark listener to Partition/Log layers (#13196

)

In the context of KIP-848, we implements are new group coordinator in Java. This new coordinator follows the architecture of the new quorum controller. It is basically a replicated state machine that writes to the log and commits its internal state when the writes are committed. At the moment, the only way to know when a write is committed is to use a delayed fetch. This is not ideal in our context because a delayed fetch can be completed before the write is actually committed to the log.

This patch proposes to introduce a high watermark listener to the Partition/Log layers. This will allow the new group coordinator to simply listen to changes and commit its state based on this. This mechanism is simpler and lighter as well.

Reviewers: Christo Lolov <lolovc@amazon.com>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
8 changed files
647 additions
25 deletions
DATE:Feb 20, 2023
-----------

      MINOR: Few cleanups to JaasContext/Utils classes
    
Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>
3 changed files
72 additions
1 deletion
DATE:Feb 14, 2023
-----------

KAFKA-14706: Move/rewrite ShutdownableThread to server-common module. (…

…#13234)

Move/rewrite ShutdownableThread to server-common module.

Reviewers: Luke Chen <showuon@gmail.com>, Ismael Juma <ismael@juma.me.uk>
26 changed files
222 additions
164 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14491: [10/N] Add changelogging wrapper for versioned stores (#…

…13251)

Introduces the changelogging layer for the new versioned key-value store introduced in KIP-889. The changelogging layer operate on VersionedBytesStore rather than VersionedKeyValueStore so that the outermost metered store can serialize to bytes once and then all inner stores operate only with bytes types.

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
302 additions
0 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Various cleanups in clients javadoc (#13239)
    

Reviewers: Luke Chen <showuon@gmail.com>
8 changed files
53 additions
54 deletions
DATE:Feb 14, 2023
-----------

      MINOR: Simplify JUnit assertions in tests; remove accidental unnecess…
    
…ary code in tests (#13219)

* assertEquals called on array
* Method is identical to its super method
* Simplifiable assertions
* Unused imports

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
35 changed files
155 additions
214 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14653: Use raw properties instead of post-resolution properties…
    
… for MirrorMaker connectors(#13163)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
37 additions
10 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14664; Fix inaccurate raft idle ratio metric (#13207)
    
The raft idle ratio is currently computed as the average of all recorded poll durations. This tends to underestimate the actual idle ratio since it treats all measurements equally regardless how much time was spent. For example, say we poll twice with the following durations:

Poll 1: 2s
Poll 2: 0s

Assume that the busy time is negligible, so 2s passes overall.

In the first measurement, 2s is spent waiting, so we compute and record a ratio of 1.0. In the second measurement, no time passes, and we record 0.0. The idle ratio is then computed as the average of these two values (1.0 + 0.0 / 2 = 0.5), which suggests that the process was busy for 1s, which overestimates the true busy time.

In this patch, we create a new `TimeRatio` class which tracks the total duration of a periodic event over a full interval of time measurement.

Reviewers: José Armando García Sancio <jsancio@apache.org>
5 changed files
231 additions
31 deletions
DATE:Feb 15, 2023
-----------

      Kafka 14565: On failure, close AutoCloseable objects instantiated and…
    
… configured by AbstractConfig (#13168)

Reviewers: Chris Egerton <chrise@aiven.io>
6 changed files
166 additions
40 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14708: Use Java thread instead of kafka library for example pur…
    
…pose (#13238)

Remove "kafka.examples.Consumer" dependency on ShutdownableThread. "examples" module should be dependent only on public APIs but not to be dependent upon server common/internal components.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
16 additions
15 deletions
DATE:Feb 16, 2023
-----------

KAFKA-6793: Unused configuration logging appears to be noisy and unne…
    
…cessary (#13225)

Warnings about unused configs are most often spurious. This patch changes the current warning to an info message.

Reviewers: Chris Egerton <chrise@aiven.io>, Jason Gustafson <jason@confluent.io>
1 changed file
3 additions
3 deletions
DATE:Feb 13, 2023
-----------

KAFKA-14717 KafkaStreams can' get running if the rebalance happens be… (
    
#13248)

I noticed this issue when tracing #12590.

StreamThread closes the consumer before changing state to DEAD. If the partition rebalance happens quickly, the other StreamThreads can't change KafkaStream state from REBALANCING to RUNNING since there is a PENDING_SHUTDOWN StreamThread

Reviewers: Guozhang Wang <wangguoz@gmail.com>
4 changed files
49 additions
1 deletion
DATE:Feb 17, 2023
-----------

      KAKFA-14733: Added a few missing checks for Kraft Authorizer and upda…
    
…ted AclAuthorizerTest to run tests for both zk and kraft (#13282)

Added the following checks - 
* In StandardAuthorizerData.authorize() to fail if `patternType` other than `LITERAL` is passed.
* In AclControlManager.addAcl() to fail if Resource Name is null or empty.

Also, updated `AclAuthorizerTest` includes a lot of tests covering various scenarios that are missing in `StandardAuthorizerTest`. This PR changes the AclAuthorizerTest to run tests for both `zk` and `kraft` modes - 
* Rename AclAuthorizerTest -> AuthorizerTest
* Parameterize relevant tests to run for both modes

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
6 changed files
459 additions
247 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Better logging to distinguish clean vs unclean loading times (#…

…13242)

Current log loading logging makes it difficult to analyze the behavior in the case of clean and unclean shutdown. The log message looks the same either way. Additionally, the logging about unclean recovery also catches the case when a new broker is initializing from an empty log dir. This patch adds some additional information to existing log messages to make it easier to distinguish these cases.

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
15 additions
5 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14491: [7/N] Enforce strict grace period for versioned stores (#…

…13243)

Changes the versioned store semantics to define an explicit "grace period" property. Grace period will always be equal to the history retention, though in the future we could introduce a new KIP to expose options to configure grace period separately.

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
177 additions
25 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14253 - More informative logging (#13253)
    
Includes 2 requirements from the ticket:
* Include the number of members in the group (I.e., "15 members participating" and "to 15 clients as")
* Sort the member ids (to help compare the membership and assignment across rebalances)

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
14 additions
8 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14711: kafaka-metadata-quorum.sh does not honor --command-confi… (
    
#13241)

…g option

#12951 accidentally changed the behavior of the `kafaka-metadata-quorum.sh` CLI by making it silently ignore a `--command-config <filename>` properties file that exists. This was an undetected regression in the 3.4.0 release.  This patch fixes the issue such that any such specified file will be honored.

Reviewers: José Armando García Sancio <jsancio@apache.org>, Ismael Juma <ismael@juma.me.uk>
3 changed files
28 additions
8 deletions
DATE:Feb 13, 2023
-----------

KAFKA-5756: Wait for concurrent source task offset flush to complete …
    
…before starting next flush (#13208)

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Chris Egerton <chrise@aiven.io>
10 changed files
147 additions
37 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14693; Kafka node should halt instead of exit (#13227)
    
Extend the implementation of ProcessTerminatingFaultHandler to support calling either Exit.halt or Exit.exit. Change the fault handler used by the Controller thread and the KRaft thread to use a halting fault handler.

Those threads cannot call Exit.exit because Runtime.exit joins on the default shutdown hook thread. The shutdown hook thread joins on the controller and kraft thread terminating. This causes a deadlock.

Reviewers: Colin Patrick McCabe <cmccabe@apache.org>, Jason Gustafson <jason@confluent.io>
7 changed files
192 additions
63 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14675: Extract metadata-related tasks from Fetcher into Metadat…
    
…aFetcher 1/4 (#13192)

The `Fetcher` class is used internally by the `KafkaConsumer` to fetch records from the brokers. There is [ongoing work to create a new consumer implementation with a significantly refactored threading model](https://issues.apache.org/jira/browse/KAFKA-14246). The threading refactor work requires a similarly refactored `Fetcher`.

This task covers the work to extract from `Fetcher` the APIs that are related to metadata operations into two new classes: `OffsetFetcher` and `TopicMetadataFetcher`. This will allow the refactoring of `Fetcher` and `MetadataFetcher` for the new consumer.

Reviewers: Philip Nee <pnee@confluent.io>, Guozhang Wang <guozhang@apache.org>, Jason Gustafson <jason@confluent.io>
9 changed files
3,363 additions
2,871 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Remove unnecessary usage of LazyIndex (#13218)
    
The remote index classes use `LazyIndex`, but immediately
force materialization. This results in more verbose code
and it's misleading since the indexes are not lazily
used in practice.

Also simplify `LazyIndex.forOffset/forTime` by removing
`writable` parameter, which is always `true`.

Reviewers: Satish Duggana <satishd@apache.org>
5 changed files
30 additions
42 deletions
DATE:Feb 13, 2023
-----------

KAFKA-14704; Follower should truncate before incrementing high waterm…
    
…ark (#13230)

When a leader becomes a follower, it is likely that it has uncommitted records in its log. When it reaches out to the leader, the leader will detect that they have diverged and it will return the diverging epoch and offset. The follower truncates it log based on this.

There is a small caveat in this process. When the leader return the diverging epoch and offset, it also includes its high watermark, low watermark, start offset and end offset. The current code in the `AbstractFetcherThread` works as follow. First it process the partition data and then it checks whether there is a diverging epoch/offset. The former may accidentally expose uncommitted records as this step updates the local watermark to whatever is received from the leader. As the follower, or the former leader, may have uncommitted records, it will be able to updated the high watermark to a larger offset if the leader has a higher watermark than the current local one. This result in exposing uncommitted records until the log is finally truncated. The time window is short but a fetch requests coming at the right time to the follower could read those records. This is especially true for clients out there which uses recent versions of the fetch request but without implementing KIP-320.

When this happens, the follower logs the following messages: 
* `Truncating XXX to offset 21434 below high watermark 21437`
* `Non-monotonic update of high watermark from (offset=21437 segment=[20998:98390]) to (offset=21434 segment=[20998:97843])`.

This patch proposes to mitigate the issue by starting by checking on whether a diverging epoch/offset is provided by the leader and skip processing the partition data if it is. This basically means that the first fetch request will result in truncating the log and a subsequent fetch request will update the low/high watermarks.

Reviewers: Ritika Reddy <rreddy@confluent.io>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
3 changed files
187 additions
34 deletions
DATE:Feb 14, 2023
-----------

      MINOR Added assertion checks in tests for ProducerStateManager.active…
    
…Producers usages (#13235)

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
18 additions
7 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14299: Fix pause and resume with state updater (#13025)
    
* Fixes required to make the PauseResumeIntegrationTest pass. It was not enabled and it does not pass for the state updater code path.

* Make sure no progress is made on paused topologies. The state updater restored one round of polls from the restore
consumer before realizing that a newly added task was already in paused state when being added.

* Wake up state updater when tasks are being resumed. If a task is resumed, it may be necessary to wake up the state updater from waiting on the tasksAndActions condition.

* Make sure that allTasks methods also return the tasks that are currently being restored.

* Enable PauseResumeIntegrationTest and upgrade it to JUnit5.

Reviewers: Bruno Cadonna <cadonna@apache.org>, Guozhang Wang <wangguoz@gmail.com>
12 changed files
189 additions
66 deletions
DATE:Feb 21, 2023
-----------

KAFKA-13771: Support to explicitly delete delegationTokens that have …
    
…expired but have not been automatically cleaned up (#11976)

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
2 changed files
8 additions
4 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14727: Enable periodic offset commits for EOS source tasks (#13262

)

Reviewers: Chris Egerton <chrise@aiven.io>
4 changed files
39 additions
43 deletions
DATE:Feb 16, 2023
-----------

      [MINOR] assert the cache size for each operation in RemoteIndexCacheT…
    
…est (#13244)

Reviewers: Satish Duggana <satishd@apache.org>
1 changed file
7 additions
0 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14491: [8/N] Add serdes for ValueAndTimestamp with null value (#…

…13249)

Introduces a new Serde, that serializes a value and timestamp as a single byte array, where the value may be null (in order to represent putting a tombstone with timestamp into the versioned store).

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
6 changed files
378 additions
1 deletion
DATE:Feb 16, 2023
-----------

      MINOR: Fix PluginInfoTest for Connect (#13266)
    
Reviewers: Kamal Chandraprakash <kchandraprakash@uber.com>

Note: Merged without committer review in order to fix the build on trunk
1 changed file
8 additions
6 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14021: Implement new KIP-618 APIs in MirrorSourceConnector (#12366

)

Reviewers: Mickael Maison <mickael.maison@gmail.com>
13 changed files
351 additions
30 deletions
DATE:Feb 13, 2023
-----------

KAFKA-14731: Upgrade ZooKeeper to 3.6.4 (#13273)
    
Reviewers: Colin Patrick McCabe <cmccabe@apache.org>
2 changed files
3 additions
3 deletions
DATE:Feb 21, 2023
-----------

KAFKA-14491: [9/N] Add versioned bytes store and supplier (#13250)
    
As part of introducing versioned key-value stores in KIP-889, we'd like a way to represent a versioned key-value store (VersionedKeyValueStore<Bytes, byte[]>) as a regular key-value store (KeyValueStore<Bytes, byte[]>) in order to be compatible with existing DSL methods for passing key-value stores, e.g., StreamsBuilder#table() and KTable methods, which are explicitly typed to accept Materialized<K, V, KeyValueStore<Bytes, byte[]>. This way, we do not need to introduce new versions of all relevant StreamsBuilder and KTable methods to relax the Materialized type to accept versioned stores.

This PR introduces the new VersionedBytesStore extends KeyValueStore<Bytes, byte[]> interface for this purpose, along with the corresponding supplier (VersionedBytesStoreSupplier) and implementation (RocksDbVersionedKeyValueBytesStoreSupplier). The RocksDbVersionedKeyValueBytesStoreSupplier implementation leverages an adapter (VersionedKeyValueToBytesStoreAdapter) to assist in converting from VersionedKeyValueStore to VersionedBytesStore.

Reviewers: Matthias J. Sax <matthias@confluent.io>
5 changed files
413 additions
0 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14491: [6/N] Support restoring RocksDB versioned store from cha…
    
…ngelog (#13189)

This PR builds on the new RocksDB-based versioned store implementation (see KIP-889) by adding code for restoring from changelog. The changelog topic format is the same as for regular timestamped key-value stores: record keys, values, and timestamps are stored in the Kafka message key, value, and timestamp, respectively. The code for actually writing to this changelog will come in a follow-up PR.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
502 additions
7 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14676: Include all SASL configs in login cache key to ensure cl…
    
…ients in a JVM can use different OAuth configs (#13211)

We currently cache login managers in static maps for both static JAAS config using system property and for JAAS config specified using Kafka config sasl.jaas.config. In addition to the JAAS config, the login manager callback handler is included in the key, but all other configs are ignored. This implementation is based on the assumption clients that require different logins (e.g. username/password) use different JAAS configs, because login properties are included in the JAAS config rather than as separate top-level configs. The OIDC support added in KIP-768 only allows configuration of token endpoint URL as a top-level config. This results in two clients in a JVM configured with different token endpoint URLs to incorrectly share a login.

This PR includes all SASL configs prefixed with sasl. to be included in the key so that logins are only shared if all the sasl configs are identical. 

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Kirk True <kirk@mustardgrain.com>
2 changed files
55 additions
5 deletions
DATE:Feb 12, 2023
-----------

KAFKA-12468, KAFKA-13659, KAFKA-12566: Fix MM2 causing negative downs…
    
…tream lag, syncing stale offsets, and flaky integration tests (#13178)

KAFKA-12468: Fix negative lag on down consumer groups synced by MirrorMaker 2

KAFKA-13659: Stop syncing consumer groups with stale offsets in MirrorMaker 2

KAFKA-12566: Fix flaky MirrorMaker 2 integration tests

Reviewers: Chris Egerton <chrise@aiven.io>
11 changed files
507 additions
159 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14673; Add high watermark listener to Partition/Log layers (#13196

)

In the context of KIP-848, we implements are new group coordinator in Java. This new coordinator follows the architecture of the new quorum controller. It is basically a replicated state machine that writes to the log and commits its internal state when the writes are committed. At the moment, the only way to know when a write is committed is to use a delayed fetch. This is not ideal in our context because a delayed fetch can be completed before the write is actually committed to the log.

This patch proposes to introduce a high watermark listener to the Partition/Log layers. This will allow the new group coordinator to simply listen to changes and commit its state based on this. This mechanism is simpler and lighter as well.

Reviewers: Christo Lolov <lolovc@amazon.com>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
8 changed files
647 additions
25 deletions
DATE:Feb 20, 2023
-----------

      MINOR: Few cleanups to JaasContext/Utils classes
    
Reviewers: Rajini Sivaram <rajinisivaram@googlemail.com>
3 changed files
72 additions
1 deletion
DATE:Feb 14, 2023
-----------

KAFKA-14706: Move/rewrite ShutdownableThread to server-common module. (…

…#13234)

Move/rewrite ShutdownableThread to server-common module.

Reviewers: Luke Chen <showuon@gmail.com>, Ismael Juma <ismael@juma.me.uk>
26 changed files
222 additions
164 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14491: [10/N] Add changelogging wrapper for versioned stores (#…

…13251)

Introduces the changelogging layer for the new versioned key-value store introduced in KIP-889. The changelogging layer operate on VersionedBytesStore rather than VersionedKeyValueStore so that the outermost metered store can serialize to bytes once and then all inner stores operate only with bytes types.

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
302 additions
0 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Various cleanups in clients javadoc (#13239)
    

Reviewers: Luke Chen <showuon@gmail.com>
8 changed files
53 additions
54 deletions
DATE:Feb 14, 2023
-----------

      MINOR: Simplify JUnit assertions in tests; remove accidental unnecess…
    
…ary code in tests (#13219)

* assertEquals called on array
* Method is identical to its super method
* Simplifiable assertions
* Unused imports

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Divij Vaidya <diviv@amazon.com>
35 changed files
155 additions
214 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14653: Use raw properties instead of post-resolution properties…
    
… for MirrorMaker connectors(#13163)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
37 additions
10 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14664; Fix inaccurate raft idle ratio metric (#13207)
    
The raft idle ratio is currently computed as the average of all recorded poll durations. This tends to underestimate the actual idle ratio since it treats all measurements equally regardless how much time was spent. For example, say we poll twice with the following durations:

Poll 1: 2s
Poll 2: 0s

Assume that the busy time is negligible, so 2s passes overall.

In the first measurement, 2s is spent waiting, so we compute and record a ratio of 1.0. In the second measurement, no time passes, and we record 0.0. The idle ratio is then computed as the average of these two values (1.0 + 0.0 / 2 = 0.5), which suggests that the process was busy for 1s, which overestimates the true busy time.

In this patch, we create a new `TimeRatio` class which tracks the total duration of a periodic event over a full interval of time measurement.

Reviewers: José Armando García Sancio <jsancio@apache.org>
5 changed files
231 additions
31 deletions
DATE:Feb 15, 2023
-----------

      Kafka 14565: On failure, close AutoCloseable objects instantiated and…
    
… configured by AbstractConfig (#13168)

Reviewers: Chris Egerton <chrise@aiven.io>
6 changed files
166 additions
40 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14708: Use Java thread instead of kafka library for example pur…
    
…pose (#13238)

Remove "kafka.examples.Consumer" dependency on ShutdownableThread. "examples" module should be dependent only on public APIs but not to be dependent upon server common/internal components.

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
16 additions
15 deletions
DATE:Feb 16, 2023
-----------

KAFKA-6793: Unused configuration logging appears to be noisy and unne…
    
…cessary (#13225)

Warnings about unused configs are most often spurious. This patch changes the current warning to an info message.

Reviewers: Chris Egerton <chrise@aiven.io>, Jason Gustafson <jason@confluent.io>
1 changed file
3 additions
3 deletions
DATE:Feb 13, 2023
-----------

KAFKA-14717 KafkaStreams can' get running if the rebalance happens be… (
    
#13248)

I noticed this issue when tracing #12590.

StreamThread closes the consumer before changing state to DEAD. If the partition rebalance happens quickly, the other StreamThreads can't change KafkaStream state from REBALANCING to RUNNING since there is a PENDING_SHUTDOWN StreamThread

Reviewers: Guozhang Wang <wangguoz@gmail.com>
4 changed files
49 additions
1 deletion
DATE:Feb 17, 2023
-----------

      KAKFA-14733: Added a few missing checks for Kraft Authorizer and upda…
    
…ted AclAuthorizerTest to run tests for both zk and kraft (#13282)

Added the following checks - 
* In StandardAuthorizerData.authorize() to fail if `patternType` other than `LITERAL` is passed.
* In AclControlManager.addAcl() to fail if Resource Name is null or empty.

Also, updated `AclAuthorizerTest` includes a lot of tests covering various scenarios that are missing in `StandardAuthorizerTest`. This PR changes the AclAuthorizerTest to run tests for both `zk` and `kraft` modes - 
* Rename AclAuthorizerTest -> AuthorizerTest
* Parameterize relevant tests to run for both modes

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
6 changed files
459 additions
247 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Better logging to distinguish clean vs unclean loading times (#…

…13242)

Current log loading logging makes it difficult to analyze the behavior in the case of clean and unclean shutdown. The log message looks the same either way. Additionally, the logging about unclean recovery also catches the case when a new broker is initializing from an empty log dir. This patch adds some additional information to existing log messages to make it easier to distinguish these cases.

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
15 additions
5 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14491: [7/N] Enforce strict grace period for versioned stores (#…

…13243)

Changes the versioned store semantics to define an explicit "grace period" property. Grace period will always be equal to the history retention, though in the future we could introduce a new KIP to expose options to configure grace period separately.

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
3 changed files
177 additions
25 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14253 - More informative logging (#13253)
    
Includes 2 requirements from the ticket:
* Include the number of members in the group (I.e., "15 members participating" and "to 15 clients as")
* Sort the member ids (to help compare the membership and assignment across rebalances)

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
14 additions
8 deletions
DATE:Feb 17, 2023
-----------

KAFKA-14711: kafaka-metadata-quorum.sh does not honor --command-confi… (
    
#13241)

…g option

#12951 accidentally changed the behavior of the `kafaka-metadata-quorum.sh` CLI by making it silently ignore a `--command-config <filename>` properties file that exists. This was an undetected regression in the 3.4.0 release.  This patch fixes the issue such that any such specified file will be honored.

Reviewers: José Armando García Sancio <jsancio@apache.org>, Ismael Juma <ismael@juma.me.uk>
3 changed files
28 additions
8 deletions
DATE:Feb 13, 2023
-----------

KAFKA-5756: Wait for concurrent source task offset flush to complete …
    
…before starting next flush (#13208)

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Chris Egerton <chrise@aiven.io>
10 changed files
147 additions
37 deletions
DATE:Feb 16, 2023
-----------

KAFKA-14693; Kafka node should halt instead of exit (#13227)
    
Extend the implementation of ProcessTerminatingFaultHandler to support calling either Exit.halt or Exit.exit. Change the fault handler used by the Controller thread and the KRaft thread to use a halting fault handler.

Those threads cannot call Exit.exit because Runtime.exit joins on the default shutdown hook thread. The shutdown hook thread joins on the controller and kraft thread terminating. This causes a deadlock.

Reviewers: Colin Patrick McCabe <cmccabe@apache.org>, Jason Gustafson <jason@confluent.io>
7 changed files
192 additions
63 deletions
DATE:Feb 14, 2023
-----------

KAFKA-14675: Extract metadata-related tasks from Fetcher into Metadat…
    
…aFetcher 1/4 (#13192)

The `Fetcher` class is used internally by the `KafkaConsumer` to fetch records from the brokers. There is [ongoing work to create a new consumer implementation with a significantly refactored threading model](https://issues.apache.org/jira/browse/KAFKA-14246). The threading refactor work requires a similarly refactored `Fetcher`.

This task covers the work to extract from `Fetcher` the APIs that are related to metadata operations into two new classes: `OffsetFetcher` and `TopicMetadataFetcher`. This will allow the refactoring of `Fetcher` and `MetadataFetcher` for the new consumer.

Reviewers: Philip Nee <pnee@confluent.io>, Guozhang Wang <guozhang@apache.org>, Jason Gustafson <jason@confluent.io>
9 changed files
3,363 additions
2,871 deletions
DATE:Feb 21, 2023
-----------

      MINOR: Remove unnecessary usage of LazyIndex (#13218)
    
The remote index classes use `LazyIndex`, but immediately
force materialization. This results in more verbose code
and it's misleading since the indexes are not lazily
used in practice.

Also simplify `LazyIndex.forOffset/forTime` by removing
`writable` parameter, which is always `true`.

Reviewers: Satish Duggana <satishd@apache.org>
5 changed files
30 additions
42 deletions
DATE:Feb 13, 2023
-----------

      MINOR: KafkaConfig should not expose internal config when queried for…
    
… non-internal configs. (#13059)

Side fix: Print the topic/broker/broker-loggers configurations in the alphabetical/sorted order. This will be useful when the user supplies '--all' flag.

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Luke Chen <showuon@gmail.com>
3 changed files
12 additions
2 deletions
DATE:Jan 23, 2023
-----------

      MINOR: fix warnings in Streams javadocs (#13132)
    
While working on the 3.4 release I noticed we've built up an embarrassingly long list of warnings within the Streams javadocs. It's unavoidable for some links to break as the source code changes, but let's reset back to a good state before the list gets even longer

Reviewers: Matthias J. Sax <mjsax@apache.org>, Walker Carlson <wcarlson@confluent.io>
8 changed files
20 additions
16 deletions
DATE:Jan 20, 2023
-----------

KAFKA-14656: Send UMR first during ZK migration (#13159)
    
When in migration-from-ZK mode and sending RPCs to ZK-based brokers, the KRaft controller must send
full UpdateMetadataRequests prior to sending full LeaderAndIsrRequests. If the controller sends the
requests in the other order, and the ZK-based broker does not already know about some of the nodes
referenced in the LeaderAndIsrRequest, it will reject the request.

This PR includes an integration test, and a number of other small fixes for dual-write.

Co-authored-by: Akhilesh C <akhileshchg@users.noreply.github.com>
Reviewers: Colin P. McCabe <cmccabe@apache.org>
14 changed files
334 additions
56 deletions
DATE:Jan 31, 2023
-----------

      MINOR: Rename description of flatMapValues transformation (#8431)
    
The table of (stateless) transformations uses the transformation name in the first column and a description in the second column. I adjusted the transformation name for FlatMapValues accordingly.

Reviewers: Matthias J. Sax <mjsax@apache.org>, Bill Bejeck <bbejeck@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 19, 2023
-----------

KAFKA-14628: Move CommandLineUtils and CommandDefaultOptions to tools (…

…#13131)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Christo Lolov <christololov@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>
38 changed files
664 additions
567 deletions
DATE:Jan 26, 2023
-----------

      chore: Fix scaladoc warnings (#13164)
    
Make sure no scaladoc warnings are emitted from the streams-scala project build.
We cannot fully fix all scaladoc warnings due to limitations of the scaladoc tool,
so this is a best-effort attempt at fixing as many warnings as possible. We also
disable one problematic class of scaladoc wornings (link errors) in the gradle build.

The causes of existing warnings are that we link to java members from scaladoc, which
is not possible, or we fail to disambiguate some members.

The broad rule applied in the changes is
 - For links to Java members such as [[StateStore]], we use the fully qualified name in a code tag
   to make manual link resolution via a search engine easy.
 - For some common terms that are also linked to Java members, like [[Serde]], we omit the link.
 - We disambiguate where possible.
 - In the special case of @throws declarations with Java Exceptions, we do not seem to be able
   to avoid the warning altogther.

Reviewers: Matthias J. Sax <mjsax@apache.org>, Guozhang Wang <wangguoz@gmail.com>
12 changed files
66 additions
54 deletions
DATE:Jan 31, 2023
-----------

KAFKA-13972; Ensure replica state deleted after reassignment cancella…
    
…tion (#13107)

When a reassignment is cancelled, we need to delete the partition state of adding replicas. Failing to do so causes "stray" replicas which take up disk space and can cause topicId conflicts if the topic is later recreated. Currently, this logic does not work because the leader epoch does not always get bumped after cancellation. Without a leader epoch bump, the replica will ignore StopReplica requests sent by the controller and the replica may remain online.

In this patch, we fix the problem by loosening the epoch check on the broker side when a StopReplica request is received. Instead of ignoring the request when the request epoch matches the current epoch, the request will be accepted.

Note, this problem only affects the ZK controller. The integration tests added here nevertheless cover both metadata modes.

Reviewers:  David Jacot <djacot@confluent.io>, Justine Olshan <jolshan@confluent.io>
4 changed files
94 additions
28 deletions
DATE:Jan 18, 2023
-----------

KAFKA-14463 Close ConnectorClientConfigOverridePolicy instances (#13144)
    
Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
60 additions
16 deletions
DATE:Jan 24, 2023
-----------

      MINOR: Various cleanups in client tests (#13094)
    

Reviewers: Luke Chen <showuon@gmail.com>, Ismael Juma <mlists@juma.me.uk>, Divij Vaidya <diviv@amazon.com>, Christo Lolov <christololov@gmail.com>
60 changed files
274 additions
327 deletions
DATE:Jan 23, 2023
-----------

KAFKA-14491: [2/N] Refactor RocksDB store open iterator management (#…

…13142)

This PR refactors how the list of open iterators for RocksDB stores is managed. Prior to this PR, the `openIterators` list was passed into the constructor for the iterators themselves, allowing `RocksDbIterator.close()` to remove the iterator from the `openIterators` list. After this PR, the iterators themselves will not know about lists of open iterators. Instead, a generic close callback is exposed, and it's the responsibility of the store that creates a new iterator to set the callback on the iterator, to ensure that closing an iterator removes the iterator from the list of open iterators.

This refactor is desirable because it enables more flexible iterator lifecycle management. Building on top of this, RocksDBStore is updated with an option to allow the user (i.e., the caller of methods such as `range()` and `prefixScan()` which return iterators) to pass a custom `openIterators` list for the new iterator to be stored in. This will allow for a new Segments implementation where multiple Segments can share the same RocksDBStore instance, while having each Segment manage its own open iterators.

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
7 changed files
242 additions
50 deletions
DATE:Jan 31, 2023
-----------

      MINOR: add startup timeouts to KRaft integration tests (#13153)
    
When running junit tests, it is not good to block forever on CompletableFuture objects.  When there
are bugs, this can lead to junit tests hanging forever. Jenkins does not deal with this well -- it
often brings down the whole multi-hour test run.  Therefore, when running integration tests in
JUnit, set some reasonable time limits on broker and controller startup time.

Reviewers: Jason Gustafson <jason@confluent.io>
12 changed files
386 additions
43 deletions
DATE:Jan 30, 2023
-----------

      MINOR: fix flaky DefaultStateUpdaterTest (#13160)
    
Mockito should not make named topologies paused by default.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
2 additions
1 deletion
DATE:Jan 24, 2023
-----------

      MINOR: fix flaky StickyAssignorTest.testLargeAssignmentAndGroupWithNo…
    
…nEqualSubscription (#13134)

This test is supposed to be a sanity check that rebalancing with a large number of partitions/consumers won't start to take obscenely long or approach the max.poll.interval.ms -- bumping up the timeout by another 30s still feels very reasonable considering the test is for 1 million partitions

Reviewers: Matthias J. Sax <mjsax@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 20, 2023
-----------

KAFKA-14645: Use plugin classloader when retrieving connector plugin …
    
…config definitions (#13148)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Greg Harris <gharris1727@gmail.com>
3 changed files
61 additions
44 deletions
DATE:Jan 30, 2023
-----------

KAFKA-14637 Fix upgrade compatibility issue from older versions to 3.4 (
    
#13130)

3.4 introduced a change that requires cluster.id to be present in meta.properties if the file is available. This information is not persisted by the brokers in old versions (< 0.10). So on upgrade, the requirement check fails and halts the broker start up. This patch fixes the requirement to ensure that cluster.id is not required in zk mode on upgrade.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Colin P. McCabe <cmccabe@apache.org>, David Arthur <mumrah@gmail.com>
4 changed files
99 additions
15 deletions
DATE:Jan 19, 2023
-----------

KAFKA-14132: Replace PowerMock and EasyMock with Mockito in streams t…
    
…ests (#12821)

Batch 1 of the tests detailed in https://issues.apache.org/jira/browse/KAFKA-14132 which use PowerMock/EasyMock and need to be moved to Mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
2 changed files
146 additions
273 deletions
DATE:Jan 19, 2023
-----------

      Replace EasyMock with Mockito in streams tests (#12818)
    
Batch 6 of the tests detailed in https://issues.apache.org/jira/browse/KAFKA-14133 which use EasyMock and need to be moved to Mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
6 changed files
369 additions
473 deletions
DATE:Jan 19, 2023
-----------

KAFKA-14575: Move ClusterTool to tools module (#13080)
    

Reviewers: dengziming <dengziming1993@gmail.com>, Federico Valeri  <fedevaleri@gmail.com>
5 changed files
206 additions
200 deletions
DATE:Jan 22, 2023
-----------

      temporarily disable the 'false' parameter (#13147)
    
Need to get a clean build for 3.4 and this test has been extremely flaky. I'm looking into the failure as well, and want to pinpoint whether it's the true build that's broken or it's the parameterization itself causing this -- thus, let's start by temporarily disabling the false parameter first.

See KAFKA-14533 for more details

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>
1 changed file
4 additions
3 deletions
DATE:Jan 23, 2023
-----------

      MINOR: Small cleanups in refactored consumer implementation (#13138)
    
This patch contains a few cleanups and fixes in the new refactored consumer logic:

- Use `CompletableFuture` instead of `RequestFuture` in `NetworkClientDelegate`. This is a much more extensible API and it avoids tying the new implementation to `ConsumerNetworkClient`.
- Fix call to `isReady` in `NetworkClientDelegate`. We need the call to `ready` to initiate the connection.
- Ensure backoff is enforced even after successful `FindCoordinator` requests. This avoids a tight loop while metadata is converging after a coordinator change.
- `RequestState` was incorrectly using the reconnect backoff as the retry backoff. In fact, we don't currently have a retry backoff max implemented in the consumer, so the use of `ExponentialBackoff` is unnecessary, but I've left it since we may add this with https://cwiki.apache.org/confluence/display/KAFKA/KIP-580%3A+Exponential+Backoff+for+Kafka+Clients. 
- Minor cleanups in test cases to avoid unused classes/fields.

Reviewers: Philip Nee <pnee@confluent.i>, Guozhang Wang <guozhang@apache.org>
11 changed files
365 additions
376 deletions
DATE:Jan 23, 2023
-----------

      MINOR: fix flaky integrations tests by using 60s default timeout for …
    
…startup (#13141)

The timeouts used for starting up Streams and waiting for the RUNNING state are all over the place across our integration tests, with some as low as 15s (which are unsurprisingly rather flaky). We use 60s as the default timeout for other APIs in the IntegrationTestUtils so we should do the same for #startApplicationAndWaitUntilRunning

I also noticed that we have several versions of that exact API in StreamsTestUtils, so I migrated everyone over to the IntegrationTestUtils#startApplicationAndWaitUntilRunning and added a few overloads for ease of use, including one for single KafkaStreams apps and one for using the default timeout

Reviewers: Matthias J. Sax <mjsax@apache.org>
21 changed files
271 additions
276 deletions
DATE:Jan 22, 2023
-----------

KAFKA-14533: re-enable 'false' and disable the 'true' parameter of Sm…
    
…okeTestDriverIntegrationTest (#13156)

I immediately saw a failure with stateUpdaterEnabled = true after disabling the false parameter, which suggests the problem actually does lie in the state updater itself and not the act of parametrization of the test. To verify this theory, and help stabilize the 3.4 release branch, let's try one more test by swapping out the true build in favor of the false one. If the listOffsets requests stop failing and causing this integration test to hit the global timeout as is currently happening at such a high rate, then we have pretty good evidence pointing at the state updater and should be able to debug things more easily from there.

After getting in a few builds to see whether the flakiness subsides, we should merge this PR to re-enable both parameters going forward: #13155

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
2 additions
2 deletions
DATE:Jan 24, 2023
-----------

KAFKA-14621 Disallow authorizers during ZK migration (#13117)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
13 additions
0 deletions
DATE:Jan 17, 2023
-----------

KAFKA-14623: OAuth's HttpAccessTokenRetriever potentially leaks secre…
    
…ts in logging (#13119)

Removes logging of the HTTP response directly in all known cases to prevent potentially logging access tokens.

Reviewers:  Sushant Mahajan <sushant.mahajan88@gmail.com>, Rajini Sivaram <rajinisivaram@googlemail.com>
1 changed file
12 additions
5 deletions
DATE:Jan 24, 2023
-----------

KAFKA-14644: Process should crash after failure in Raft IO thread (#1…

…3140)

Unexpected errors caught in the Raft IO thread should cause the process to stop. This is similar to the handling of exceptions in the controller.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
5 changed files
39 additions
11 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14311: Cleanly cleanly stop connectors/tasks on Connect worker …
    
…shutdown (#12802)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
46 additions
19 deletions
DATE:Jan 23, 2023
-----------

      KAFAK-14660: Fix divide-by-zero vulnerability (#13175)
    
This PR adds a safe-guard for divide-by-zero. While `totalCapacity` can never be zero, an explicit error message is desirable.

Reviewers: Bill Bejeck <bill@confluent.io>, Guozhang Wang <guozhang@confluent.io>
1 changed file
4 additions
0 deletions
DATE:Jan 31, 2023
-----------

      Update outdated documentation. (#13139)
    
The current documentation indicates two positions are tracked, but these positions were removed a few years ago. Now we use a single position to track the last consumed record. Updated the documentation to reflect to the current state.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
8 additions
9 deletions
DATE:Jan 20, 2023
-----------

      MINOR; Make granting voter immutable (#13154)
    
Make LeaderState's grantingVoters field explicitly immutable. The set of voters that granted their voter to the current leader was already immutable. This change makes that explicit.

Reviewers: Jason Gustafson <jason@confluent.io>, Mathew Hogan <mathewdhogan@@users.noreply.github.com>
1 changed file
3 additions
2 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14367; Add internal APIs to the new GroupCoordinator interface (
    
#13112)

This patch migrates all the internal APIs of the current group coordinator to the new `GroupCoordinator` interface. It also makes the current implementation package private to ensure that it is not used anymore.

Reviewers: Justine Olshan <jolshan@confluent.io>
22 changed files
328 additions
143 deletions
DATE:Jan 20, 2023
-----------

      MINOR: Remove some connect tests from Java 17 block list (#13121)
    
Most were converted not to use PowerMock, but some no
longer exist.

Reviewers: Chris Egerton <chrise@aiven.io>, Christo Lolov  <christo_lolov@yahoo.com>
1 changed file
3 additions
6 deletions
DATE:Jan 21, 2023
-----------

KAFKA-14638: Elaborate when transaction.timeout.ms resets (#13129)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
1 changed file
3 additions
2 deletions
DATE:Jan 20, 2023
-----------

      KRaft brokers and controllesr should fail on Authorizer failure (#13151)
    
KRaft brokers and controllesr should fail to start if any authorizer fails to start.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
4 changed files
70 additions
12 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14409: Clean ProcessorParameters from casting (#12879)
    
Reviewers: A. Sophie Blee-Goldman <ableegoldman@gmail.com>, John Roesler <vvcephei@apache.org>
5 changed files
19 additions
31 deletions
DATE:Jan 31, 2023
-----------

      MINOR: fix some typos in comments/docs/variable names (#13118)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
7 additions
7 deletions
DATE:Jan 23, 2023
-----------

      MINOR: KafkaConfig should not expose internal config when queried for…
    
… non-internal configs. (#13059)

Side fix: Print the topic/broker/broker-loggers configurations in the alphabetical/sorted order. This will be useful when the user supplies '--all' flag.

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Luke Chen <showuon@gmail.com>
3 changed files
12 additions
2 deletions
DATE:Jan 23, 2023
-----------

      MINOR: fix warnings in Streams javadocs (#13132)
    
While working on the 3.4 release I noticed we've built up an embarrassingly long list of warnings within the Streams javadocs. It's unavoidable for some links to break as the source code changes, but let's reset back to a good state before the list gets even longer

Reviewers: Matthias J. Sax <mjsax@apache.org>, Walker Carlson <wcarlson@confluent.io>
8 changed files
20 additions
16 deletions
DATE:Jan 20, 2023
-----------

KAFKA-14656: Send UMR first during ZK migration (#13159)
    
When in migration-from-ZK mode and sending RPCs to ZK-based brokers, the KRaft controller must send
full UpdateMetadataRequests prior to sending full LeaderAndIsrRequests. If the controller sends the
requests in the other order, and the ZK-based broker does not already know about some of the nodes
referenced in the LeaderAndIsrRequest, it will reject the request.

This PR includes an integration test, and a number of other small fixes for dual-write.

Co-authored-by: Akhilesh C <akhileshchg@users.noreply.github.com>
Reviewers: Colin P. McCabe <cmccabe@apache.org>
14 changed files
334 additions
56 deletions
DATE:Jan 31, 2023
-----------

      MINOR: Rename description of flatMapValues transformation (#8431)
    
The table of (stateless) transformations uses the transformation name in the first column and a description in the second column. I adjusted the transformation name for FlatMapValues accordingly.

Reviewers: Matthias J. Sax <mjsax@apache.org>, Bill Bejeck <bbejeck@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 19, 2023
-----------

KAFKA-14628: Move CommandLineUtils and CommandDefaultOptions to tools (…

…#13131)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Christo Lolov <christololov@gmail.com>, Sagar Rao <sagarmeansocean@gmail.com>
38 changed files
664 additions
567 deletions
DATE:Jan 26, 2023
-----------

      chore: Fix scaladoc warnings (#13164)
    
Make sure no scaladoc warnings are emitted from the streams-scala project build.
We cannot fully fix all scaladoc warnings due to limitations of the scaladoc tool,
so this is a best-effort attempt at fixing as many warnings as possible. We also
disable one problematic class of scaladoc wornings (link errors) in the gradle build.

The causes of existing warnings are that we link to java members from scaladoc, which
is not possible, or we fail to disambiguate some members.

The broad rule applied in the changes is
 - For links to Java members such as [[StateStore]], we use the fully qualified name in a code tag
   to make manual link resolution via a search engine easy.
 - For some common terms that are also linked to Java members, like [[Serde]], we omit the link.
 - We disambiguate where possible.
 - In the special case of @throws declarations with Java Exceptions, we do not seem to be able
   to avoid the warning altogther.

Reviewers: Matthias J. Sax <mjsax@apache.org>, Guozhang Wang <wangguoz@gmail.com>
12 changed files
66 additions
54 deletions
DATE:Jan 31, 2023
-----------

KAFKA-13972; Ensure replica state deleted after reassignment cancella…
    
…tion (#13107)

When a reassignment is cancelled, we need to delete the partition state of adding replicas. Failing to do so causes "stray" replicas which take up disk space and can cause topicId conflicts if the topic is later recreated. Currently, this logic does not work because the leader epoch does not always get bumped after cancellation. Without a leader epoch bump, the replica will ignore StopReplica requests sent by the controller and the replica may remain online.

In this patch, we fix the problem by loosening the epoch check on the broker side when a StopReplica request is received. Instead of ignoring the request when the request epoch matches the current epoch, the request will be accepted.

Note, this problem only affects the ZK controller. The integration tests added here nevertheless cover both metadata modes.

Reviewers:  David Jacot <djacot@confluent.io>, Justine Olshan <jolshan@confluent.io>
4 changed files
94 additions
28 deletions
DATE:Jan 18, 2023
-----------

KAFKA-14463 Close ConnectorClientConfigOverridePolicy instances (#13144)
    
Reviewers: Chris Egerton <chrise@aiven.io>
7 changed files
60 additions
16 deletions
DATE:Jan 24, 2023
-----------

      MINOR: Various cleanups in client tests (#13094)
    

Reviewers: Luke Chen <showuon@gmail.com>, Ismael Juma <mlists@juma.me.uk>, Divij Vaidya <diviv@amazon.com>, Christo Lolov <christololov@gmail.com>
60 changed files
274 additions
327 deletions
DATE:Jan 23, 2023
-----------

KAFKA-14491: [2/N] Refactor RocksDB store open iterator management (#…

…13142)

This PR refactors how the list of open iterators for RocksDB stores is managed. Prior to this PR, the `openIterators` list was passed into the constructor for the iterators themselves, allowing `RocksDbIterator.close()` to remove the iterator from the `openIterators` list. After this PR, the iterators themselves will not know about lists of open iterators. Instead, a generic close callback is exposed, and it's the responsibility of the store that creates a new iterator to set the callback on the iterator, to ensure that closing an iterator removes the iterator from the list of open iterators.

This refactor is desirable because it enables more flexible iterator lifecycle management. Building on top of this, RocksDBStore is updated with an option to allow the user (i.e., the caller of methods such as `range()` and `prefixScan()` which return iterators) to pass a custom `openIterators` list for the new iterator to be stored in. This will allow for a new Segments implementation where multiple Segments can share the same RocksDBStore instance, while having each Segment manage its own open iterators.

Part of KIP-889.

Reviewers: Matthias J. Sax <matthias@confluent.io>
7 changed files
242 additions
50 deletions
DATE:Jan 31, 2023
-----------

      MINOR: add startup timeouts to KRaft integration tests (#13153)
    
When running junit tests, it is not good to block forever on CompletableFuture objects.  When there
are bugs, this can lead to junit tests hanging forever. Jenkins does not deal with this well -- it
often brings down the whole multi-hour test run.  Therefore, when running integration tests in
JUnit, set some reasonable time limits on broker and controller startup time.

Reviewers: Jason Gustafson <jason@confluent.io>
12 changed files
386 additions
43 deletions
DATE:Jan 30, 2023
-----------

      MINOR: fix flaky DefaultStateUpdaterTest (#13160)
    
Mockito should not make named topologies paused by default.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
2 additions
1 deletion
DATE:Jan 24, 2023
-----------

      MINOR: fix flaky StickyAssignorTest.testLargeAssignmentAndGroupWithNo…
    
…nEqualSubscription (#13134)

This test is supposed to be a sanity check that rebalancing with a large number of partitions/consumers won't start to take obscenely long or approach the max.poll.interval.ms -- bumping up the timeout by another 30s still feels very reasonable considering the test is for 1 million partitions

Reviewers: Matthias J. Sax <mjsax@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 20, 2023
-----------

KAFKA-14645: Use plugin classloader when retrieving connector plugin …
    
…config definitions (#13148)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Greg Harris <gharris1727@gmail.com>
3 changed files
61 additions
44 deletions
DATE:Jan 30, 2023
-----------

KAFKA-14637 Fix upgrade compatibility issue from older versions to 3.4 (
    
#13130)

3.4 introduced a change that requires cluster.id to be present in meta.properties if the file is available. This information is not persisted by the brokers in old versions (< 0.10). So on upgrade, the requirement check fails and halts the broker start up. This patch fixes the requirement to ensure that cluster.id is not required in zk mode on upgrade.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Colin P. McCabe <cmccabe@apache.org>, David Arthur <mumrah@gmail.com>
4 changed files
99 additions
15 deletions
DATE:Jan 19, 2023
-----------

KAFKA-14132: Replace PowerMock and EasyMock with Mockito in streams t…
    
…ests (#12821)

Batch 1 of the tests detailed in https://issues.apache.org/jira/browse/KAFKA-14132 which use PowerMock/EasyMock and need to be moved to Mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
2 changed files
146 additions
273 deletions
DATE:Jan 19, 2023
-----------

      Replace EasyMock with Mockito in streams tests (#12818)
    
Batch 6 of the tests detailed in https://issues.apache.org/jira/browse/KAFKA-14133 which use EasyMock and need to be moved to Mockito.

Reviewer: Bruno Cadonna <cadonna@apache.org>
6 changed files
369 additions
473 deletions
DATE:Jan 19, 2023
-----------

KAFKA-14575: Move ClusterTool to tools module (#13080)
    

Reviewers: dengziming <dengziming1993@gmail.com>, Federico Valeri  <fedevaleri@gmail.com>
5 changed files
206 additions
200 deletions
DATE:Jan 22, 2023
-----------

      temporarily disable the 'false' parameter (#13147)
    
Need to get a clean build for 3.4 and this test has been extremely flaky. I'm looking into the failure as well, and want to pinpoint whether it's the true build that's broken or it's the parameterization itself causing this -- thus, let's start by temporarily disabling the false parameter first.

See KAFKA-14533 for more details

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>
1 changed file
4 additions
3 deletions
DATE:Jan 23, 2023
-----------

      MINOR: Small cleanups in refactored consumer implementation (#13138)
    
This patch contains a few cleanups and fixes in the new refactored consumer logic:

- Use `CompletableFuture` instead of `RequestFuture` in `NetworkClientDelegate`. This is a much more extensible API and it avoids tying the new implementation to `ConsumerNetworkClient`.
- Fix call to `isReady` in `NetworkClientDelegate`. We need the call to `ready` to initiate the connection.
- Ensure backoff is enforced even after successful `FindCoordinator` requests. This avoids a tight loop while metadata is converging after a coordinator change.
- `RequestState` was incorrectly using the reconnect backoff as the retry backoff. In fact, we don't currently have a retry backoff max implemented in the consumer, so the use of `ExponentialBackoff` is unnecessary, but I've left it since we may add this with https://cwiki.apache.org/confluence/display/KAFKA/KIP-580%3A+Exponential+Backoff+for+Kafka+Clients. 
- Minor cleanups in test cases to avoid unused classes/fields.

Reviewers: Philip Nee <pnee@confluent.i>, Guozhang Wang <guozhang@apache.org>
11 changed files
365 additions
376 deletions
DATE:Jan 23, 2023
-----------

      MINOR: fix flaky integrations tests by using 60s default timeout for …
    
…startup (#13141)

The timeouts used for starting up Streams and waiting for the RUNNING state are all over the place across our integration tests, with some as low as 15s (which are unsurprisingly rather flaky). We use 60s as the default timeout for other APIs in the IntegrationTestUtils so we should do the same for #startApplicationAndWaitUntilRunning

I also noticed that we have several versions of that exact API in StreamsTestUtils, so I migrated everyone over to the IntegrationTestUtils#startApplicationAndWaitUntilRunning and added a few overloads for ease of use, including one for single KafkaStreams apps and one for using the default timeout

Reviewers: Matthias J. Sax <mjsax@apache.org>
21 changed files
271 additions
276 deletions
DATE:Jan 22, 2023
-----------

KAFKA-14533: re-enable 'false' and disable the 'true' parameter of Sm…
    
…okeTestDriverIntegrationTest (#13156)

I immediately saw a failure with stateUpdaterEnabled = true after disabling the false parameter, which suggests the problem actually does lie in the state updater itself and not the act of parametrization of the test. To verify this theory, and help stabilize the 3.4 release branch, let's try one more test by swapping out the true build in favor of the false one. If the listOffsets requests stop failing and causing this integration test to hit the global timeout as is currently happening at such a high rate, then we have pretty good evidence pointing at the state updater and should be able to debug things more easily from there.

After getting in a few builds to see whether the flakiness subsides, we should merge this PR to re-enable both parameters going forward: #13155

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
2 additions
2 deletions
DATE:Jan 24, 2023
-----------

KAFKA-14621 Disallow authorizers during ZK migration (#13117)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
13 additions
0 deletions
DATE:Jan 17, 2023
-----------

KAFKA-14623: OAuth's HttpAccessTokenRetriever potentially leaks secre…
    
…ts in logging (#13119)

Removes logging of the HTTP response directly in all known cases to prevent potentially logging access tokens.

Reviewers:  Sushant Mahajan <sushant.mahajan88@gmail.com>, Rajini Sivaram <rajinisivaram@googlemail.com>
1 changed file
12 additions
5 deletions
DATE:Jan 24, 2023
-----------

KAFKA-14644: Process should crash after failure in Raft IO thread (#1…

…3140)

Unexpected errors caught in the Raft IO thread should cause the process to stop. This is similar to the handling of exceptions in the controller.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
5 changed files
39 additions
11 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14311: Cleanly cleanly stop connectors/tasks on Connect worker …
    
…shutdown (#12802)

Reviewers: Chris Egerton <chrise@aiven.io>
2 changed files
46 additions
19 deletions
DATE:Jan 23, 2023
-----------

      KAFAK-14660: Fix divide-by-zero vulnerability (#13175)
    
This PR adds a safe-guard for divide-by-zero. While `totalCapacity` can never be zero, an explicit error message is desirable.

Reviewers: Bill Bejeck <bill@confluent.io>, Guozhang Wang <guozhang@confluent.io>
1 changed file
4 additions
0 deletions
DATE:Jan 31, 2023
-----------

      Update outdated documentation. (#13139)
    
The current documentation indicates two positions are tracked, but these positions were removed a few years ago. Now we use a single position to track the last consumed record. Updated the documentation to reflect to the current state.

Reviewers: Guozhang Wang <wangguoz@gmail.com>
1 changed file
8 additions
9 deletions
DATE:Jan 20, 2023
-----------

      MINOR; Make granting voter immutable (#13154)
    
Make LeaderState's grantingVoters field explicitly immutable. The set of voters that granted their voter to the current leader was already immutable. This change makes that explicit.

Reviewers: Jason Gustafson <jason@confluent.io>, Mathew Hogan <mathewdhogan@@users.noreply.github.com>
1 changed file
3 additions
2 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14367; Add internal APIs to the new GroupCoordinator interface (
    
#13112)

This patch migrates all the internal APIs of the current group coordinator to the new `GroupCoordinator` interface. It also makes the current implementation package private to ensure that it is not used anymore.

Reviewers: Justine Olshan <jolshan@confluent.io>
22 changed files
328 additions
143 deletions
DATE:Jan 20, 2023
-----------

      MINOR: Remove some connect tests from Java 17 block list (#13121)
    
Most were converted not to use PowerMock, but some no
longer exist.

Reviewers: Chris Egerton <chrise@aiven.io>, Christo Lolov  <christo_lolov@yahoo.com>
1 changed file
3 additions
6 deletions
DATE:Jan 21, 2023
-----------

KAFKA-14638: Elaborate when transaction.timeout.ms resets (#13129)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
1 changed file
3 additions
2 deletions
DATE:Jan 20, 2023
-----------

      KRaft brokers and controllesr should fail on Authorizer failure (#13151)
    
KRaft brokers and controllesr should fail to start if any authorizer fails to start.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
4 changed files
70 additions
12 deletions
DATE:Jan 25, 2023
-----------

KAFKA-14409: Clean ProcessorParameters from casting (#12879)
    
Reviewers: A. Sophie Blee-Goldman <ableegoldman@gmail.com>, John Roesler <vvcephei@apache.org>
5 changed files
19 additions
31 deletions
DATE:Jan 31, 2023
-----------

      MINOR: fix some typos in comments/docs/variable names (#13118)
    
Reviewers: Colin P. McCabe <cmccabe@apache.org>
3 changed files
7 additions
7 deletions
DATE:Jan 23, 2023
-----------

      MINOR: Implement toString method for TopicAssignment and PartitionAss…
    
…ignment (#13101)

Implements `toString` method for classes `TopicAssignment` and` PartitionAssignment`. Also removes the `final` keyword from the constructor arguments for consistency.

Reviewers: José Armando García Sancio <jsancio@apache.org>
4 changed files
35 additions
4 deletions
DATE:Jan 10, 2023
-----------

KAFKA-14540: Fix DataOutputStreamWritable#writeByteBuffer (#13032)
    
When writing a ByteBuffer backed by a HeapBuffer to a DataOutputStream, it is necessary to pass in the offset and the position, not just the position. It is also necessary to pass the remain length, not the limit. The current code results in writing the wrong data to DataOutputStream. While the DataOutputStreamWritable is used in the project, I do not see any references that would utilize this code path, so this bug fix is relatively minor.

I added a new test to cover the exact bug. The test fails without this change.
2 changed files
68 additions
1 deletion
DATE:Jan 10, 2023
-----------

KAFKA-14304 Use boolean for ZK migrating brokers in RPC/record (#13103)
    
With the new broker epoch validation logic introduced in #12998, we no longer need the ZK broker epoch to be sent to the KRaft controller. This patch removes that epoch and replaces it with a boolean.

Another small fix is included in this patch for controlled shutdown in migration mode. Previously, if a ZK broker was in migration mode, it would always try to do controlled shutdown via BrokerLifecycleManager. Since there is no ordering dependency between bringing up ZK brokers and the KRaft quorum during migration, a ZK broker could be running in migration mode, but talking to a ZK controller. A small check was added to see if the current controller is ZK or KRaft before decided which controlled shutdown to attempt.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
14 changed files
121 additions
61 deletions
DATE:Jan 11, 2023
-----------

KAFKA-14279: Add 3.3.x streams system tests (#13077)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
14 changed files
1,358 additions
7 deletions
DATE:Jan 10, 2023
-----------

KAFKA-9087 Replace log high watermark by future log high watermark wh… (
    
#13075)

Reviewers: Ismael Juma <ismael@juma.me.uk>, Justine Olshan <jolshan@confluent.io>, Jun Rao <junrao@gmail.com>
2 changed files
61 additions
4 deletions
DATE:Jan 7, 2023
-----------

      2023 (#13083)
    
It's 2023 now y'all

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 6, 2023
-----------

KAFKA-14530: Check state updater more often (#13017)
    
In the new state restoration code, the state updater needs to be checked regularly
by the main thread to transfer ownership of tasks back to the main thread once the
state of the task is restored. The more often we check this, the faster we can
start processing the tasks.

Currently, we only check the state updater once in every loop iteration of the state
updater. And while we couldn't observe this to be strictly not often enough, we can
increase the number of checks easily by moving the check inside the inner processing
loop. This would mean that once we have iterated over `numIterations` records, we can
already start processing tasks that have finished restoration in the meantime.

Reviewer: Bruno Cadonna <cadonna@apache.org>
2 changed files
43 additions
24 deletions
DATE:Jan 12, 2023
-----------

KAFKA-14601: Improve exception handling in KafkaEventQueue #13089

If KafkaEventQueue gets an InterruptedException while waiting for a condition variable, it
currently exits immediately. Instead, it should complete the remaining events exceptionally and
then execute the cleanup event. This will allow us to finish any necessary cleanup steps.

In order to do this, we require the cleanup event to be provided when the queue is contructed,
rather than when it's being shut down.

Also, handle cases where Event#handleException itself throws an exception.

Remove timed shutdown from the event queue code since nobody was using it, and it adds complexity.

Add server-common/src/test/resources/test/log4j.properties since this gradle module somehow avoided
having a test log4j.properties up to this point.

Reviewers: David Arthur <mumrah@gmail.com>
10 changed files
340 additions
129 deletions
DATE:Jan 12, 2023
-----------

      MINOR: Update KRaft cluster upgrade documentation for 3.4 (#13063)
    
Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
21 additions
2 deletions
DATE:Jan 9, 2023
-----------

KAFKA-14367; Add OffsetCommit to the new GroupCoordinator interfa…
    
…ce (#12886)

This patch adds `OffsetCommit` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Omnia G H Ibrahim <o.g.h.ibrahim@gmail.com>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
10 changed files
627 additions
134 deletions
DATE:Jan 12, 2023
-----------

      MINOR: Fix docs to state that sendfile implemented in `TransferableRe…
    
…cords` instead of `MessageSet` (#13109)

Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
1 addition
1 deletion
DATE:Jan 15, 2023
-----------

      Update ProducerConfig.java (#13115)
    
This should be greater than 1 to be consistent with behavior described inmax.in.flight.requests.per.connection.

Reviewers: Bill Bejeck <bbejeck@apache.org>
1 changed file
1 addition
1 deletion
DATE:Jan 13, 2023
-----------

KAFKA-14367; Add OffsetDelete to the new GroupCoordinator interfa…
    
…ce (#12902)

This patch adds `OffsetDelete` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
6 changed files
498 additions
94 deletions
DATE:Jan 17, 2023
-----------

KAFKA-13709 (follow-up): Avoid mention of 'exactly-once delivery' or …
    
…'delivery guarantees' in Connect (#13106)
11 changed files
29 additions
28 deletions
DATE:Jan 13, 2023
-----------

KAFKA-14607: Move Scheduler/KafkaScheduler to server-common (#13092)
    
There were some concurrency inconsistencies in `KafkaScheduler` flagged by spotBugs
that had to be fixed, summary of changes below:
* Executor is `volatile`
* We always synchronize and check `isStarted` as the first thing within the critical
   section when a mutating operation is performed.
* We don't synchronize (but ensure the executor is not null in a safe way) in read-only
   operations that operate on the executor.

With regards to `MockScheduler/MockTask`:
* Set the type of `nextExecution` to `AtomicLong` and replaced inconsistent synchronization
* Extracted logic into `MockTask.rescheduleIfPeriodic`

Tweaked the `Scheduler` interface a bit:
* Removed `unit` parameter since we always used `ms` except one invocation
* Introduced a couple of `scheduleOnce` overloads to replace the usage of default
   arguments in Scala
* Pulled up `resizeThreadPool` to the interface and removed `isStarted` from the
  interface.

Other cleanups:
* Removed spotBugs exclusion affecting `kafka.log.LogConfig`, which no longer exists.

For broader context, see:
* KAFKA-14470: Move log layer to storage module

Reviewers: Jun Rao <junrao@gmail.com>
52 changed files
613 additions
460 deletions
DATE:Jan 11, 2023
-----------

      MINOR: Include the inner exception stack trace when re-throwing an ex…
    
…ception (#12229)

While wrapping the caught exception into a custom one, information about the caught
exception is being lost, including information about the stack trace of the exception.

When re-throwing an exception, we either include the original exception or the relevant
information is added to the exception message.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Luke Chen <showuon@gmail.com>, dengziming <dengziming1993@gmail.com>, Matthew de Detrich <mdedetrich@gmail.com>
5 changed files
5 additions
5 deletions
DATE:Jan 15, 2023
-----------

KAFKA-14568: Move FetchDataInfo and related to storage module (#13085)
    
Part of KAFKA-14470: Move log layer to storage module.

Reviewers: Ismael Juma <ismael@juma.me.uk>

Co-authored-by: Ismael Juma <ismael@juma.me.uk>
42 changed files
583 additions
457 deletions
DATE:Jan 13, 2023
-----------

      MINOR Fixed doc generation for LogConfig class in genTopicConfigDocs. (…

…#13079)


Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
1 addition
1 deletion
DATE:Jan 5, 2023
-----------

KAFKA-14367; Add TxnOffsetCommit to the new GroupCoordinator inte…
    
…rface (#12901)

This patch adds `TxnOffsetCommit` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
7 changed files
643 additions
128 deletions
DATE:Jan 13, 2023
-----------

KAFKA-14279; Add 3.3.x to core compatibility tests (#13076)
    
Now that 3.3.x exist, add system tests for upgrade, downgrade and client
compatibility.

Reviewers: Ismael Juma <ismael@juma.me.uk>
5 changed files
15 additions
6 deletions
DATE:Jan 5, 2023
-----------

KAFKA-14493: Introduce Zk to KRaft migration state machine STUBs in K…
    
…Raft controller. (#12998)

This patch introduces a preliminary state machine that can be used by KRaft
controller to drive online migration from Zk to KRaft.

MigrationState -- Defines the states we can have while migration from Zk to
KRaft.

KRaftMigrationDriver -- Defines the state transitions, and events to handle
actions like controller change, metadata change, broker change and have
interfaces through which it claims Zk controllership, performs zk writes and
sends RPCs to ZkBrokers.

MigrationClient -- Interface that defines the functions used to claim and
relinquish Zk controllership, read to and write from Zk.

Co-authored-by: David Arthur <mumrah@gmail.com>
Reviewers: Colin P. McCabe <cmccabe@apache.org>
54 changed files
1,383 additions
179 deletions
DATE:Jan 9, 2023
-----------

      MINOR: add error reason when controller failed to handle events (#13050)
    
In KRaft, when controller failed to handle events, we'll log error and return back to brokers. But in some cases, we only log error class name, and return error class name back to brokers, which is un-useful for troubleshooting. Ex: When broker registration failed with unsupported version error, it showed:

2022-12-28T17:46:42.876+0800 [DEBUG] [TestEventLogger]     [2022-12-28 17:46:42,877] INFO [Controller 3000] registerBroker: failed with UnsupportedVersionException in 2888 us (org.apache.kafka.controller.QuorumController:447)

2022-12-28T17:46:42.877+0800 [DEBUG] [TestEventLogger]     [2022-12-28 17:46:42,878] INFO [BrokerLifecycleManager id=0] Unable to register broker 0 because the controller returned error UNSUPPORTED_VERSION (kafka.server.BrokerLifecycleManager:66)

Checking the logs, we still don't know which version it supports.
After this PR, it will show:

2022-12-28T17:54:59.671+0800 [DEBUG] [TestEventLogger]     [2022-12-28 17:54:59,671] INFO [Controller 3000] registerBroker: failed with UnsupportedVersionException in 291 us. Reason: Unable to register because the broker does not support version 8 of metadata.version. It wants a version between 4 and 4, inclusive. (org.apache.kafka.controller.QuorumController:447)

2022-12-28T17:54:59.671+0800 [DEBUG] [TestEventLogger]     [2022-12-28 17:54:59,672] INFO [BrokerLifecycleManager id=0] Unable to register broker 0 because the controller returned error UNSUPPORTED_VERSION (kafka.server.BrokerLifecycleManager:66)

Reviewers: dengziming <dengziming1993@gmail.com>, Federico Valeri <fvaleri@redhat.com >
1 changed file
4 additions
4 deletions
DATE:Jan 7, 2023
-----------

KAFKA-14570: Fix parenthesis in verifyFullFetchResponsePartitions out…
    
…put (#13072)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
3 additions
3 deletions
DATE:Jan 9, 2023
-----------

      MINOR: bump streams quickstart pom versions and add to list in gradle…
    
….properties (#13064)

The three pom files for the Streams quickstart also need to bump their versions after a branch cut. For some reason these are included (late) in the Release Process guide, but are missing from the list of what to update when bumping the version in gradle.properties. This commit adds the missing files to this list to help future RMs locate all the required version changes

Reviewers: Ismael Juma <ismael@juma.me.uk>
4 changed files
6 additions
3 deletions
DATE:Jan 9, 2023
-----------

KAFKA-14557; Lock metadata log dir (#13058)
    
This change makes sure that Kafka grabs a log dir lock in the following additional cases:

1. When a Kafka node runs in controller only. The current implementation doesn't grab a file lock because the LogManager is never instantiated.
2. When the metadata log dir is different from the log dir(s). The current implementation of LogManager doesn't load or grab a lock on the metadata dir.

Reviewers: Ron Dagostino <rdagostino@confluent.io> , dengziming <dengziming1993@gmail.com>
4 changed files
189 additions
53 deletions
DATE:Jan 10, 2023
-----------

KAFKA-14558: Move/Rewrite LastRecord, TxnMetadata, BatchMetadata, Pro…
    
…ducerStateEntry, and ProducerAppendInfo to the storage module (#13043)

For broader context on this change, see:
* KAFKA-14470: Move log layer to storage module.

Reviewers: Ismael Juma <ismael@juma.me.uk>
12 changed files
665 additions
377 deletions
DATE:Jan 8, 2023
-----------

      MINOR: doc: note how JDK-8136913 can affect client SASL (#13071)
    
Reviewers: Mickael Maison <mickael.maison@gmail.com>, Federico Valeri <fedevaleri@gmail.com>
1 changed file
7 additions
1 deletion
DATE:Jan 6, 2023
-----------

      MINOR: Remove public mutable fields from ProducerAppendInfo (#13091)
    
Replace them with accessors and mutators.

Reviewers: Satish Duggana <satishd@apache.org>
2 changed files
57 additions
32 deletions
DATE:Jan 8, 2023
-----------

KAFKA-14618; Fix off by one error in snapshot id (#13108)
    
The KRaft client expects the offset of the snapshot id to be an end offset. End offsets are
exclusive. The MetadataProvenance type was createing a snapshot id using the last contained offset
which is inclusive. This change fixes that and renames some of the fields to make this difference
more obvious.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
10 changed files
52 additions
53 deletions
DATE:Jan 13, 2023
-----------

KAFKA-14535: Fix flaky EndToEndAuthorization tests which were sensiti…
    
…ve to ACL change reordering (#13086)

The ACL change methods (create, delete) are eventually consistent across a Kafka cluster.
As part of that, changes to the same resource made to different brokers may be reordered.
In this test, a delete operation initiated in noConsumeWithoutDescribeAclSetup was being
reordered to an unexpected time later in the test, causing an expected ACL to be missing.

To fix this, add a wait condition that asserts that the delete operations initiated in
noConsumeWithoutDescribeAclSetup are completely applied before returning from the method.

Note: test failures were present for both the ZK and KRAFT iterations of the test, but
the ZK iteration encountered it much more often, and was used to diagnose the reordering.

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
1 addition
0 deletions
DATE:Jan 7, 2023
-----------

KAFKA-14600: Reduce flakiness in ProducerIdExpirationTest (#13087)
    
The broker appears to be timing out the producer ID before the test can see it.
Increase the timeouts to compensate for slower CI environments.

Signed-off-by: Greg Harris <greg.harris@aiven.io>
1 changed file
2 additions
2 deletions
DATE:Jan 10, 2023
-----------

KAFKA-14612: Make sure to write a new topics ConfigRecords to metadat…
    
…a log iff the topic is created (#13104)

### JIRA
https://issues.apache.org/jira/browse/KAFKA-14612

### Details
Makes sure we emit `ConfigRecord`s for a topic iff it actually gets created. Currently, we might emit `ConfigRecord`s even if the topic creation fails later in the `createTopics` method.

I created a new method `incrementalAlterConfig` in `ConfigurationControlManager` that is similar to `incrementalAlterConfig` but it just handles one config at a time. This is used in `ReplicationControlManager` for each topic. By handling one topic's config at a time, it's easier to isolate each topic's config records. This enables us to make sure we only write config records for topics that get created.

I refactored `incrementalAlterConfigResource` to return an `ApiError`. This made it easier to implement the new method `incrementalAlterConfig` in `ConfigurationControlManager` because it then doesnt have to search in the `Map` for the result.

### Testing
Enhanced pre-existing test `ReplicationControlManagerTest.testCreateTopicsWithConfigs`. I ran the tests without the changes to `ReplicationControlManager` and made sure each assertion ends up failing. Also ran `./gradlew metadata:test --tests org.apache.kafka.controller.ReplicationControlManagerTest`.

Reviewers: Jason Gustafson <jason@confluent.io>
4 changed files
130 additions
26 deletions
DATE:Jan 13, 2023
-----------

KAFKA-14367; Add OffsetFetch to the new GroupCoordinator interface (
    
#12870)

This patch adds OffsetFetch to the new GroupCoordinator interface and updates KafkaApis to use it. 

Reviewers: Philip Nee <pnee@confluent.i>, Jeff Kim <jeff.kim@confluent.io>, Justine Olshan <jolshan@confluent.io>
9 changed files
799 additions
124 deletions
DATE:Jan 10, 2023
-----------

KAFKA-14003 Kafka Streams JUnit4 to JUnit5 migration part 2 (#12301)
    
This pull request addresses https://issues.apache.org/jira/browse/KAFKA-14003. It is the second of a series of pull requests which address the move of Kafka Streams tests from JUnit 4 to JUnit 5.

Reviewer: Bruno Cadonna <cadonna@apache.org>
12 changed files
177 additions
225 deletions
DATE:Jan 11, 2023
-----------

KAFKA-12558: Do not prematurely mutate internal partition state in Mi…
    
…rror Maker 2 (#11818)

Reviewers: Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
3 changed files
156 additions
11 deletions
DATE:Jan 10, 2023
-----------

      MINOR: Add implicit for Serde[UUID] to Streams Scala API (#8335)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
1 addition
0 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14476: Move OffsetMap and related to storage module (#13042)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: dengziming <dengziming1993@gmail.com>, Satish Duggana <satishd@apache.org>, Federico Valeri <fedevaleri@gmail.com>
10 changed files
304 additions
227 deletions
DATE:Dec 23, 2022
-----------

      MINOR: Fix method name in table-table FK left join example (#11569)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Dec 28, 2022
-----------

      MINOR: Remove unused config variables (#13047)
    
` MaxIdMapSnapshots` and `ControllerMessageQueueSize` never had any use.
`TransactionalIdExpirationMsDefault` is a duplicate of `TransactionalIdExpirationMs`
(the latter is used).

Also move `DeleteTopicEnable` and `CompressionType` to the right section.

Reviewers: Ron Dagostino <rdagostino@confluent.io>
2 changed files
2 additions
12 deletions
DATE:Dec 27, 2022
-----------

      MINOR: Update WordCountTransformerDemo comments (#12470)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
5 additions
6 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14545: Make MirrorCheckpointTask.checkpoint handle null OffsetA…
    
…ndMetadata gracefully (#13052)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Greg Harris <gharris1727@gmail.com>
2 changed files
18 additions
6 deletions
DATE:Jan 4, 2023
-----------

      MINOR: Use LogConfig.validate instead of validateValues in `Kafka…
    
…MetadataLog` (#13051)

`LogConfig.validateValues` may fail or incorrectly succeed if the properties don't include defaults.

During the conversion of `LogConfig` to Java (#13049), it became clear that the `asInstanceOf[Long]`
calls in `LogConfig.validateValues` were converting `null` to `0` when this method was invoked
from `KafkaMetadataLog`. This means that it would be possible for it to validate successfully
in cases where it should not.

Reviewers: José Armando García Sancio <jsancio@apache.org>
1 changed file
1 addition
1 deletion
DATE:Dec 28, 2022
-----------

KAFKA-14543: Move LogOffsetMetadata to storage module (#13038)
    
Reviewers: Ismael Juma <ismael@juma.me.uk>, dengziming <dengziming1993@gmail.com>, Satish Duggana <satishd@apache.org>, Federico Valeri <fedevaleri@gmail.com>
26 changed files
217 additions
195 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14544 The "is-future" should be removed from metrics tags after…
    
… future log becomes current log (#12979)

Reviewers: Luke Chen <showuon@gmail.com>
3 changed files
27 additions
13 deletions
DATE:Dec 26, 2022
-----------

      MINOR: fix expected version in streams upgrade test (#13022)
    
Co-authored-by: Lucas Brutschy <lucasbru@users.noreply.github.com>

Reviewers: Suhas Satish <ssatish@confluent.io>, Lucas Brutschy <lbrutschy@confluent.io>,  John Roesler <john@confluent.io>
1 changed file
3 additions
1 deletion
DATE:Dec 27, 2022
-----------

KAFKA-14554: Move ClassLoaderAwareRemoteStorageManagerTest to storage…
    
… module (#13048)

Reviewers: Ismael Juma <ismael@juma.me.uk>
2 changed files
46 additions
45 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14534: Reduce flakiness in TransactionsExpirationTest (#13036)
    
This test asserts that after a producerId expires and before a transactionId expires, the producerId is reused in a subsequent epoch.
The transactionId expiration time used in this test was too short, and a race condition between the two expirations was occasionally causing a new producerId to be returned without an epoch bump.

Reviewers: Luke Chen <showuon@gmail.com>, Justine Olshan <jolshan@confluent.io>
1 changed file
16 additions
10 deletions
DATE:Dec 23, 2022
-----------

      MINOR: fix typo in trace log (#12431)
    
Reviewers: @Kvicii, Matthias J. Sax <matthias@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Dec 28, 2022
-----------

KAFKA-14478: Move LogConfig/CleanerConfig and related to storage modu…
    
…le (#13049)

Additional notable changes to fix multiple dependency ordering issues:

* Moved `ConfigSynonym` to `server-common`
* Moved synonyms from `LogConfig` to `ServerTopicConfigSynonyms `
* Removed `LogConfigDef` `define` overrides and rely on
   `ServerTopicConfigSynonyms` instead.
* Moved `LogConfig.extractLogConfigMap` to `KafkaConfig`
* Consolidated relevant defaults from `KafkaConfig`/`LogConfig` in the latter
* Consolidate relevant config name definitions in `TopicConfig`
* Move `ThrottledReplicaListValidator` to `storage`

Reviewers: Satish Duggana <satishd@apache.org>, Mickael Maison <mickael.maison@gmail.com>
102 changed files
1,673 additions
1,596 deletions
DATE:Jan 4, 2023
-----------

KAFKA-13439: move upgrade note to stream upgrade doc (#12008)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
12 additions
10 deletions
DATE:Dec 28, 2022
-----------

KAFKA-13817 Always sync nextTimeToEmit with wall clock (#12166)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>, Hao Li <hli@confluent.io>
2 changed files
100 additions
4 deletions
DATE:Dec 28, 2022
-----------

      MINOR: Fixed type in KTable JavaDocs(#6867)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
1 addition
1 deletion
DATE:Dec 29, 2022
-----------

      MINOR: Fix small warning on javadoc and scaladoc (#11049)
    
Escape the `>` character in javadoc
Escape the `$` character when part of `${}` in scaladoc as this is the way to reference a variable

Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
2 additions
2 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14571: Include rack info in ZkMetadataCache.getClusterMetadata (#…

…13073)

ZkMetadataCache.getClusterMetadata returns a Cluster object where the aliveNodes were
missing their rack info.

Problem: when ZkMetadataCache updates the metadataSnapshot, includes the rack in
aliveBrokers but not in aliveNodes

Trivial fix with matching assertion in existing unit test.

Note that the Cluster object returned from `MetadataCache.getClusterMetadata(...)`
is passed to `ClientQuotaCallback.updateClusterMetadata(...)`
so it is used, though not by clients, but by service providers.

Reviewers: Ismael Juma <ismael@juma.me.uk>
2 changed files
3 additions
3 deletions
DATE:Jan 4, 2023
-----------

KAFKA-14550: Move SnapshotFile and CorruptSnapshotException to storag…
    
…e module (#13039)

For broader context on this change, see:

* KAFKA-14470: Move log layer to storage module

Reviewers: Ismael Juma <ismael@juma.me.uk>
16 changed files
186 additions
95 deletions
DATE:Jan 2, 2023
-----------

      MINOR: remove unused org.apache.kafka.streams.processor.internals.Res…
    
…toringTasks (#10164)

Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
0 additions
25 deletions
DATE:Dec 28, 2022
-----------

KAFKA-14564: Upgrade netty to 4.1.86 to address CVE-2022-41881, CVE-2…

…022-41915 (#13070)

For KAFKA-14564: upgrade to Netty 4.1.86

Fixes the following:

    CVE-2022-41881
    CVE-2022-41915

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Jan 4, 2023
-----------

KAFKA-13881: Add Streams package infos (#12936)
    
Reviewers: Christo Lolov (@clolov), Matthias J. Sax <matthias@confluent.io>
8 changed files
163 additions
0 deletions
DATE:Dec 27, 2022
-----------

      MINOR Fix checkstyle failures in streams/examples module. (#13055)
    
MINOR Fix checkstyle failures in streams/examples module. (#13055)
1 changed file
0 additions
3 deletions
DATE:Dec 29, 2022
-----------

KAFKA-14458: Introduce RPC support during ZK migration #13028

Add infrastructure for sending UpdateMetadataRequest and LeaderAndIsr RPCs during the migration
process from ZK to KRaft. The new classes use ControllerChannelManager to send the RPCs.  The
information to send comes from MetadataDelta and MetadataImage.

Reviewers: David Arthur <mumrah@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
17 changed files
763 additions
117 deletions
DATE:Jan 5, 2023
-----------

      MINOR: Add .vscode/ to git ignore for devs using vscode or codium (#1…

…3045)

Add .vscode/ to git ignore for devs using vscode or codium

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
0 deletions
DATE:Dec 27, 2022
-----------

KAFKA-14482: Move LoadedLogOffsets to storage module (#13065)
    
This is a relatively independent change in the context of KAFKA-14482.

Reviewers: Ismael Juma <ismael@juma.me.uk>, Christo Lolov <lolovc@amazon.com>, Divij Vaidya <diviv@amazon.com>, Satish Duggana <satishd@apache.org>
2 changed files
67 additions
6 deletions
DATE:Jan 5, 2023
-----------

      MINOR: Update LICENSE-binary based on the 3.4 dependencies (#13062)
    
No new licenses are needed, just two version changes in existing dependencies & one new dependency with existing license

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
3 additions
2 deletions
DATE:Dec 31, 2022
-----------

KAFKA-13881: Add Storage package info (#13053)
    
This module exposes a single package as public API that needs a package description.

Signed-off-by: Greg Harris <greg.harris@aiven.io>
Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
20 additions
0 deletions
DATE:Jan 2, 2023
-----------

KAFKA-14549: Move LogDirFailureChannel to storage module (#13041)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: dengziming <dengziming1993@gmail.com>, Mickael Maison <mickael.maison@gmail.com>, Satish Duggana <satishd@apache.org>, Ismael Juma <ismael@juma.me.uk>
47 changed files
140 additions
108 deletions
DATE:Dec 23, 2022
-----------

      [MINOR] Update upgrade documentation for 3.4 (#13061)
    
Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
2 changed files
44 additions
1 deletion
DATE:Dec 31, 2022
-----------

      MINOT: Fix punctuation marks (#12613)
    
Reviewers: Divij Vaidya <diviv@amazon.com>, Matthias J. Sax <matthias@confluent.io>
1 changed file
2 additions
2 deletions
DATE:Dec 28, 2022
-----------

      MINOR: increase connectionMaxIdleMs to make test reliable (#13031)
    
Saw this flaky test in recent builds: #1452, #1454,

org.opentest4j.AssertionFailedError: Unexpected channel state EXPIRED ==> expected: <true> but was: <false>
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at app//org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at app//org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:210)
	at app//org.apache.kafka.common.network.SslTransportLayerTest.testIOExceptionsDuringHandshake(SslTransportLayerTest.java:883)
	at app//org.apache.kafka.common.network.SslTransportLayerTest.testUngracefulRemoteCloseDuringHandshakeWrite(SslTransportLayerTest.java:833)

We expected the channel state to be AUTHENTICATE or READY, but got EXPIRED. Checking the test, we're not expecting expired state at all, but set a 5 secs idle timeout in selector, which is not enough when machine is busy. Increasing the connectionMaxIdleMs to 10 secs to make the test reliable.

Reviewers: Ismael Juma <ismael@juma.me.uk>
1 changed file
1 addition
1 deletion
DATE:Dec 22, 2022
-----------

      MINOR: make sure all partition info is propagated (#13037)
    
Recently, we have some flaky tests failed with: (ex: build #1457, #1459, #1460

java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.UnknownTopicOrPartitionException: This server does not host this topic-partition.
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1999)
	at org.apache.kafka.common.internals.KafkaFutureImpl.get(KafkaFutureImpl.java:165)
	at kafka.utils.TestUtils$.describeTopic(TestUtils.scala:475)
	at kafka.utils.TestUtils$.topicHasSameNumPartitionsAndReplicationFactor(TestUtils.scala:484)

The line failed is when we tried to create a topic but got TopicExistsException, so we want to make sure this topic has the expected partition num and replication factor. It failed while trying to describe this topic, and got UnknownTopicOrPartitionException. That will happen when topic is created but the metadata haven't propagated to all brokers. So, fix it by explicitly waiting for partition info propagated to all brokers before verifying topicHasSameNumPartitionsAndReplicationFactor.

Reviewers: Ismael Juma <ismael@juma.me.uk>, dengziming <dengziming1993@gmail.com>, Justine Olshan <jolshan@confluent.io >
1 changed file
14 additions
8 deletions
DATE:Dec 29, 2022
-----------

      MINOR: Fix typo (#13044)
    
fix of Kakfa to Kafka

Reviewers: Luke Chen <showuon@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Dec 23, 2022
-----------

      [KAFKA-13369] Follower fetch protocol changes for tiered storage. (#1…

…1390)

This PR implements the follower fetch protocol as mentioned in KIP-405.

Added a new version for ListOffsets protocol to receive local log start offset on the leader replica. This is used by follower replicas to find the local log star offset on the leader.

Added a new version for FetchRequest protocol to receive OffsetMovedToTieredStorageException error. This is part of the enhanced fetch protocol as described in KIP-405.

We introduced a new field locaLogStartOffset to maintain the log start offset in the local logs. Existing logStartOffset will continue to be the log start offset of the effective log that includes the segments in remote storage.

When a follower receives OffsetMovedToTieredStorage, then it tries to build the required state from the leader and remote storage so that it can be ready to move to fetch state.

Introduced RemoteLogManager which is responsible for

initializing RemoteStorageManager and RemoteLogMetadataManager instances.
receives any leader and follower replica events and partition stop events and act on them
also provides APIs to fetch indexes, metadata about remote log segments.
Followup PRs will add more functionality like copying segments to tiered storage, retention checks to clean local and remote log segments. This will change the local log start offset and make sure the follower fetch protocol works fine for several cases.

You can look at the detailed protocol changes in KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage#KIP405:KafkaTieredStorage-FollowerReplication

Co-authors: satishd@apache.org, kamal.chandraprakash@gmail.com, yingz@uber.com

Reviewers: Kowshik Prakasam <kprakasam@confluent.io>, Cong Ding <cong@ccding.com>, Tirtha Chatterjee <tirtha.p.chatterjee@gmail.com>, Yaodong Yang <yangyaodong88@gmail.com>, Divij Vaidya <diviv@amazon.com>, Luke Chen <showuon@gmail.com>, Jun Rao <junrao@gmail.com>
65 changed files
3,564 additions
234 deletions
DATE:Dec 17, 2022
-----------

KAFKA-14461: Move StoreQueryIntegrationTest to junit5 and fixing logi…
    
…c in a couple of tests for finding active streams (#13014)

StoreQueryIntegrationTest#shouldQuerySpecificActivePartitionStores and StoreQueryIntegrationTest#shouldQueryOnlyActivePartitionStoresByDefault has a logic to find active partitions by doing a modulo with 2 and comparing the remainder. This can break when a new test is added and since Junit chooses an arbitrary order to run the tests, modulo checks can fail. This PR tries to make it deterministic.
Also, this PR uses Junit5 annotations so that the cluster and input topic can be setup/destroyed once.

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
37 additions
29 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14264; New logic to discover group coordinator (#12862)
    
[KAFKA-14264](https://issues.apache.org/jira/browse/KAFKA-14264)
In this patch, we refactored the existing FindCoordinator mechanism. In particular, we first centralize all of the network operation (send, poll) in `NetworkClientDelegate`, then we introduced a RequestManager interface that is responsible to handle the timing of different kind of requests, based on the implementation.  In this path, we implemented a `CoordinatorRequestManager` which determines when to create an `UnsentRequest` upon polling the request manager.

Reviewers: Jason Gustafson <jason@confluent.io>
19 changed files
1,398 additions
289 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14466: Move ClassloaderAwareRemoteStorageManager to storage mod…
    
…ule (#13013)

Reviewers: Ismael Juma <ismael@juma.me.uk>
7 changed files
145 additions
104 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14498: reduce the startup nodes to avoid timeout error (#13016)
    
In MetadataQuorumCommandTest, we sometimes got the error:

java.util.concurrent.ExecutionException: java.lang.RuntimeException: Received a fatal error while waiting for the broker to catch up with the current cluster metadata.

Since we tried to bring up 3 broker + 3 controllers at the same time, and the config initial.broker.registration.timeout.ms (default 1 min) is sometimes not enough for them to start up. Checking the tests, it doesn't require so many nodes. Reducing the nodes number to make these tests reliable.

Reviewers: dengziming <dengziming1993@gmail.com>, Ismael Juma <ismael@juma.me.uk>
1 changed file
13 additions
13 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14417: Address incompatible error code returned by broker from …
    
…`InitProducerId` (#12968)

Older clients can not handle the `REQUEST_TIMED_OUT` error that is returned from `InitProducerId` when the next producerId block cannot be fetched from the controller. In this patch, we return `COORDINATOR_LOAD_IN_PROGRESS` instead which is retriable.

Reviewers: Jason Gustafson <jason@confluent.io>
2 changed files
14 additions
4 deletions
DATE:Dec 19, 2022
-----------

      Move IndexEntry and related to storage module (#12993)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: dengziming <dengziming1993@gmail.com>
15 changed files
223 additions
105 deletions
DATE:Dec 17, 2022
-----------

      MINOR: Avoid unnecessary allocations in index binary search (#13024)
    
* MINOR: Avoid unnecessary allocations in index binary search

* Fix bug due to inverse usage of SearchType.

Also improve name clarity.
1 changed file
33 additions
24 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14496: Wrong Base64 encoder used by OIDC OAuthBearerLoginCallba…
    
…ckHandler (#13000)

The OAuth code to generate the Authentication header was incorrectly
using the URL-safe base64 encoder. For client IDs and/or secrets with
dashes and/or plus signs would not be encoded correctly, leading to the
OAuth server to reject the credentials.

This change uses the correct base64 encoder, per RFC-7617.

Co-authored-by: Endre Vig <vendre@gmail.com>
2 changed files
14 additions
4 deletions
DATE:Dec 16, 2022
-----------

      MINOR: Add zk migration field to the ApiVersionsResponse (#13029)
    
Add the zk mgiration field which will be used by the KRaft controller to see if the quorum is
ready to handle a zk to kraft migration.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
2 changed files
8 additions
1 deletion
DATE:Dec 21, 2022
-----------

      MINOR: Fix compiler errors in RemoteIndex* related to `OffsetPositi…
    
…on` (#13008)

#11390 and #12993 were merged in relatively quick succession, which resulted in compiler errors that weren't present when each change was on top of trunk.

Reviewers: Mickael Maison <mickael.maison@gmail.com>
2 changed files
4 additions
2 deletions
DATE:Dec 17, 2022
-----------

KAFKA-14531 Fix controller snapshot interval (#13019)
    
This patch applies the necessary conversion of milliseconds to nanoseconds for SnapshotGenerator. 

Reviewers: Colin P. McCabe <cmccabe@apache.org>, José Armando García Sancio <jsancio@gmail.com>
2 changed files
34 additions
2 deletions
DATE:Dec 20, 2022
-----------

      MINOR: Fix testPreferredReplicaAsLeaderWhenSameRackFollowerIsOutOfIsr (…

…#12982)

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
12 additions
1 deletion
DATE:Dec 21, 2022
-----------

KAFKA-14473: Move AbstractIndex to storage module (#13007)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Jun Rao <junrao@gmail.com>, Satish Duggana <satishd@apache.org>
8 changed files
631 additions
485 deletions
DATE:Dec 20, 2022
-----------

KAFKA-14521: Replace BrokerCompressionCodec with BrokerCompressionType (
    
#13011)

This is a requirement for:

* KAFKA-14477: Move LogValidator to storage module.

For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: dengziming <dengziming1993@gmail.com>
24 changed files
303 additions
317 deletions
DATE:Dec 20, 2022
-----------

KAFKA-14474: Move OffsetIndex to storage module (#13009)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Jun Rao <junrao@gmail.com>, Satish Duggana <satishd@apache.org>
11 changed files
280 additions
239 deletions
DATE:Dec 20, 2022
-----------

      MINOR: Document Offset and Partition 0-indexing, fix typo (#12753)
    
Add comments to clarify that both offsets and partitions are 0-indexed, and fix a minor typo. Clarify which offset will be retrieved by poll() after seek() is used in various circumstances. Also added integration tests.

Reviewers: Luke Chen <showuon@gmail.com>
4 changed files
71 additions
3 deletions
DATE:Dec 16, 2022
-----------

KAFKA-14299: Avoid interrupted exceptions during clean shutdown (#13026)
    
The call to `interrupt` on the state updater thread during shutdown
could interrupt the thread while writing the checkpoint file. This
can cause a failure to write the checkpoint file and a misleading
stack trace in the logs.

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
2 additions
1 deletion
DATE:Dec 21, 2022
-----------

KAFKA-14343: Upgrade tests for state updater (#12801)
    
A test that verifies the upgrade from a version of Streams with
state updater disabled to a version with state updater enabled
and vice versa, so that we can offer a save upgrade path.

 - upgrade test from a version of Streams with state updater
disabled to a version with state updater enabled
 - downgrade test from a version of Streams with state updater
 enabled to a version with state updater disabled

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
59 additions
37 deletions
DATE:Dec 20, 2022
-----------

      MINOR: remove onChange call in stream assignor assign method (#13034)
    
Reviewers: John Roesler <vvcephei@apache.org>
1 changed file
0 additions
1 deletion
DATE:Dec 22, 2022
-----------

KAFKA-14475: Move TimeIndex/LazyIndex to storage module (#13010)
    
For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

 Reviewers: Jun Rao <junrao@gmail.com>, Satish Duggana <satishd@apache.org>
11 changed files
558 additions
422 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14477: Move LogValidator and related to storage module (#13012)
    
Also improved `LogValidatorTest` to cover a bug that was originally
only caught by `LogAppendTimeTest`.

For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Jun Rao <junrao@gmail.com>
39 changed files
1,653 additions
1,448 deletions
DATE:Dec 22, 2022
-----------

KAFKA-6586: Refactor ConnectDistributed and ConnectStandalone to re-u…
    
…se shared logic (#12947)

Reviewers: Christo Lolov  <christo_lolov@yahoo.com>, Chris Egerton <chrise@aiven.io>
3 changed files
234 additions
152 deletions
DATE:Dec 21, 2022
-----------

      MINOR: Serialize response in KafkaApisTest (#12865)
    
Every request used in KafkaApiTests is serialized before hitting KafkaApis. This ensures that backward compatibility is handled correctly, especially ignorable fields. We don't do the same for the responses though. This patch fixes this and refactor how we get back the response in tests.

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
99 additions
153 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14132: Replace EasyMock and PowerMock with Mockito in connect/r…
    
…untime/ErrorHandlingTaskTest (#12735)

Reviewers: Divij Vaidya <divijvaidya13@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
125 additions
190 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14532: Correctly handle failed fetch when partitions unassigned (…

…#13023)

The failure handling code for fetches could run into an IllegalStateException if a fetch response came back with a failure after the corresponding topic partition has already been removed from the assignment.

Reviewers: David Jacot <djacot@confluent.io>
2 changed files
42 additions
1 deletion
DATE:Dec 21, 2022
-----------

      MINOR: No error with zero results state query (#13002)
    
This PR updates StateQueryResult.getOnlyPartitionResult() to not throw an IllegaArgumentException when there are 0 query results.

Added a test that will fail without this patch

Reviewers: John Roesler<vvcephei@apache.org>
2 changed files
66 additions
2 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14529 Use the MetadataVersion from ClusterConfig in ZK tests (#…

…13020)

Reviewers: Ismael Juma <ismael@juma.me.uk>
2 changed files
2 additions
2 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14472: Move TransactionIndex and related to storage module (#12996

)

For broader context on this change, please check:

* KAFKA-14470: Move log layer to storage module

Reviewers: Jun Rao <junrao@gmail.com>, Satish Duggana <satishd@apache.org>
19 changed files
556 additions
344 deletions
DATE:Dec 19, 2022
-----------

KAFKA-14446: code style improvements for broker-to-controller forward…
    
…ing (#13001)

Reviewers: Colin P. McCabe <cmccabe@apache.org>, Ismael Juma <ismael@juma.me.uk>, David Arthur <mumrah@gmail.com>
4 changed files
70 additions
49 deletions
DATE:Dec 21, 2022
-----------

KAFKA-14457; Controller metrics should only expose committed data (#1…

…2994)

The controller metrics in the controllers has three problems. 1) the active controller exposes uncommitted data in the metrics. 2) the active controller doesn't update the metrics when the uncommitted data gets aborted. 3) the controller doesn't update the metrics when the entire state gets reset.

We fix these issues by only updating the metrics when processing committed metadata records and reset the metrics when the metadata state is reset.

This change adds a new type `ControllerMetricsManager` which processes committed metadata records and updates the metrics accordingly. This change also removes metrics updating responsibilities from the rest of the controller managers. 

Reviewers: Ron Dagostino <rdagostino@confluent.io>
16 changed files
765 additions
322 deletions
DATE:Dec 20, 2022
-----------

      MINOR: Use INFO logging for tools and trogdor tests (#13006)
    
`TRACE` is too noisy and makes the build slower.

Reviewers: David Jacot <djacot@confluent.io>
2 changed files
2 additions
2 deletions
DATE:Dec 17, 2022
-----------

      MINOR: Use withClassLoader in a couple more places (#13018)
    
Instead of try/finally.

Reviewers: Ron Dagostino <rndgstn@gmail.com>
2 changed files
7 additions
13 deletions
DATE:Dec 19, 2022
-----------

      MINOR: Fix various memory leaks in tests (#12959)
    
Various tests in the streams park were leaking native memory.

Most tests were fixed by closing the corresponding rocksdb resource.

I tested that the corresponding leak is gone by using a previous rocksdb
release with finalizers and checking if the finalizers would be called at some
point.

Reviewer: Bruno Cadonna <cadonna@apache.org>
4 changed files
38 additions
27 deletions
DATE:Dec 21, 2022
-----------

      MINOR: Don't throw if MirrorMaker topics already exist (#13005)
    

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
88 additions
0 deletions
DATE:Dec 20, 2022
-----------

KAFKA-14435: Fix allow.everyone.if.no.acl.found config behavior for…
    
… StandardAuthorizer

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>, Colin Patrick McCabe <cmccabe@apache.org>
2 changed files
90 additions
28 deletions
DATE:Dec 8, 2022
-----------

KAFKA-14392: Fix overly long request timeouts in BrokerToControllerCh…
    
…annelManager (#12856)

In BrokerToControllerChannelManager, set the request timeout to the minimum of the retry timeout
and the controller socket timeout. This fixes some cases where we were unintentionally setting an
overly long request timeout. 

Also, the channel manager used by the BrokerLifecycleManager should set a retry timeout equal to
half of the broker session timeout, rather than the entire broker session timeout, to allow for a
retransmission if the initial attempt fails.

These two fixes should address some cases where heartbeat broker requests were not being resent
in a timely fashion after a network glitch.

Reviewers: Colin P. McCabe <cmccabe@apache.org>, José Armando García Sancio <jsancio@apache.org>
3 changed files
4 additions
4 deletions
DATE:Dec 10, 2022
-----------

      MINOR: Change KRaft ZK controller registration algorithm (#12973)
    
Increment the value in "/controller_epoch" when registering a KRaft controller as the active controller. Use the "kraftControllerEpoch" stored under "/controller" to ensure we are registering a newer KRaft controller.

Reviewers: Colin P. McCabe <cmccabe@apache.org>
5 changed files
166 additions
57 deletions
DATE:Dec 14, 2022
-----------

      MINOR: Small refactor in KafkaApis.handleHeartbeatRequest (#12978)
    
This is a small follow-up to #12848. 

Reviewers: Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
1 changed file
4 additions
11 deletions
DATE:Dec 13, 2022
-----------

      MINOR: Move MetadataQuorumCommand from core to tools (#12951)
    
`core` should only be  used for legacy cli tools and tools that require
access to `core` classes instead of communicating via the kafka protocol
(typically by using the client classes).

Summary of changes:
1. Convert the command implementation and tests to Java and move it to
    the `tools` module.
2. Introduce mechanism to capture stdout and stderr from tests.
3. Change `kafka-metadata-quorum.sh` to point to the new command class.
4. Adjusted the test classpath of the `tools` module so that it supports tests
    that rely on the `@ClusterTests` annotation.
5. Improved error handling when an exception different from `TerseFailure` is
    thrown.
6. Changed `ToolsUtils` to avoid usage of arrays in favor of `List`.

Reviewers: dengziming <dengziming1993@gmail.com>
16 changed files
553 additions
405 deletions
DATE:Dec 9, 2022
-----------

      MINOR: Pass snapshot ID directly in RaftClient.createSnapshot (#12981)
    
Let `RaftClient.createSnapshot` take the snapshotId directly instead of the committed offset/epoch (which may not exist). 

Reviewers: José Armando García Sancio <jsancio@apache.org>
10 changed files
90 additions
66 deletions
DATE:Dec 13, 2022
-----------

KAFKA-14318: KIP-878, Introduce partition autoscaling configs (#12962)
    
First PR for KIP-878: Internal Topic Autoscaling for Kafka Streams

Introduces two new configs related to autoscaling in Streams: a feature flag and retry timeout. This PR just adds the configs and gets them passed through to the Streams assignor where they'll ultimately be needed/used

Reviewers: Bill Bejeck <bill@confluent.io>, Walker Carlson <wcarlson@confluent.io>
11 changed files
198 additions
84 deletions
DATE:Dec 9, 2022
-----------

KAFKA-14454: Making unique StreamsConfig for tests (#12971)
    
Newly added test KTableKTableForeignKeyInnerJoinCustomPartitionerIntegrationTest#shouldThrowIllegalArgumentExceptionWhenCustomPartionerReturnsMultiplePartitions as part of KIP-837 passes when run individually but fails when is part of IT class and hence is marked as Ignored.

That seemed to have been because of the way StreamsConfig was being initialised so any new test would have used the same names. Because of which the second test never got to the desired state. With this PR, every test gets a unique app name which seems to have fixed the issue. Also, a couple of cosmetic changes

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
20 additions
16 deletions
DATE:Dec 10, 2022
-----------

KAFKA-14285: Delete quota node in zookeeper when configs are empty (#…

…12729)

The PR resolve issue KAFKA-14285. After doing changeConfigs, check and clean quota nodes if configs are empty, to avoid infinite increasement of quota nodes in zookeeper

Reviewers: Luke Chen <showuon@gmail.com>, Igor Soarez <soarez@apple.com>, dengziming <dengziming1993@gmail.com>
5 changed files
137 additions
16 deletions
DATE:Dec 13, 2022
-----------

KAFKA-14367; Add DeleteGroups to the new GroupCoordinator interfa…
    
…ce (#12858)

This patch adds `deleteGroups` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Omnia G H Ibrahim <o.g.h.ibrahim@gmail.com>, Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
252 additions
20 deletions
DATE:Dec 15, 2022
-----------

KAFKA-14432: RocksDBStore relies on finalizers to not leak memory (#1…

…2935)

RocksDBStore relied on finalizers to not leak memory (and leaked memory after the upgrade to RocksDB 7).
The problem was that every call to options.statistics creates a new wrapper object that needs to be finalized.

I simplified the logic a bit and moved the ownership of the statistics from ValueProvider to RocksDBStore.

Reviewers: Bruno Cadonna <cadonna@apache.org>, Anna Sophie Blee-Goldman <ableegoldman@apache.org>, Christo Lolov <lolovc@amazon.com>
4 changed files
76 additions
38 deletions
DATE:Dec 8, 2022
-----------

      MINOR: add docs table entries for new metrics (#12934)
    
Adds docs for KIP-761.

Reviewers: Anurag Bandyopadhyay (@Anuragkillswitch), Matthias J. Sax <matthias@confluent.io>
1 changed file
50 additions
0 deletions
DATE:Dec 9, 2022
-----------

      Removing Multicasting partitioner for IQ (#12977)
    
Follow up PR for KIP-837. We don't want to allow multicasting for IQ. This PR imposes that restriction.

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
4 changed files
66 additions
115 deletions
DATE:Dec 15, 2022
-----------

      MINOR: ControllerServer should use the new metadata loader and snapsh…
    
…ot generator (#12983)

This PR introduces the new metadata loader and snapshot generator. For the time being, they are
only used by the controller, but a PR for the broker will come soon.

The new metadata loader supports adding and removing publishers dynamically. (In contrast, the old
loader only supported adding a single publisher.) It also passes along more information about each
new image that is published. This information can be found in the LogDeltaManifest and
SnapshotManifest classes.

The new snapshot generator replaces the previous logic for generating snapshots in
QuorumController.java and associated classes. The new generator is intended to be shared between
the broker and the controller, so it is decoupled from both.

There are a few small changes to the old snapshot generator in this PR. Specifically, we move the
batch processing time and batch size metrics out of BrokerMetadataListener.scala and into
BrokerServerMetrics.scala.

Finally, fix a case where we are using 'is' rather than '==' for a numeric comparison in
snapshot_test.py.

Reviewers: David Arthur <mumrah@gmail.com>
42 changed files
2,486 additions
1,361 deletions
DATE:Dec 16, 2022
-----------

KAFKA-13709: Add docs for exactly-once support in Connect (#12941)
    
Reviewers: Mickael Maison <mickael.maison@gmail.com>
2 changed files
217 additions
3 deletions
DATE:Dec 15, 2022
-----------

KAFKA-14367; Add ListGroups to the new GroupCoordinator interface (…

…#12853)

This patch adds `listGroups` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
264 additions
60 deletions
DATE:Dec 7, 2022
-----------

      MINOR: Bump trunk to 3.5.0-SNAPSHOT (#12960)
    
Version bumps in trunk after the creation of the 3.4 branch.

Reviewers: Ismael Juma <ismael@juma.me.uk>
5 changed files
11 additions
7 deletions
DATE:Dec 8, 2022
-----------

      MINOR; Improve high watermark log messages (#12975)
    
While debugging KRaft and the metadata state machines it is helpful to always log the first time the replica discovers the high watermark. All other updates to the high watermark are logged at trace because they are more frequent and less useful.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
75 additions
22 deletions
DATE:Dec 13, 2022
-----------

      MINOR: Introduce MetadataProvenance and ImageReWriter (#12964)
    
Introduce MetadataProvenance to encapsulate the three-tuple of (offset, epoch, timestamp) that is
associated with each MetadataImage, as well as each on-disk snapshot. Also introduce a builder
for MetadataDelta.

Remove offset and epoch tracking from MetadataDelta. We do not really need to know this information
until we are creating the final MetadataImage object. Therefore, this bookkeeping should be done by
the metadata loading code, not inside the delta code, like the other bookkeeping. This simplifies a
lot of tests, as well as simplifying RecordTestUtils.  It also makes more sense for snapshots, where
the offset and epoch are the same for every record.

Add ImageReWriter, an ImageWriter that applies records to a MetadataDelta. This is useful when you
need to create a MetadataDelta object that holds the contents of a MetadataImage. This will be
used in the new image loader code (coming soon).

Add ImageWriterOptionsTest to test ImageWriterOptions.

Reviewers: David Arthur <mumrah@gmail.com>
19 changed files
558 additions
146 deletions
DATE:Dec 12, 2022
-----------

KAFKA-13881: Add Connect package infos (#12937)
    
Reviewers: Chris Egerton <chrise@aiven.io>
14 changed files
284 additions
0 deletions
DATE:Dec 13, 2022
-----------

KAFKA-13602: Remove unwanted logging in RecordCollectorImpl.java (#12985

)

There is unwanted logging introduced by #12803 as pointed out in this comment: #12803 (comment). This PR removes it.

Reviewers: Lucas Brutschy <lbrutschy@confluent.io>, Bruno Cadonna <cadonna@apache.org>
1 changed file
2 additions
2 deletions
DATE:Dec 13, 2022
-----------

      MINOR: update Streams upgrade guide for 3.1 release (#12926)
    
Reviewers: John Roesler <john@confluent.io>, Bill Bejeck <bill@confluent.io>
1 changed file
36 additions
0 deletions
DATE:Dec 14, 2022
-----------

      MINOR: Fix some compiler warnings (#12912)
    
Reviewers: Ismael Juma <ismael@juma.me.uk>, Luke Chen <showuon@gmail.com>
3 changed files
10 additions
10 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14427 ZK client support for migrations (#12946)
    
This patch adds support for reading and writing ZooKeeper metadata during a KIP-866 migration.

For reading metadata from ZK, methods from KafkaZkClient and ZkData are reused to ensure we are decoding the JSON consistently.

For writing metadata, we use a new multi-op transaction that ensures only a single controller is writing to ZK. This is similar to the existing multi-op transaction that KafkaController uses, but it also includes a check on the new "/migration" ZNode. The transaction consists of three operations:

* CheckOp on /controller_epoch
* SetDataOp on /migration with zkVersion
* CreateOp/SetDataOp/DeleteOp (the actual operation being applied)

In the case of a batch of operations (such as topic creation), only the final MultiOp has a SetDataOp on /migration while the other requests use a CheckOp (similar to /controller_epoch).

Reviewers: Colin Patrick McCabe <cmccabe@apache.org>, dengziming <dengziming1993@gmail.com>
12 changed files
1,423 additions
68 deletions
DATE:Dec 8, 2022
-----------

KAFKA-14395: add config to configure client supplier (#12944)
    
Implements KIP-884.

Reviewers: Matthias J. Sax <matthias@confluent.io>
4 changed files
69 additions
5 deletions
DATE:Dec 14, 2022
-----------

KAFKA-14379: Consumer should refresh preferred read replica on update…
    
… metadata (#12956)

The consumer (fetcher) used to refresh the preferred read replica on
three conditions:
    
1. the consumer receives an OFFSET_OUT_OF_RANGE error
2. the follower does not exist in the client's metadata (i.e., offline)
3. after metadata.max.age.ms (5 min default)
    
For other errors, it will continue to reach to the possibly unavailable
follower and only after 5 minutes will it refresh the preferred read
replica and go back to the leader.
    
Another problem is that the client might have stale metadata and not
send fetches to preferred replica, even after the leader redirects to
the preferred replica.
    
A specific example is when a partition is reassigned. the consumer will
get NOT_LEADER_OR_FOLLOWER which triggers a metadata update but the
preferred read replica will not be refreshed as the follower is still
online. it will continue to reach out to the old follower until the
preferred read replica expires.
    
The consumer can instead refresh its preferred read replica whenever it
makes a metadata update request, so when the consumer receives i.e.
NOT_LEADER_OR_FOLLOWER it can find the new preferred read replica without
waiting for the expiration.
    
Generally, we will rely on the leader to choose the correct preferred
read replica and have the consumer fail fast (clear preferred read replica
cache) on errors and reach out to the leader.

Co-authored-by: Jeff Kim <jeff.kim@confluent.io>

Reviewers: David Jacot <djacot@confluent.io>, Jason Gustafson <jason@confluent.io>
7 changed files
218 additions
44 deletions
DATE:Dec 12, 2022
-----------

      MINOR: Move dynamic config logic to DynamicConfigPublisher (#12958)
    
Split out the logic for applying dynamic configurations to a KafkaConfig object from
BrokerMetadataPublisher into a new class, DynamicConfigPublisher. This will allow the
ControllerServer to also run this code, in a follow-up change.

Create separate KafkaConfig objects in BrokerServer versus ControllerServer. This is necessary
because the controller will apply configuration changes as soon as its raft client catches up to
the high water mark, whereas the broker will wait for the active controller to acknowledge it has
caught up in a heartbeat response. So when running in combined mode, we want two separate
KafkaConfig objects that are changed at different times.

Minor changes: improve the error message when catching up broker metadata fails. Fix incorrect
indentation in checkstyle/import-control.xml. Invoke AppInfoParser.unregisterAppInfo from
SharedServer.stop so that it happens only when both the controller and broker have shut down.

Reviewers: David Arthur <mumrah@gmail.com>
7 changed files
150 additions
113 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14448 Let ZK brokers register with KRaft controller (#12965)
    
Prior to starting a KIP-866 migration, the ZK brokers must register themselves with the active
KRaft controller. The controller waits for all brokers to register in order to verify that all the
brokers can

A) Communicate with the quorum
B) Have the migration config enabled
C) Have the proper IBP set

This patch uses the new isMigratingZkBroker field in BrokerRegistrationRequest and
RegisterBrokerRecord. The type was changed from int8 to bool for BrokerRegistrationRequest (a
mistake from #12860). The ZK brokers use the existing BrokerLifecycleManager class to register and
heartbeat with the controllers.

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
21 changed files
608 additions
47 deletions
DATE:Dec 13, 2022
-----------

      MINOR: Small refactor in DescribeGroupsResponse (#12970)
    
This patch does a few cleanups:
* It removes `DescribeGroupsResponse.fromError` and pushes its logic to `DescribeGroupsRequest.getErrorResponse` to be consistent with how we implemented the other requests/responses.
* It renames `DescribedGroup.forError` to `DescribedGroup.groupError`.

The patch relies on existing tests.

Reviewers: Mickael Maison <mickael.maison@gmail.com>
3 changed files
22 additions
24 deletions
DATE:Dec 9, 2022
-----------

      MINOR: Fix FetchFromFollowerIntegrationTest.testFetchFromFollowerWith…
    
…Roll (#12987)

The test was added with a fix to KAFKA-14379, the problem was that the replication factor for the offset topic was 1 and consumer group coordinator got unavailable when one of the brokers got shut down.

Reviewers: David Jacot <djacot@confluent.io>
1 changed file
1 addition
0 deletions
DATE:Dec 14, 2022
-----------

KAFKA-14443: Close topic creation Admin clients in MM2 connectors (#1…

…2955)

Reviewers: Omnia G H Ibrahim <o.g.h.ibrahim@gmail.com>, Chris Egerton <chrise@aiven.io>
4 changed files
30 additions
14 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14446: API forwarding support from zkBrokers to the Controller (#…

…12961)

This PR enables brokers which are upgrading from ZK mode to KRaft mode to forward certain metadata
change requests to the controller instead of applying them directly through ZK. To faciliate this,
we now support EnvelopeRequest on zkBrokers (instead of only on KRaft nodes.)

In BrokerToControllerChannelManager, we can now reinitialize our NetworkClient. This is needed to
handle the case when we transition from forwarding requests to a ZK-based broker over the
inter-broker listener, to forwarding requests to a quorum node over the controller listener.

In MetadataCache.scala, distinguish between KRaft and ZK controller nodes with a new type,
CachedControllerId.

In LeaderAndIsrRequest, StopReplicaRequest, and UpdateMetadataRequest, switch from sending both a
zk and a KRaft controller ID to sending a single controller ID plus a boolean to express whether it
is KRaft. The previous scheme was ambiguous as to whether the system was in KRaft or ZK mode when
both IDs were -1 (although this case is unlikely to come up in practice). The new scheme avoids
this ambiguity and is simpler to understand.

Reviewers: dengziming <dengziming1993@gmail.com>, David Arthur <mumrah@gmail.com>, Colin P. McCabe <cmccabe@apache.org>
38 changed files
383 additions
143 deletions
DATE:Dec 15, 2022
-----------

KAFKA-14425; The Kafka protocol should support nullable structs (#12932)
    
This patch adds support for nullable structs in the Kafka protocol as described in KIP-893 - https://cwiki.apache.org/confluence/display/KAFKA/KIP-893%3A+The+Kafka+protocol+should+support+nullable+structs.

Reviewers: Colin Patrick McCabe <cmccabe@apache.org>
7 changed files
307 additions
13 deletions
DATE:Dec 8, 2022
-----------

KAFKA-14367; Add DescribeGroups to the new GroupCoordinator inter…
    
…face (#12855)

This patch adds `describeGroups` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Justine Olshan <jolshan@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
269 additions
75 deletions
DATE:Dec 13, 2022
-----------

KAFKA-14260: add synchronized to prefixScan method (#12893)
    
As a result of "14260: InMemoryKeyValueStore iterator still throws ConcurrentModificationException", I'm adding synchronized to prefixScan as an alternative to going back to the ConcurrentSkipList.

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
2 changed files
23 additions
2 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14386; Return TopicAssignment from the ReplicaPlacer (#12892)
    
This changes the ReplicaPlacer interface to return a class instead of a list of list of integers. There are two reasons for the suggestion. First, as mentioned in the JIRA, it will make the interface, arguably, a bit more readable and understandable by explicitly modeling the idea of topic and partition. Second and more importantly, it makes the interface more extendable in the future. Right now it would be challenging to add more metadata to the response.

Reviewers: José Armando García Sancio <jsancio@apache.org>
9 changed files
286 additions
52 deletions
DATE:Dec 6, 2022
-----------

KAFKA-13602: Adding ability to multicast records (#12803)
    
This PR implements KIP-837 which enhances StreamPartitioner to multicast records.

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>, YEONCHEOL JANG
16 changed files
837 additions
38 deletions
DATE:Dec 6, 2022
-----------

KAFKA-14398: Update EndToEndAuthorizationTest to test both ZK and KRA…
    
…FT quorum servers (#12896)

* Update EndToEndAuthorizationTest to test both ZK and KRAFT quorum servers

* SCRAM and Delegation are not implemented for KRAFT yet so they emit
a message to stderr and pass the test.

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
9 changed files
195 additions
88 deletions
DATE:Dec 2, 2022
-----------

      MINOR; Use Option to check for null values (#12929)
    
Use `Option` instead of `match` to check for `null` values.

Reviewers: Jason Gustafson <jason@confluent.io>
1 changed file
6 additions
7 deletions
DATE:Dec 1, 2022
-----------

KAFKA-14367; Add SyncGroup to the new GroupCoordinator interface (#…

…12847)

This patch adds `syncGroup` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Justine Olshan <jolshan@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Jason Gustafson <jason@confluent.io>
6 changed files
266 additions
131 deletions
DATE:Dec 2, 2022
-----------

      MINOR: Optimize metric recording when quota check not required (#12933)
    
In the selector code path, we record some values for some sensors which do not have any metric associated with them that requires quota. Yet, a redundant check for quotas is made which consumes ~0.7% of CPU time in the hot path as demonstrated by the flame graph below. 

![Screenshot 2022-12-01 at 15 46 52](https://user-images.githubusercontent.com/71267/205082727-29c1300d-48fa-475f-b736-45743a2291ba.png)

This PR is a minor optimization which removes the redundant check for quotas in cases where it is not required in the hot path.

Flamegraph after this patch (note that checkQuotas CPU utilization has been removed)

<img width="1789" alt="Screenshot 2022-12-02 at 12 00 31" src="https://user-images.githubusercontent.com/71267/205278204-798fbe96-0acf-4fa4-995b-19b66b6c2cbb.png">

Reviewers: Luke Chen <showuon@gmail.com>, David Jacot <djacot@confluent.io>
1 changed file
6 additions
6 deletions
DATE:Dec 5, 2022
-----------

KAFKA-14017: Implement new KIP-618 APIs in FileStreamSourceConnector (#…

…12355)

Reviewers: Yash Mayya <yash.mayya@gmail.com>,  Maison <mickael.maison@gmail.com>
2 changed files
34 additions
0 deletions
DATE:Dec 1, 2022
-----------

      MINOR; Avoid unnecessarily requesting node for post step in Jenkinsfi…
    
…le (#12939)

Pull requests' builds are often waiting unnecessarily on getting an ubuntu node in the post step. The post step sends out an email to the dev mailing list but it does so only for regular branches. For pull requests, it does nothing. However, the check to verify if the build is for a pull request is executed when the node is allocated so the build has to wait for it.

![Screenshot 2022-12-05 at 13 42 58](https://user-images.githubusercontent.com/157182/205639994-afc09ffa-475e-41ae-9e33-86e0dfe4d998.png)

With this change, the check is executed before requesting the node so it does not unnecessarily request a node if one is not needed.

![Screenshot 2022-12-05 at 13 43 21](https://user-images.githubusercontent.com/157182/205640048-57264a1c-3fa4-4c71-9b3d-12fb43490d68.png)

Note that I have verified that sending the email still works with this change (see fc74c83).

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
3 additions
3 deletions
DATE:Dec 5, 2022
-----------

KAFKA-14367; Add LeaveGroup to the new GroupCoordinator interface (…

…#12850)

This patch adds `leaveGroup` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Justine Olshan <jolshan@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Jason Gustafson <jason@confluent.io>
7 changed files
315 additions
74 deletions
DATE:Dec 5, 2022
-----------

      MINOR: Remove unused variables and other minor clean-ups (#12952)
    
* Remove whitespace before package declaration
* Avoid unnecessary postfix language usage

Reviewers: Luke Chen <showuon@gmail.com>
7 changed files
18 additions
25 deletions
DATE:Dec 5, 2022
-----------

      MINOR: Fix compilation issue in FileStreamSourceConnector (#12938)
    
Fix compilation failure introduced in #12355.

Reviewers: Mickael Maison <mickael.maison@gmail.com>
1 changed file
1 addition
1 deletion
DATE:Dec 1, 2022
-----------

KAFKA-14256: Upgrade from Scala 2.13.8 to 2.13.10 (#12675)
    
In addition to the version bump, we also had to:
* Update the zinc version
* Workaround compiler warnings via suppression (proper fix in a follow up)
* Adjust `testDeleteTopicDoesNotRetryThrottlingQuotaExceededException` to fix a test failure

Release notes:
* https://github.com/scala/scala/releases/tag/v2.13.9
* https://github.com/scala/scala/releases/tag/v2.13.10

Reviewers: Ismael Juma <ismael@juma.me.uk>
7 changed files
13 additions
10 deletions
DATE:Dec 5, 2022
-----------

      MINOR: Remove KafkaTimer (#12950)
    
It doesn't add much value since lambdas
were introduced in Java 8.

Also remove KafkaTimerTest.

Reviewers: David Jacot <djacot@confluent.io>, Christo Lolov <lolovc@amazon.com>
5 changed files
15 additions
104 deletions
DATE:Dec 5, 2022
-----------

KAFKA-14293: Basic Auth filter should set the SecurityContext after a…
    
… successful login (#12846)

Reviewers: Greg Harris <greg.harris@aiven.io>, Chris Egerton <chrise@aiven.io>
5 changed files
110 additions
35 deletions
DATE:Dec 5, 2022
-----------

KAFKA-14352: Rack-aware consumer partition assignment protocol change…
    
…s (KIP-881) (#12954)

Reviewers: David Jacot <djacot@confluent.io>
13 changed files
136 additions
32 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14415: Faster ThreadCache (#12903)
    
Optimization of `ThreadCache`. The original implementation showed significant slow-down when many caches were registered.

`sizeBytes` was called at least once, and potentially many times
in every `put` and was linear in the number of caches (= number of
state stores, so typically proportional to number of tasks). That
means, with every additional task, every put gets a little slower.
This was confirmed experimentally.

In this change, we modify the implementation of `ThreadCache` to
keep track of the total size in bytes. To be independent of the
concrete implementation of the underlying cache, we update the size
by subtracting the old and adding the new size of the cache before
and after every modifying operation. For this we acquire the object
monitor of the cache, but since all modifying operations on the caches
are synchronized already, this should not cause extra overhead.

This change also fixes a `ConcurrentModificationException` that could
be thrown in a race between `sizeBytes` and `getOrCreate`.

Reviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>
1 changed file
43 additions
20 deletions
DATE:Dec 7, 2022
-----------

KAFKA-14430: Specify JMX RMI port system property when not already set (
    
#12898)

Reviewers: Andriy Redko <andriy.redko@aiven.io>, Chris Egerton <chrise@aiven.io>
1 changed file
4 additions
0 deletions
DATE:Dec 2, 2022
-----------

      MINOR: Prevent NPE in SmokeTestDriver (fix flaky test) (#12908)
    
SmokeTestDriverIntegrationTest.java can be flaky because a NullPointerException prevents the retry mechanism that is added to prevent flakiness for this test. This change, prevents the NullPointerException and hence, allows the test to retry itself.

Reviewers: Luke Chen <showuon@gmail.com>, Lucas Brutschy <lbrutschy@confluent.io>
1 changed file
16 additions
12 deletions
DATE:Dec 6, 2022
-----------

      MINOR: try-finally around super call in http.py (#12924)
    

Reviewers: Daniel Gospodinow <danielgospodinow@gmail.com>, Ian McDonald <imcdonald@confluent.io>, Manikumar Reddy <manikumar.reddy@gmail.com>
1 changed file
8 additions
7 deletions
DATE:Dec 1, 2022
-----------

      MINOR: extract jointly owned parts of BrokerServer and ControllerServ…
    
…er (#12837)

Extract jointly owned parts of BrokerServer and ControllerServer into SharedServer. Shut down
SharedServer when the last component using it shuts down. But make sure to stop the raft manager
before closing the ControllerServer's sockets.

This PR also fixes a memory leak where ReplicaManager was not removing some topic metric callbacks
during shutdown. Finally, we now release memory from the BatchMemoryPool in KafkaRaftClient#close.
These changes should reduce memory consumption while running junit tests.

Reviewers: Jason Gustafson <jason@confluent.io>, Ismael Juma <ismael@juma.me.uk>
19 changed files
632 additions
334 deletions
DATE:Dec 2, 2022
-----------

KAFKA-14304 Add RPC changes, records, and config from KIP-866 (#12928)
    
Reviewers: Colin Patrick McCabe <cmccabe@apache.org>
20 changed files
328 additions
33 deletions
DATE:Dec 3, 2022
-----------

      MINOR: Remove unused ApiUtils (#12949)
    
Also remove `ApiUtilsTest`.

Reviewers: David Jacot <djacot@confluent.io>, dengziming <dengziming1993@gmail.com>
2 changed files
0 additions
149 deletions
DATE:Dec 4, 2022
-----------

KAFKA-14146: Config file option for MessageReader/MessageFormatter in…
    
… ConsoleProducer/ConsoleConsumer (KIP-840) (#12175)

This patch implements KIP-840 as outlined here: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=211884652.

Reviewers: David Jacot <djacot@confluent.io>
4 changed files
76 additions
10 deletions
DATE:Dec 2, 2022
-----------

KAFKA-14367; Add Heartbeat to the new GroupCoordinator interface (#…

…12848)

This patch adds `heartbeat` to the new `GroupCoordinator` interface and updates `KafkaApis` to use it.

Reviewers: Justine Olshan <jolshan@confluent.io>, Jeff Kim <jeff.kim@confluent.io>, Jason Gustafson <jason@confluent.io>
5 changed files
167 additions
28 deletions
DATE:Dec 1, 2022
-----------

KAFKA-14358; Disallow creation of cluster metadata topic (#12885)
    
With KRaft the cluster metadata topic (__cluster_metadata) has a different implementation compared to regular topic. The user should not be allowed to create this topic. This can cause issues if the metadata log dir is the same as one of the log dirs.

This change returns an authorization error if the user tries to create the cluster metadata topic.

Reviewers: David Arthur <mumrah@gmail.com>
9 changed files
75 additions
27 deletions
DATE:Dec 2, 2022
-----------

      MINOR: Update unit/integration tests to work with the IBM Semeru JDK (#…

…12343)

The IBM Semeru JDK use the OpenJDK security providers instead of the IBM security providers so test for the OpenJDK classes first where possible and test for Semeru in the java.runtime.name system property otherwise.

Reviewers: Mickael Maison <mickael.maison@gmail.com>, Bruno Cadonna <cadonna@apache.org>
7 changed files
41 additions
15 deletions
DATE:Dec 1, 2022
-----------

KAFKA-13715: add generationId field in subscription (#12748)
    
Implementation for KIP-792, to add generationId field in ConsumerProtocolSubscription message. So when doing assignment, we'll take from subscription generationId fields it is provided in cooperative rebalance protocol. Otherwise, we'll fall back to original solution to use userData.

Reviewers: David Jacot <djacot@confluent.io>
12 changed files
370 additions
131 deletions
DATE:Dec 1, 2022
-----------

KAFKA-14417: Producer doesn't handle REQUEST_TIMED_OUT for InitProduc…
    
…erIdRequest, treats as fatal error (#12915)

The broker may return the `REQUEST_TIMED_OUT` error in `InitProducerId` responses when allocating the ID using the `AllocateProducerIds` request. The client currently does not handle this. Instead of retrying as we would expect, the client raises a fatal exception to the application. 

In this patch, we address this problem by modifying the producer to handle `REQUEST_TIMED_OUT` and any other retriable errors by re-enqueuing the request. 

Reviewers: Jason Gustafson <jason@confluent.io>
3 changed files
63 additions
6 deletions
DATE:Dec 6, 2022
-----------

      MINOR: Reuse gradle daemon for scala compilation by default (#12280)
    
The time time to compile was reduced from 5.3 seconds to 0.9 seconds by
changing the keep alive mode from `SESSION` to `DAEMON`. We change the
default to the latter and allow the former to be set via a `keepAliveMode`
property.

Also update the Jenkins build to use `keepAliveMode="session"` instead of
`--no-daemon`.

./gradlew compileTestScala -PkeepAliveMode="daemon" --info:

> Task :streams:streams-scala:compileTestScala
> Watching 928 directories to track changes
> Caching disabled for task ':streams:streams-scala:compileTestScala' because:
>   Build cache is disabled
> Task ':streams:streams-scala:compileTestScala' is not up-to-date because:
>   Input property 'source' file /home/ijuma/src/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/JoinedTest.scala has changed.
> Watching 920 directories to track changes
> Watching 919 directories to track changes
> Compiling with Zinc Scala compiler.
> Prepared Zinc Scala inputs: 0.004 secs
> compiling 16 Scala sources to /home/ijuma/src/kafka/streams/streams-scala/build/classes/scala/test ...
> done compiling
> Completed Scala compilation: 0.925 secs

./gradlew compileTestScala -PkeepAliveMode="session" --info

> Task :streams:streams-scala:compileTestScala
> Watching 928 directories to track changes
> Caching disabled for task ':streams:streams-scala:compileTestScala' because:
>   Build cache is disabled
> Task ':streams:streams-scala:compileTestScala' is not up-to-date because:
>   Input property 'source' file /home/ijuma/src/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/JoinedTest.scala has changed.
> Watching 920 directories to track changes
> Watching 919 directories to track changes
> Starting process 'Gradle Worker Daemon 3'. Working directory: /home/ijuma/.gradle/workers Command: /usr/java/jdk-17.0.4.1+1/bin/java -Xss4m -XX:+UseParallelGC --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.nio.file=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.regex=ALL-UNNAMED --add-opens=java.base/java.util.stream=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.base/java.time=ALL-UNNAMED --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED @/home/ijuma/.gradle/.tmp/gradle-worker-classpath3305983246500958050txt -Xmx2048m -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Worker Daemon 3'
> Successfully started process 'Gradle Worker Daemon 3'
> Started Gradle worker daemon (0.244 secs) with fork options DaemonForkOptions{executable=/usr/java/jdk-17.0.4.1+1/bin/java, minHeapSize=null, maxHeapSize=2048m, jvmArgs=[-Xss4m, -XX:+UseParallelGC, --add-opens=java.base/java.io=ALL-UNNAMED, --add-opens=java.base/java.lang=ALL-UNNAMED, --add-opens=java.base/java.nio=ALL-UNNAMED, --add-opens=java.base/java.nio.file=ALL-UNNAMED, --add-opens=java.base/java.util=ALL-UNNAMED, --add-opens=java.base/java.util.concurrent=ALL-UNNAMED, --add-opens=java.base/java.util.regex=ALL-UNNAMED, --add-opens=java.base/java.util.stream=ALL-UNNAMED, --add-opens=java.base/java.text=ALL-UNNAMED, --add-opens=java.base/java.time=ALL-UNNAMED, --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED], keepAliveMode=SESSION}.
> Compiling with Zinc Scala compiler.
> Prepared Zinc Scala inputs: 0.187 secs
> compiling 16 Scala sources to /home/ijuma/src/kafka/streams/streams-scala/build/classes/scala/test ...
> done compiling
> Completed Scala compilation: 5.307 secs

See gradle/gradle#20579 for more details.

Reviewers: Manikumar Reddy <manikumar.reddy@gmail.com>
3 changed files
16 additions
3 deletions
DATE:Dec 1, 2022
-----------

      MINOR: Remove unnecessary scalac warnings suppression (#12953)
    
Fix the underlying warnings instead.

Reviewers: Luke Chen <showuon@gmail.com>
3 changed files
2 additions
6 deletions
DATE:Dec 5, 2022
-----------

      MINOR: Implement EventQueue#size and EventQueue#empty (#12930)
    
Implement functions to measure the number of events in the event queue.

Reviewers: David Arthur <mumrah@gmail.com>
4 changed files
75 additions
3 deletions
DATE:Dec 1, 2022
-----------

      MINOR: Fix log message used in version probing system test (#12931)
    
PR #12684 introduced a better format for timestamps in log
messages. Unfortunately, we missed that one of the modified
log messages is used by a system test for validation.

This PR adapts the system test to look for the modified
log message.

Reviewers: Divij Vaidya <diviv@amazon.com>, Matthias J. Sax <mjsax@apache.org>
1 changed file
2 additions
2 deletions
DATE:Dec 5, 2022
-----------

KAFKA-14433 Clear Yammer metrics in QuorumTestHarness#tearDown (#12942)
    
Clear the Yammer metrics after each test. This will allow the RaftManager and other objects to get properly GC'd

Reviewers: Jason Gustafson <jason@confluent.io>
1 changed file
1 addition
0 deletions
DATE:Dec 2, 2022
-----------

KAFKA-14342: Clear offsets for connector source partitions on tombsto…
    
…ne messages (#12800)

Reviewers: Sagar Rao <sagarmeansocean@gmail.com>, Chris Egerton <chrise@aiven.io>
2 changed files
47 additions
10 deletions
DATE:Dec 6, 2022
-----------

KAFKA-14360: Fix links in documentation (#12857)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
1 changed file
3 additions
3 deletions
DATE:Nov 15, 2022
-----------

KAFKA-13401: KIP-787 - MM2 manage Kafka resources with custom Admin i…
    
…mplementation. (#12577)


Reviewers: Mickael Maison <mickael.maison@gmail.com>, Tom Bentley <tombentley@users.noreply.github.com>

Co-authored-by: Tom Bentley <tombentley@users.noreply.github.com>
Co-authored-by: oibrahim3 <omnia@apple.com>
16 changed files
1,081 additions
50 deletions
DATE:Nov 15, 2022
-----------

KAFKA-14346: Replace static mocking of WorkerConfig::lookupKafkaClust…
    
…erId (#12839)


Reviewers: Mickael Maison <mickael.maison@gmail.com>
5 changed files
171 additions
173 deletions
DATE:Nov 17, 2022
-----------

      MINOR: Change system test console consumer default log level (#12819)
    
For tests which use the console consumer service, we are currently enabling TRACE logging by default. I have seen some system tests where this produces GBs of logging. A better default is probably DEBUG.

Reviewers: José Armando García Sancio <jsancio@apache.org>
1 changed file
2 additions
2 deletions
DATE:Nov 7, 2022
-----------

KAFKA-13414: Replace PowerMock/EasyMock with Mockito in connect.stora…
    
…ge.KafkaOffsetBackingStoreTest (#12418)

Reviewers: Chris Egerton <chrise@aiven.io>
3 changed files
152 additions
226 deletions
DATE:Nov 15, 2022
-----------

      MINOR: Fix flaky RestoreIntegrationTest (#12841)
    
RestoreIntegrationTest used polling to determine if a rebalance
happens on one client, but if the rebalance would happen too quickly,
the polling would not pick it up and the check would time out.

Reviewer: Bruno Cadonna <cadonna@apache.org>
1 changed file
21 additions
6 deletions
DATE:Nov 10, 2022
-----------

KAFKA-14363; Add new group-coordinator module (KIP-848) (#12827)
    
Introduce new group-coordinator module that will host the future new group coordinator as part of KIP-848.

Reviewers: Ismael Juma <ismael@juma.me.uk>
5 changed files
82 additions
0 deletions
DATE:Nov 9, 2022
-----------

KAFKA-13785: Add JavaDocs for emit final (#12867)
    
Reviewers: Matthias J. Sax <matthias@confluent.io>
2 changed files
24 additions
2 deletions
DATE:Nov 16, 2022
-----------

      Revert "KAFKA-13891: reset generation when syncgroup failed with REBA…
    
…LANCE_IN_PROGRESS (#12140)" (#12794)

This reverts commit c23d60d.

Reviewers: Luke Chen <showuon@gmail.com>
2 changed files
0 additions
68 deletions
DATE:Nov 5, 2022
-----------

KAFKA-14355: Fix integer overflow in ProducerPerformance (#12822)
    
Change types from int to long to avoid overflow

Reviewers: Luke Chen <showuon@gmail.com>,  Igor Soarez <soarez@apple.com>
2 changed files
15 additions
8 deletions
DATE:Nov 5, 2022
-----------

      [KAFKA-14324] Upgrade RocksDB to 7.1.2 (#12809)
    
Reviewers: Bruno Cadonna <cadonna@confluent.io>, Anna Sophie Blee-Goldman <ableegoldman@apache.org>
2 changed files
57 additions
13 deletions
DATE:Nov 12, 2022
-----------

      MINOR: Avoid highestSupportedVersion outside tests (#12829)
    
We should avoid using Message.highestSupportedVersion to generate metadata records. Instead, we
need to pick the correct record version based on the current metadata version which is in effect.
In cases where there is only one record version that we know how to generate, we can hard code
that version, but it should just be a simple constant zero.

Reviewers: Jason Gustafson <jason@confluent.io>
5 changed files
16 additions
27 deletions
DATE:Nov 8, 2022
-----------

KAFKA-14058: Migrate ExactlyOnceWorkerSourceTaskTest from EasyMock an…
    
…d Powermock to Mockito (#12409)

Reviewers: Mickael Maison <mickael.maison@gmail.com>
4 changed files
623 additions
744 deletions
DATE:Nov 3, 2022
-----------

KAFKA-14299: Initialize tasks in state updater (#12795)
    
The state updater code path puts tasks into an
"initialization queue", with created, but not initialized tasks.
These are later, during the event-loop, initialized and added
to the state updater. This might lead to losing track of those 
tasks - in particular it is possible to create
tasks twice, if we do not go once around `runLoop` to initialize
the task. This leads to `IllegalStateExceptions`. 

By handing the task to the state updater immediately and let the
state updater initialize the task, we can fulfil our promise to 
preserve the invariant "every task is owned by either the task 
registry or the state updater".

Reviewer: Bruno Cadonna <cadonna@apache.org>
6 changed files
99 additions
141 deletions
DATE:Nov 14, 2022
-----------

KAFKA-14132: Replace PowerMock and EasyMock with Mockito in connect t…
    
…ests (#12823)

Reviewers: Chris Egerton <chrise@aiven.io>
1 changed file
65 additions
90 deletions
DATE:Nov 7, 2022
-----------

KAFKA-14299: Avoid allocation & synchronization overhead in StreamThr…
    
…ead loop (#12808)

The state updater code path introduced allocation and synchronization
overhead by performing relatively heavy operations in every iteration of
the StreamThread loop. This includes various allocations and acquiring
locks for handling `removedTasks` and `failedTasks`, even if the
corresponding queues are empty.

This change introduces `hasRemovedTasks` and
`hasExceptionsAndFailedTasks` in the `StateUpdater` interface that
can be used to skip over any allocation or synchronization. The new
methods do not require synchronization or memory allocation.

This change increases throughput by ~15% in one benchmark.

We extend existing unit tests to cover the slightly modified
behavior.

Reviewer: Bruno Cadonna <cadonna@apache.org>
5 changed files
53 additions
4 deletions
DATE:Nov 8, 2022
-----------

KAFKA-14334: Complete delayed purgatory after replication (#12783)
    
When a consumer makes a fetch request to a follower (KIP-392), the fetch request will sit in the purgatory until `fetch.max.wait.ms` is reached because the purgatory is not completed after replication. This patch aims to complete the delayed fetch purgatory after successfully replicating from the leader.

Reviewers: Artem Livshits <alivshits@confluent.io>, Luke Chen <showuon@gmail.com>, David Jacot <djacot@confluent.io>
13 changed files
289 additions
39 deletions
DATE:Nov 16, 2022
-----------

KAFKA-14388 - Fixes the NPE when using the new Processor API with the…
    
… DSL (#12861)

With the addition of the new Processor API the newly added FixedKeyProcessorNodeFactory extends the ProcessorNodeFactory class. The ProcessorNodeFactory had a private field Set<String> stateStoreNames initialized to an empty see. The FixedKeyProcessorNodeFactory also had a private field Set<String> stateStoreNames.

When executing InternalTopologyBuilder.build executing the buildProcessorNode method passed any node factory as ProcessorNodeFactory and the method references the stateStoreNames field, it's pointing to the superclass field, which is empty so the corresponding StoreBuilder(s) are never added - causing NPE in the topology.

This PR makes the field protected on the ProcessorNodeFactory class so FixedKeyProcessorNodeFactory inherits it.

The added test fails without this change.

Reviewers: Matthias J. Sax <mjsax@apache.org>,  Sophie Blee-Goldman <sophie@confluent.io>, Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>
2 changed files
139 additions
6 deletions
DATE:Nov 16, 2022
-----------
